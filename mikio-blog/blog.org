# -*- coding: utf-8 -*-
# = o-blog用のブログファイル
#+TITLE: ざる魂
#-DESCRIPTION: standalone blogging system for org-mode
#+DATE:

#+STARTUP: logdone

#-TEMPLATE_DIR: templates
#+URL: http://mikio.github.com/

#+DEFAULT_CATEGORY: Article
#+DISQUS: mikiokunblog
#+FILENAME_SANITIZER: ob-sanitize-string
#+POST_SORTER: ob-sort-posts-by-title
#+PUBLISH_DIR: ~/dev/mikio.github.com/

#+POST_BUILD_SHELL: cmd 1
#+POST_BUILD_SHELL: cmd 2
#+POST_BUILD_SHELL: cmd 3
#+POST_BUILD_SHELL: cmd 
* ざる魂について
  :PROPERTIES:
  :PAGE:     index.html
  :END:

#+HTML: <style>.article-header{display:none}</style>
#+HTML: <div class="page-header">
#+HTML:     <h1><small>人生パクリパクラレ。技術もパクリパクラレ。知られざる我が魂。</small></h1>
#+HTML: </div>


#+begin_o_blog_row 8
# #+HTML: <div class="hero-unit">
# #+HTML: <img title="mikios notePC" src="img/top-photo.jpg">
# #+HTML: </div>

#+o_blog_row_column 4
#+HTML: <div class="hero-unit" style="font-size: 200%;">

[[http://twitter.com/mikio_kun][/icon-pencil icon-white/ Twitter]]

[[http://twilog.org/mikio_kun][/icon-pencil icon-white/ Twilog]] 

[[https://github.com/mikio][/icon-github-sign icon-white/ Github]] 

[[http://code.google.com/p/ochagl/][/icon-cog icon-white/ OCHAGL]] 

#+HTML: </div>

#+end_o_blog_row


#+begin_o_blog_row 12
#+HTML: <div class="hero-unit">
 - 先輩に「プログラムでメシ喰ってくんならEmacs覚えろや!」と言われ
   Emacs(Meadow/Mule)を始める('98年ぐらいだったかなぁ)。
 - カスタマイズするにはEmacsLispという括弧だらけの
   気持ち悪い言語を操らなくてはならないと知り発狂する。
   せめてC言語ライクだったらいいのに。
 - xyzzyに乗り換えてCommonLispを知る(2000年ぐらい)。
 - ポールグレアムのエッセイを読んでLispすげーとなる。
 - 「ハッカーと画家」読んでさらに感動する(2005年ぐらい？)。
 - Emacsに戻る。
 - Clojureを知る。
 - Emacs使いのくせにコピペLisperはまずいということでEmacsLispを覚える。
 - 実用的なアプリをlispで作るならやっぱClojureだなってことでClojureを覚え始める。←いまここ
#+HTML: </div>

#+end_o_blog_row


  
* Blog details
** Copyright
  :PROPERTIES:
  :SNIPPET:  t
  :END:

Copyright © 2008-2012 [[http://twitter.com/mikio_kun][mikio]]

** About
  :PROPERTIES:
  :SNIPPET:  t
  :END:

[[http://ja.gravatar.com/userimage/34519202/9f2afee0916f884e17ba9de3a4d09e70.jpg]]

#+BEGIN_SRC emacs-lisp
(mikio_kun
 {:興味 "ubuntu/emacs/clojure"
  :一言 "Clojurianになりたい"})
#+END_SRC

** Navigation Footer
  :PROPERTIES:
  :SNIPPET:  t
  :END:

  - [[file:{lisp}(ob:path-to-root){/lisp}/index.html][/icon-home icon-white/ {lisp}(ob:gettext :home){/lisp}]]

  - [[file:{lisp}(let ((POSTS ALL-POSTS)) (format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (car (ob:get-posts (lambda (x) (equal "Tips" (ob:post-category x)))))))){/lisp}][/icon-file icon-white/ Tips]]

  - [[file:{lisp}(ob:path-to-root){/lisp}/tags/index.html][/icon-tags icon-white/ Tags]]

  - [[file:{lisp}(ob:path-to-root){/lisp}/archives.html][/icon-list icon-white/ Archives]]

  - [[file:{lisp}(ob:path-to-root){/lisp}/index.xml][RSS]]

** Navigation
  :PROPERTIES:
  :SNIPPET:  t
  :END:

- [[#][/icon-file icon-white/ 最近の更新]]
  - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Article"%200))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Article" 0)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Article" 1))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Article" 1)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Article" 2))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Article" 2)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Article" 3))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Article" 3)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Article" 4))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Article" 4)){/lisp}]]

- [[file:{lisp}(ob:path-to-root){/lisp}/tags/index.html][/icon-tags icon-white/ Tags]]

- [[file:{lisp}(ob:path-to-root){/lisp}/archives.html][/icon-list icon-white/ Archives]]

- [[file:{lisp}(ob:path-to-root){/lisp}/index.xml][RSS]]




* Article
** DONE Nexus7(2013)にBUNKER RINGを装着する!                        :nexus7:
   CLOSED: [2013-09-23 月 00:57]

主に電子書籍の閲覧に利用していたNexus7ですが、先日新型のNexus7(2013)を購入しました。
正常進化したこのモデル、「これはすごい!」という驚きは少ないですが、サクサク動きますし、画面も綺麗で快適です。
快適さが自然すぎて逆に感動が少ないって感じです。もう旧式には戻れません。

さてタブレットを使っていく上で大抵の人は、なんらかのカバーを装着すると思います。
裸のままだとまず持ちずらいですし、何より落したときの衝撃が怖いですよね。
ただしカバーを装着するとすごくかさばります。もともと薄くて軽いNexus7ですが
重くて厚いカバーなどを装着したらせっかくのスリムな本体が台無しです。

ですからできるだけかさばらずに本体落下のリスクを抑えるアイテムが欲しい。
できることならカバーなしでなんとかしたい。
一見矛盾しているこの欲求を満してくれるのがBUNKER RINGです。
#+HTML: <iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=ocha04-22&o=9&p=8&l=as1&asins=B009GETF2A&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

指輪のようなリングを直接本体に貼り付けて使います。
旧式ではこれを購入して利用していました。

カバーなしなので、落したときの衝撃が怖いのですが
BUNKER RINGのおかげでまず落しませんし、
かさばって毎日いらいらするのに比べたら
このスッキリ感は手放せません。

で、当然Nexus7(2013)でもBUKER RING を同時購入して装着したのですが
これがうまくいかない。

新型は、裏面が旧型に比べてツルツルしていて、一見旧型より吸いつきが良いように見えるのですが、
なぜか簡単にはがれてしまうのです。旧型はそんなことなかったのに!
なので裸運用は諦めて、カバーごしにBUNKER RINGを装着することにしました。

できるだけ薄くて本体デザインに影響がでないやつがいい。
そこでamazonで良さそうなものを物色して手にいれたのがこれ!
#+HTML: <iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=ocha04-22&o=9&p=8&l=as1&asins=B00EYDTQ9A&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

本体に直接貼りつけてたときは、簡単に剥がれてしまったBUNKER RING ですが、
このカバーに対しては、なんども貼り直したにも関わらず、がっちり貼り付きました。
#+ATTR_HTML: :width 30%
[[file:img/nexus7/basic.jpg]]

新型は重量が軽くなったせいか、スタンドとして使っても割と安定しています。
#+ATTR_HTML: :width 30%
[[file:img/nexus7/stand.jpg]]

ぶらぶらさせても全然平気です。
#+ATTR_HTML: :width 30%
[[file:img/nexus7/ring1.jpg]]
#+ATTR_HTML: :width 30%
[[file:img/nexus7/ring2.jpg]]
写真ではぶら下げているだけですが、両手を使ってかなり強く引っ張っても剥れる気がしませんでした。

うすーいカバーですので本体落下の衝撃には全く役立ちませんが、
BUNKER RING を貼り付けるためだけに利用するなら逆にこの薄さは利点になります。
BUNKER RING を貼りつけるのに困っているかたはどうぞ。お勧めです!


** DONE ubuntuでxmonadして、emacsでProcessingしてます :ubuntu:xmonad:processing:emacs:
   CLOSED: [2013-08-07 水 12:56]

最近Processingをいじり始めました。
[[file:img/processing/xmonad.png]]
上の画像は、Ubuntu上のXmonadでemacs使ってProcessingしてるところです。非常に快適です。

ちょろっと作った
#+BEGIN_HTML
<a href="/processings/hello/">テストプログラム</a>
#+END_HTML
Javascriptモードで出力しました。こんなのが簡単に作れます。


日経LinuxでProcessingの連載をしていたので興味があったのですが、きちんと読んでいませんでした(今読みかえしているところです)。
最大のきっかけとなったのは下記の本を手にしたからです。
#+BEGIN_HTML
<a href="http://www.amazon.co.jp/gp/product/4798038644/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798038644&linkCode=as2&tag=ocha04-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4798038644&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=ocha04-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=ocha04-22&l=as2&o=9&a=4798038644" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
#+END_HTML

この本はゲームプログラミングはおろかプログラミングそのものが初めてという人のための本です。
事実、本の帯には「猫でも13歳でもわかる」みたいなことが書いてあります(笑)。
実際本の内容は懇切丁寧に書かれており、猫は無理でも中学生ならゲームが作れそうです。

初心者向けの本とはいえその内容は広範囲で、基本の2Dプログラミング、アイデアの出しかた、
データの作成、Andoroidアプリの公開方法、3Dプログラミング、そしてなんとキネクトプログラミングまでやってます。
自分はプログラミング初心者ではないですが、Processingをざっと勉強したいという経験者にもうってつけだと思います。

特にいいなと思ったのは、プログラマの最大の敵であるゲーム素材のつくり方まで解説してある点です。
プログラマは大抵絵心がなかったりするので、絵や音の素材を用意するのが苦手だと思うのですが、
この本はデータ作成にも多くのページを割いて解説しています。
また、本は分厚いですがそれぞれの章の独立生が割と高いので興味のあるところから読むってのもありかもです。

*** processing のおすすめポイント
**** processingは実はjavaである。
文法はほとんどJavaなので実はしっかりした言語体系です。自分は最初、Processingという独自のスクリプト言語があるものと勘ちがいしていました。
でも実は、Processingという独自の言語があるわけではなく、Java言語をProcessingというIDEを通して簡単に始められるというものでした。
実際Processingでは普通にArrayListが使えますしジェネリクスも使えます。

Processingをイメージで簡単に説明すると、「Processingという巨大なクラスがあって、
このメソッドがグローバルな関数に見立てたAPIとなっていて、PDEという独自IDEによってあたかもグローバル関数や変数を簡単に定義できるようになっている。
PDEのおかげで、javaのパスとかメインクラスの作成とか面倒なことを考えずすぐに再生ボタンで実行できる環境」ってことになります (間違ってたらすみません)。
なのでJavaを実際に始める前にProcessingから入るというのは非常に有効な手段かと思います。

**** インストールが超簡単。
ダウンロードして展開するだけです。Java実行環境は同梱されてるので別途インストールする必要がありません。

**** 複数のプラットホームに対応している。
作ったプログラムは、Linux, Mac, Windows向けにエクスポートできます。
出力されたものにJava実行環境も含まれているので配布先に別途Javaをインストールしてもらう必要もありません。

**** HTMLモード、androidモードがある。
昔のver1.5のころは、エクスポート方法としてアプレットがあったのですが、これはjavascriptに置きかわりました。
JavaAppletはいろいろ問題があるのでこの変更は嬉しいですね。
AndroidのエクスポートもSDKを別途ダウンロードする必要はあるものの非常に簡単にAndroidでプログラムを動かせます。

結局、サポートプラットホームは、Linux、Mac、Windwos、Android、そしてJavascriptになります
(ただし最近のゲームライブラリはどれもこの辺サポートしてるのでアピールポイントにはなりにくくなってますね)。
問題は各モードでどこまで差異なく実行できるかですが、この辺はまだ検証できてません。 でも活動が活発なので期待です。
*** emacsでprocessing
emacsからもProcessingを使えます。下記を参考にしました。
- http://hoshi-sano.hatenablog.com/entry/2013/08/03/121526
 
MELPAに登録されているのでインスールも簡単です。 =C-c C-p C-r= で実行できますし、
エラーがあれば =M-g M-n= で簡単ジャンプできます。あとは javascript モードも対応してくれるといいな。

*** xmonadでprocessing
最後にXmonadでProcessingする方法を書いておきます。

Xmonad上では、JavaのSwingがまともに動かないみたいなので、
Processingするにはxmonadの設定ファイルを修正する必要があります。

 =~/.xmonad/xmonad.hs= ファイルのlogHookを下記のように =XMonad.Hooks.ICCCMFocus= をインポートして、
 logHook の右辺を =takeTopFocus= に置き換えます。
#+BEGIN_SRC sh
import XMonad.Hooks.ICCCMFocus
 :
main = do
 :
xmonad $ defaultConfig 
 :
  , logHook = takeTopFocus
 :
#+END_SRC
意味はわかってません。。。下記のURLを参考にしました。
- http://www.willprice.org/about.html


** DONE ubuntuでprocessingのショートカットをつくる        :ubuntu:processing:
   CLOSED: [2013-08-05 月 08:29]

Ubuntuは、普段はXmonadを使ってるのですが、たまにうまく動かないアプリがあります。
ProcessingもXmonad上ではうまく動かなかったので、とりあえずUnityのUbuntuで動かしてるのですが、
Ubuntu版のProcessingはシェルスクリプトで起動するので、そのままではランチャーに登録できません。
下記のような*.desktopファイルを作成するとダブルクリッックで起動でき、かつランチャーに登録できるようになります。
#+BEGIN_SRC sh
[Desktop Entry]
Type=Application
Name=Processing
GenericName=PDE
Icon=/home/mikio/opt/processing-2.0.1/lib/icons/pde-48.png
Exec=/usr/bin/sh /home/mikio/opt/processing-2.0.1/processing
Terminal=false
#+END_SRC

** DONE ブラウザ比較
   CLOSED: [2013-05-23 木 08:14]

最近はChromeを使っている。

emacs-w3mをメインにしつつ、必要に応じてChromeという使いかた。
(Chromeのキーバインドは、Vimiumを使用してViキーバインドにしている)

タブの操作やURLの編集操作にはWindows標準のキーバインドを使用し、
移動系の操作のみ =hjkl, C-f, C-b= あたりを使用している。
というか、Chromeはキーバインドを変更するための制限が厳しいので
Firefoxのように細部まで再現できない。

最初はそれが不便に感じたが、今は逆にそれが良いことだと感じている。
というのも、Firefoxの頃は、再現性が高いだけに細かの部分で操作ミスを良くしてしまうのだが、
Chromeの場合はWiwndowsキーバインドメインにしているので頭を切り替えやすいという利点がある。
また、Firefoxだと快適すぎるがゆえにw3m-emacsとの使い分けがあいまいになってしまう。
(そこまでしてなぜw3m-emacs使うの馬鹿？って感じだが)。

でもいつも気づくとfirefoxに戻っているんですがね。。。

*** Chorme
- ○：なんだかんだで描画が速い。
- ○：Blinkには期待できる。ソースがスリムになりバグが減るかも。
- ○：モバイル系のサイトで特に表示崩れが少ない。
- ○：WebGL対応のゲーム系アプリが多い。
- ×：chromeはたまに表示が極端に重くなったり、スクロールできなくなったり、ページがフリーズすることがある。
- ×：クッキーが発行されなくなったり、削除できなくなったりする。
 - edit this cookieの不具合っぽかった。
- ×：キーボードショートカットが効かないところが多い。(アドレスバー、新規タブ画面など)
- ×：ipアドレスの表示がキャッシュされて古いことがある。
- ×：proxyの切りかえがいまいち。
- ×：全般的になんでもできるfirefoxに比べると拡張のできが今いち。
- ×：XPだとSKK系のIMEがなぜかうまく使用できない。
- ×：android版の出来が今いち。
- ×：vimperetor系の拡張も、結局ChormeAPIの制限のせいで今イチ。
 - →hjklなどの移動以外は、もともとのショートカットを多様するほうが混乱しなくてすむ。
- ×：MacTypeなどアンチエイリアス系ソフトを使用していると度々描画関連の不具合が発生する
- ×：XMLの表示が

*** Firefox 
- ○：keysnail,vimperetorなど拡張のできが最強。
- ○：他にはNESなどのスーファミエミュが、そのままブラウザ上で走ったりする。
- ○：emacsとの連携(Mozilla REPLなどあり)が強力。 
- ×：ひとつのタブがフリーズすると、他のタブも影響をうける。
- ×：アカウントの同期管理が煩雑。
- ×：Sumsngと提携に不安が。。。
- ×：Android版、UIのできはいいが、表示崩れするサイトが多い
- ×：PC版でもgithubをはじめ、ブラウザテストがおざなりになりつつある。
- ×：keysnaliを使ったときに、M-wでコピーしないと、クリップボードを共有できいないことがある。
- ×：タブの切り替えが重くなることがある。
- ×：たま起動せずにプロセスが残ることがある。
- ○：なんだかんだでやっぱりfirefoxが一番快適。

*** ブラウザ比較表
|                   | GC | FF | OP |
| Android表示崩れ   | ◎ | × | ○ |
| viキーバインド    | ◎ | ◎ | △ |
| emacsキーバインド | ◎ | ◎ | △ |
| 拡張同期          | ◎ | △ | × |
| タブ同期          | ○ | △ | ○ |
| ブクマ同期        | ○ | △ | ○ |
| パスワード同期    | ○ | △ | ○ |

凡例
| GC | GoogleChrome |
| FF | Fireofx      |
| OP | Opera        |
| ◎ | 非常に快適   |
| ○ | 快適         |
| △ | 不満あり     |
| × | 実現不能     |

** DONE cygwinでnamazu                                        :cygwin:namazu:
   CLOSED: [2013-05-23 木 08:10]
   
gnusのメールで全文検索をしたいと思って導入。
namazu自体は導入できたが、下記の理由で全文検索はできなかった。
- gnusではメールのバックエンドとしてnnfolderを利用しているが、これがnamazuで未対応っぽい。
- namazuはEUC-JPに対応している？もしかしたらUTF-8にする方法もありそうだが面倒なので断念。

namazu以外で全文検索するならHyper Estraierが使えそうだけど、
これをwindowsでやるには結構しんどそうなのであきらめる。

以降、備忘録として残しておく。

*** 準備
予めnkfとiconvを入れておく必要がある。
nkfはcygwin導入時に入れておいたのでiconvlibをインストールする。
#+BEGIN_SRC sh
apt-cyg find libiconv
apt-cyg install libiconv
#+END_SRC

*** kakasi
まずkakasiをインストールする。
#+BEGIN_SRC sh
cd src
wget http://kakasi.namazu.org/stable/kakasi-2.3.4.tar.gz
tar xvfz kakasi-2.3.4.tar.gz
cd kakasi-2.3.4
./configure
make
make install
#+END_SRC

確認
#+BEGIN_SRC sh
$ kakasi -v
KAKASI - Kanji Kana Simple Inverter  Version 2.3.4
Copyright (C) 1992-1999 Hironobu Takahashi. All rights reserved.

Usage: kakasi -a[jE] -j[aE] -g[ajE] -k[ajKH] -E[aj] -K[ajkH] -H[ajkK] -J[ajkKH]
              -i{oldjis,newjis,dec,euc,sjis} -o{oldjis,newjis,dec,euc,sjis}
              -r{hepburn,kunrei} -p -s -f -c"chars"  [jisyo1, jisyo2,,,]

      Character Sets:
       a: ascii  j: jisroman  g: graphic  k: kana (j,k     defined in jisx0201)
       E: kigou  K: katakana  H: hiragana J: kanji(E,K,H,J defined in jisx0208)

      Options:
      -i: input coding system    -o: output coding system
      -r: romaji conversion system
      -p: list all readings (with -J option)
      -s: insert separate characters (with -J option)
      -f: furigana mode (with -J option)
      -c: skip chars within jukugo (with -J option: default TAB CR LF BLANK)
      -C: romaji Capitalize (with -Ja or -Jj option)
      -U: romaji Upcase     (with -Ja or -Jj option)
      -u: call fflush() after 1 character output
      -w: wakatigaki mode

Report bugs to <bug-kakasi@namazu.org>.
#+END_SRC

*** namazuインストール
#+BEGIN_SRC sh
wget http://www.namazu.org/stable/namazu-2.0.21.tar.gz
tar xvfz namazu-2.0.21.tar.gz
cd namazu-2.0.21
./configure
#+END_SRC

多分File-MMagicがないと怒られるので同梱のFile-MMagicをインストールする。
#+BEGIN_SRC sh
cd File-MMagic/
perl Makefile.pl
make
make install
#+END_SRC
そしてもう一度 =./configure= する。
#+BEGIN_SRC
cd ..
./configure
#+END_SRC

問題なければ普通にインストール
#+BEGIN_SRC sh
make
make install
#+END_SRC
確認。
#+BEGIN_SRC sh
$ namazu -v
namazu of Namazu 2.0.21
Copyright (C) 1997-1999 Satoru Takabayashi All rights reserved.
Copyright (C) 2000-2011 Namazu Project All rights reserved.
This is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
#+END_SRC


*** emacsの設定
netの情報だとgnus-namazu.elを使用するとあるが、
実際にはこのelispはもう存在しないっぽい。

最新のgnusではnnirといういろんな検索エンジンに共通のIFで
対応するelisp(nnir)があり、この設定をする必要がある。

- http://www.gnu.org/software/emacs/manual/html_node/gnus/The-namazu-Engine.html#The-namazu-Engine

この設定は、まだ調査中。

** DONE clj-webdriverを使用としたらなぜか例外発生            :hamari:clojure:
   CLOSED: [2013-05-23 木 08:15]

ふたつのライブラリがあったとして、その2つが依存してる同じライブラリを使用していて、
にもかかわらずバージョンがそれぞれ違う場合うまく動かないよって話。

依存関係はこんな感じだった。
#+BEGIN_EXAMPLE
  xml-apis(1.0.2)
    +--poi-ooxml

  xml-apis(1.4.01)
    +-- clj-webdriver
#+END_EXAMPLE

以下、経過のメモ。

*** classpathから古いxml-apisを外してみる。
やはりpoiのライブラリを使用するとうまくいかない。
project.cljをみると
#+BEGIN_SRC sh
[org.apache.poi/poi-ooxml "3.9"]
#+END_SRC
とう記述がある。これはMicrosoftOfficeのOpenXMLを扱うライブラリらしい。
ということはこいつがxmlまわりのライブラリを使用していて
そのライブラリがseleniumと衝突してるのが原因かな？
ということで、poi-ooxmlの指定からxml-apisを外してみることにした。
#+BEGIN_SRC clojure
[org.apache.poi/poi-ooxml "3.9"
  :exclusions [xml-apis/xml-apis]]
#+END_SRC
これでclasspathを確認してみると、見事にxml-apis1.0.2が外れた。                 
#+BEGIN_SRC sh
$ lein classpath
C:\Users\mikio\dev\ocnwebtest\test;
C:\Users\mikio\dev\ocnwebtest\src;
C:\Users\mikio\dev\ocnwebtest\dev-resources;
C:\Users\mikio\dev\ocnwebtest\resources;
C:\Users\mikio\dev\ocnwebtest\target\classes;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-iphone-driver\2.31.0\selenium-iphone-driver-2.31.0.jar;
C:\Users\mikio\.m2\repository\org\eclipse\jetty\jetty-websocket\8.1.7.v20120910\jetty-websocket-8.1.7.v20120910.jar;
C:\Users\mikio\.m2\repository\org\tcrawley\dynapath\0.2.1\dynapath-0.2.1.jar;
C:\Users\mikio\.m2\repository\xalan\serializer\2.7.1\serializer-2.7.1.jar;
C:\Users\mikio\.m2\repository\org\codehaus\jackson\jackson-smile\1.9.4\jackson-smile-1.9.4.jar;
C:\Users\mikio\.m2\repository\org\json\json\20080701\json-20080701.jar;
C:\Users\mikio\.m2\repository\org\w3c\css\sac\1.3\sac-1.3.jar;
C:\Users\mikio\.m2\repository\org\apache\poi\poi-ooxml\3.9\poi-ooxml-3.9.jar;
C:\Users\mikio\.m2\repository\ritz\ritz-nrepl-middleware\0.7.0\ritz-nrepl-middleware-0.7.0.jar;
C:\Users\mikio\.m2\repository\net\sourceforge\cssparser\cssparser\0.9.8\cssparser-0.9.8.jar;
C:\Users\mikio\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar;
C:\Users\mikio\.m2\repository\net\sourceforge\htmlunit\htmlunit-core-js\2.11\htmlunit-core-js-2.11.jar;
C:\Users\mikio\.m2\repository\commons-collections\commons-collections\3.2.1\commons-collections-3.2.1.jar;
C:\Users\mikio\.m2\repository\xml-apis\xml-apis\1.4.01\xml-apis-1.4.01.jar;
C:\Users\mikio\.m2\repository\net\sourceforge\nekohtml\nekohtml\1.9.17\nekohtml-1.9.17.jar;
C:\Users\mikio\.m2\repository\org\mortbay\jetty\jetty\6.1.25\jetty-6.1.25.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-api\2.31.0\selenium-api-2.31.0.jar;
C:\Users\mikio\.m2\repository\org\webbitserver\webbit\0.4.14\webbit-0.4.14.jar;
C:\Users\mikio\.m2\repository\net\java\dev\jna\jna\3.4.0\jna-3.4.0.jar;
C:\Users\mikio\.m2\repository\org\bouncycastle\bcprov-jdk15on\1.48\bcprov-jdk15on-1.48.jar;
C:\Users\mikio\.m2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar;
C:\Users\mikio\.m2\repository\org\bouncycastle\bcpkix-jdk15on\1.48\bcpkix-jdk15on-1.48.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-chrome-driver\2.31.0\selenium-chrome-driver-2.31.0.jar;
C:\Users\mikio\.m2\repository\org\apache\poi\poi\3.9\poi-3.9.jar;
C:\Users\mikio\.m2\repository\org\apache\httpcomponents\httpclient\4.2.1\httpclient-4.2.1.jar;
C:\Users\mikio\.m2\repository\xerces\xercesImpl\2.10.0\xercesImpl-2.10.0.jar;
C:\Users\mikio\.m2\repository\org\mortbay\jetty\servlet-api-2.5\6.1.9\servlet-api-2.5-6.1.9.jar;
C:\Users\mikio\.m2\repository\cheshire\cheshire\2.1.0\cheshire-2.1.0.jar;
C:\Users\mikio\.m2\repository\commons-logging\commons-logging\1.1.1\commons-logging-1.1.1.jar;
C:\Users\mikio\.m2\repository\org\apache\httpcomponents\httpcore\4.2.1\httpcore-4.2.1.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-java\2.31.0\selenium-java-2.31.0.jar;
C:\Users\mikio\.m2\repository\commons-io\commons-io\2.1\commons-io-2.1.jar;
C:\Users\mikio\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;
C:\Users\mikio\.m2\repository\mx4j\mx4j-tools\3.0.1\mx4j-tools-3.0.1.jar;
C:\Users\mikio\.m2\repository\slingshot\slingshot\0.10.1\slingshot-0.10.1.jar;
C:\Users\mikio\.m2\repository\org\clojure\tools.nrepl\0.2.1\tools.nrepl-0.2.1.jar;
C:\Users\mikio\.m2\repository\net\java\dev\jna\platform\3.4.0\platform-3.4.0.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-htmlunit-driver\2.31.0\selenium-htmlunit-driver-2.31.0.jar;
C:\Users\mikio\.m2\repository\org\clojure\tools.logging\0.2.3\tools.logging-0.2.3.jar;
C:\Users\mikio\.m2\repository\org\mortbay\jetty\jetty-util\6.1.25\jetty-util-6.1.25.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-support\2.31.0\selenium-support-2.31.0.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-ie-driver\2.31.0\selenium-ie-driver-2.31.0.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-android-driver\2.31.0\selenium-android-driver-2.31.0.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-remote-driver\2.31.0\selenium-remote-driver-2.31.0.jar;
C:\Users\mikio\.m2\repository\org\mortbay\jetty\servlet-api\2.5-20081211\servlet-api-2.5-20081211.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-safari-driver\2.31.0\selenium-safari-driver-2.31.0.jar;
C:\Users\mikio\.m2\repository\cglib\cglib-nodep\2.1_3\cglib-nodep-2.1_3.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-server\2.31.0\selenium-server-2.31.0.jar;
C:\Users\mikio\.m2\repository\xalan\xalan\2.7.1\xalan-2.7.1.jar;
C:\Users\mikio\.m2\repository\org\apache\commons\commons-lang3\3.1\commons-lang3-3.1.jar;
C:\Users\mikio\.m2\repository\org\clojure\clojure\1.5.1\clojure-1.5.1.jar;
C:\Users\mikio\.m2\repository\net\sourceforge\htmlunit\htmlunit\2.11\htmlunit-2.11.jar;
C:\Users\mikio\.m2\repository\clj-http\clj-http\0.3.0\clj-http-0.3.0.jar;
C:\Users\mikio\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5.jar;
C:\Users\mikio\.m2\repository\org\apache\poi\poi-ooxml-schemas\3.9\poi-ooxml-schemas-3.9.jar;
C:\Users\mikio\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.4\jackson-core-asl-1.9.4.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\selenium-firefox-driver\2.31.0\selenium-firefox-driver-2.31.0.jar;
C:\Users\mikio\.m2\repository\org\yaml\snakeyaml\1.8\snakeyaml-1.8.jar;
C:\Users\mikio\.m2\repository\org\eclipse\jetty\jetty-http\8.1.7.v20120910\jetty-http-8.1.7.v20120910.jar;
C:\Users\mikio\.m2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar;
C:\Users\mikio\.m2\repository\org\eclipse\jetty\jetty-util\8.1.7.v20120910\jetty-util-8.1.7.v20120910.jar;
C:\Users\mikio\.m2\repository\org\seleniumhq\selenium\jetty-repacked\7.6.1\jetty-repacked-7.6.1.jar;
C:\Users\mikio\.m2\repository\org\apache\httpcomponents\httpmime\4.2.2\httpmime-4.2.2.jar;
C:\Users\mikio\.m2\repository\clj-webdriver\clj-webdriver\0.6.0\clj-webdriver-0.6.0.jar;
C:\Users\mikio\.m2\repository\org\eclipse\jetty\jetty-io\8.1.7.v20120910\jetty-io-8.1.7.v20120910.jar;
C:\Users\mikio\.m2\repository\org\clojure\core.cache\0.5.0\core.cache-0.5.0.jar;
C:\Users\mikio\.m2\repository\io\netty\netty\3.5.2.Final\netty-3.5.2.Final.jar;
C:\Users\mikio\.m2\repository\com\google\guava\guava\14.0\guava-14.0.jar;
C:\Users\mikio\.m2\repository\org\apache\commons\commons-exec\1.1\commons-exec-1.1.jar;
C:\Users\mikio\.m2\repository\ritz\ritz-repl-utils\0.7.0\ritz-repl-utils-0.7.0.jar;
C:\Users\mikio\.m2\repository\clojure-complete\clojure-complete\0.2.3\clojure-complete-0.2.3.jar;
C:\Users\mikio\.m2\repository\org\codehaus\jackson\jackson-smile\1.9.4\jackson-smile-1.9.4-sources.jar;
C:\Users\mikio\.m2\repository\org\json\json\20080701\json-20080701-sources.jar;
C:\Users\mikio\.m2\repository\org\w3c\css\sac\1.3\sac-1.3-sources.jar;
C:\Users\mikio\.m2\repository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0-sources.jar;
C:\Users\mikio\.m2\repository\commons-collections\commons-collections\3.2.1\commons-collections-3.2.1-sources.jar;
C:\Users\mikio\.m2\repository\org\mortbay\jetty\jetty\6.1.25\jetty-6.1.25-sources.jar;
C:\Users\mikio\.m2\repository\net\java\dev\jna\jna\3.4.0\jna-3.4.0-sources.jar;
C:\Users\mikio\.m2\repository\org\mortbay\jetty\servlet-api-2.5\6.1.9\servlet-api-2.5-6.1.9-sources.jar;
C:\Users\mikio\.m2\repository\commons-logging\commons-logging\1.1.1\commons-logging-1.1.1-sources.jar;
C:\Users\mikio\.m2\repository\commons-io\commons-io\2.1\commons-io-2.1-sources.jar;
C:\Users\mikio\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1-sources.jar;
C:\Users\mikio\.m2\repository\mx4j\mx4j-tools\3.0.1\mx4j-tools-3.0.1-sources.jar;
C:\Users\mikio\.m2\repository\net\java\dev\jna\platform\3.4.0\platform-3.4.0-sources.jar;
C:\Users\mikio\.m2\repository\org\clojure\tools.logging\0.2.3\tools.logging-0.2.3-sources.jar;
C:\Users\mikio\.m2\repository\org\mortbay\jetty\jetty-util\6.1.25\jetty-util-6.1.25-sources.jar;
C:\Users\mikio\.m2\repository\org\mortbay\jetty\servlet-api\2.5-20081211\servlet-api-2.5-20081211-sources.jar;
C:\Users\mikio\.m2\repository\cglib\cglib-nodep\2.1_3\cglib-nodep-2.1_3-sources.jar;
C:\Users\mikio\.m2\repository\xalan\xalan\2.7.1\xalan-2.7.1-sources.jar;
C:\Users\mikio\.m2\repository\org\clojure\clojure\1.5.1\clojure-1.5.1-sources.jar;
C:\Users\mikio\.m2\repository\commons-codec\commons-codec\1.5\commons-codec-1.5-sources.jar;
C:\Users\mikio\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.4\jackson-core-asl-1.9.4-sources.jar;
C:\Users\mikio\.m2\repository\org\yaml\snakeyaml\1.8\snakeyaml-1.8-sources.jar;
C:\Users\mikio\.m2\repository\org\clojure\core.cache\0.5.0\core.cache-0.5.0-sources.jar;
C:\Users\mikio\.m2\repository\org\apache\commons\commons-exec\1.1\commons-exec-1.1-sources.jar;
C:\Program Files\Java\jdk1.7.0_13\lib\tools.jar;
C:\Program Files\Java\jdk1.7.0_13\lib\sa-jdi.jar

#+END_SRC

読みこんでみる。
#+BEGIN_SRC clojure
user> (use 'ocnwebtest.core)
nil
#+END_SRC
トオッター
そしてやっと動いた。!

** DONE javaのクラスローダについて                                     :java:
   CLOSED: [2013-05-10 金 23:13]

#+BEGIN_EXAMPLE
ブートストラップ クラスローダ(java.lang系)
  + 拡張クラスローダ(JDK拡張ディレクトリ(JAVA_HOME/jre/lib/ext)からロード)
    + システムクラスパスクラスローダ(CLASSPATHからロード)
      + サーブレットコンテンナなど(Tomcat,Resin)のクラスローダ
        + WEB-INF毎のクラスローダ
#+END_EXAMPLE

- クラスローダとは *.class ファイルを読み込むクラス
- クラス定義が初めて必要になったタイミングで、クラスローダがクラスを検索する。
- まず、自分を検索する前に親へ検索を移譲することに注意。
- 親へ移譲して、結果がなかったら初めて自分の管理するクラスパスを検索する。
- 見つからなかったら、例外をスローする。

*** NoCloassDefFoundError
メソッド呼び出やnewなどのインスタンス生成で、クラス定義が見からない場合にスローされる。
コンパイル時にソースはあったが、いざ実行使用としたら、.classファイルがない場合などに発生する。

*** ClassNotFoundException
Class.foNameなどでクラスの文字列名を使用してクラス定義をロードしようとしたが、
クラス定義が見つからなかった場合にスローされる。
 - Class クラスの forName メソッド
 - ClassLoader クラスの findSystemClass メソッド
 - ClassLoader クラスの loadClass メソッド 

** DONE jdee C-c C-v C-b してantができない                      :jdee:hamari:
   CLOSED: [2013-05-10 金 23:13]

下記のメッセージが表示される。
#+BEGIN_SRC sh
cd: No such directory found via CDPATH environment variable
#+END_SRC
下記のように、jde-ant-working-directoryに値を設定したらうまく行った。
#+BEGIN_SRC emacs-lisp
-'(jde-ant-working-directory "./")
+'(jde-ant-working-directory (expand-file-name "~/dev/hoge/"))
#+END_SRC
絶対パスを指定する必要があるのかな？

** DONE Twittering-mode が起動しない                           :emacs:hamari:
   CLOSED: [2013-05-04 土 06:21]
Windows版のemacsでTwittering-modeを起動させようと =M-x twit= したら下記のエラー。
#+BEGIN_SRC sh
You need GnuPG and (EasyPG or alpaca.el) for master password!
#+END_SRC
cygwingでGnuPGをインストールしたら解消した。
#+BEGIN_SRC
$ apt-cyg install gnupg
#+END_SRC

** DONE Windowsでmisakiのデモが動かない                       :misaki:hamari:
   CLOSED: [2013-05-04 土 05:40]

Clojureで書かれたブログジェネレータの [[https://github.com/liquidz/misaki][misaki]] ですが、そのままではWindows上ではサンプルが動作しません。
#+BEGIN_SRC sh
C:\Users\miki\dev\misaki>lein run samples/blog
 * Compiling [1mall templates[22m
 * Compiling [1matom.xml.clj[22m

[4mjava.io.FileNotFoundException: samples\blog\public\samples\blog\template\ato
m.xml (?w?????p?X?????????????B)[24m
   at misaki.util.file$write_file / [1minvoke[22m ([31mfile.clj[0m:[31m[1m
152[22m[0m)
   at misaki.compiler.default.core$compile_STAR_ / [1minvoke[22m ([31mcore.cl
j[0m:[31m[1m237[22m[0m)
   at misaki.compiler.default.core$compile_template / [1minvoke[22m ([31mcore
.clj[0m:[31m[1m256[22m[0m)
   at misaki.compiler.default.core$_compile$fn__1874 / [1minvoke[22m ([31mcor
e.clj[0m:[31m[1m70[22m[0m)
   at misaki.compiler.default.core$_compile / [1minvoke[22m ([31mcore.clj[0m
:[31m[1m58[22m[0m)
   at misaki.core$call_compiler_fn / [1mdoInvoke[22m ([31mcore.clj[0m:[31m
[1m55[22m[0m)
   at misaki.core$compile_STAR_$fn__1112 / [1minvoke[22m ([31mcore.clj[0m:[
31m[1m160[22m[0m)
   at misaki.util.sequence$some_with_default_value / [1minvoke[22m ([31mseque
nce.clj[0m:[31m[1m44[22m[0m)
   at misaki.core$compile_STAR_ / [1minvoke[22m ([31mcore.clj[0m:[31m[1m16
7[22m[0m)
   at misaki.core$call_all_compile / [1minvoke[22m ([31mcore.clj[0m:[31m[1
m185[22m[0m)
   at misaki.server$do_all_compile / [1minvoke[22m ([31mserver.clj[0m:[31m
[1m52[22m[0m)
   at misaki.server$_main / [1mdoInvoke[22m ([31mserver.clj[0m:[31m[1m91[
22m[0m)
   [31mFAIL in 0.500 sec[0m
 * Finish Compiling
 * starting server:  [36mhttp://localhost:8080/[0m
2013-05-04 01:01:50.673:INFO:oejs.Server:jetty-7.6.1.v20120215
2013-05-04 01:01:53.766:INFO:oejs.AbstractConnector:Started SelectChannelConnect
or@0.0.0.0:8080
#+END_SRC

Cygwinで動作させても同様です
(ただし、Windows版のOracleJavaなのでOpenJDKをCygwin上で動かせばもしかしたら動くかもです)。

#+BEGIN_SRC sh
miki@miki-PC ~/dev/misaki
$ lein-cyg run samples/blog
 * Compiling all templates
 * Compiling atom.xml.clj

java.io.FileNotFoundException: samples\blog\public\samples\blog\template\atom.xml (指定されたパスが見つかりません。)
   at misaki.util.file$write_file / invoke (file.clj:152)
   at misaki.compiler.default.core$compile_STAR_ / invoke (core.clj:237)
   at misaki.compiler.default.core$compile_template / invoke (core.clj:256)
   at misaki.compiler.default.core$_compile$fn__1874 / invoke (core.clj:70)
   at misaki.compiler.default.core$_compile / invoke (core.clj:58)
   at misaki.core$call_compiler_fn / doInvoke (core.clj:55)
   at misaki.core$compile_STAR_$fn__1112 / invoke (core.clj:160)
   at misaki.util.sequence$some_with_default_value / invoke (sequence.clj:44)
   at misaki.core$compile_STAR_ / invoke (core.clj:167)
   at misaki.core$call_all_compile / invoke (core.clj:185)
   at misaki.server$do_all_compile / invoke (server.clj:52)
   at misaki.server$_main / doInvoke (server.clj:91)
   FAIL in 0.300 sec
 * Finish Compiling
 * starting server:  http://localhost:8080/
2013-05-04 01:17:16.365:INFO:oejs.Server:jetty-7.6.1.v20120215
2013-05-04 01:17:16.411:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
#+END_SRC

付焼き刃な対処ですが、下記の修正でひとまず動作します。

#+BEGIN_SRC sh
$ git diff
diff --git a/src/misaki/config.clj b/src/misaki/config.clj
index 9d4b69e..7dcd9c7 100644
--- a/src/misaki/config.clj
+++ b/src/misaki/config.clj
@@ -137,7 +137,7 @@
   "Check whether file is post file or not."
   [#^File file]
   {:pre [(file? file)]}
-  (and (:post-dir *config*) (str-contains? (.getAbsolutePath file)
+  (and (:post-dir *config*) (str-contains? (str/replace (.getAbsolutePath file) #"\\" "/")
                                            (:post-dir *config*))))

 ; =index-file?
@@ -209,7 +209,7 @@
 (defn- make-regular-output-filename
   "Make regular output filename from java.io.File."
   [#^File file]
-  (let [path (.getPath file)
+  (let [path (str/replace (.getPath file) #"\\" "/")
         len  (count (:template-dir *config*))]
     (if (.startsWith path (:template-dir *config*))
       (.substring path len)
#+END_SRC

JavaはWrite Once Run Anywhereを謳ってはいるものの、
このようにパスまわりのトラブルが結構あっていつも悩まさせてくれます。。。
この問題は結構影響範囲が大きそうなので、修正される可能性は低いかもしれません。

本当はこの不具合は結構前に気づいていたのですが、
PullRequestの方法を良く知らないのと、
もうちょっと内容を調査したり整理してからのほうがいいかなと思っていたら
[[https://github.com/liquidz/misaki/issues/37][Issue]] に登録されていたのでブログでまとめてみた次第です。


*** 動作環境
OS
#+BEGIN_SRC sh
Windows 7 Professional 64bit
#+END_SRC

Java
#+BEGIN_SRC sh
C:\Users\miki\dev\misaki>java -version
java version "1.7.0_09"
Java(TM) SE Runtime Environment (build 1.7.0_09-b05)
Java HotSpot(TM) 64-Bit Server VM (build 23.5-b02, mixed mode)
#+END_SRC
  
leiningen
#+BEGIN_SRC sh
C:\Users\miki\dev\misaki>lein -v
Leiningen 2.1.3 on Java 1.7.0_09 Java HotSpot(TM) 64-Bit Server VM
#+END_SRC

** DONE windows版emacs24.3で画像を表示する。                          :emacs:
   CLOSED: [2013-05-03 金 11:16]

Windows版Emacsにおいて、image-diredなどで画像が表示されない場合、下記の方法で表示できる。
-  =F1 v dynamic-library-alist= で必要なdllを調べる。
- 表示されたdllをググッてダウンロードする。
- PATHの通った場所へdllを置く。

自分の場合pngが表示されなかったので
-  =libpng14-14.dll= が表示されたのでこれをググり、下記サイトからダウンロードした。
 - http://www.gtk.org/download/win32.php
- emacsを再起動後、 =zlib1.dll= がないと怒られたので、これもダウンロードして配置。
- emacsを再起動し、 =M-x image-dired= でpng画像を開いたところ無事表示できた。
あとはgifやjpegあたりも同様の手順で準備すればとりあえず困らないだろう。

emacs(Windows版)で画像を表示している様子
[[file:img/image-dired/image-dired.png]]

w3mでakb48を検索してみた。
[[file:img/image-dired/w3m.png]]

*** 参考
- http://qiita.com/items/dc621c568a294004f5a2
- http://stackoverflow.com/questions/2650041/emacs-under-windows-and-png-files

** DONE emacs24.3 on cygwin                                    :cygwin:emacs:
   CLOSED: [2013-05-03 金 08:32]

cygwinも24.3にupdateさせた。

まず準備する。
#+BEGIN_SRC sh
apt-cyg remove emacs
apt-cyg install libncurses-devel
#+END_SRC
あとは普通にインストール。cygwin上でのコンパイルは異常に時間が掛かるので気長に待ちましょう。
#+BEGIN_SRC sh
mkdir ~/src
cd ~/src
wget http://core.ring.gr.jp/pub/GNU/emacs/emacs-24.3.tar.gz
tar xvfz emacs-24.3.tar.gz
cd emacs-24.3
./configure
make bootstrap
make install
#+END_SRC
** DONE windowsXPでclojureが起動しない                               :hamari:
   CLOSED: [2013-05-03 金 08:35]

*** 症状
windows環境で、replが起動できない。
*** 結論
 =~/.lein/profiles.clj= に =file.separator=/= してたのが原因。
このせいで、clojureへのクラスパスが通っていなかった。
散々苦労した末がこんなオチとは。。。
多分ritzを動かそうといろいろ試行錯誤した際、もとに戻すのを忘れていたんだろうと思う。
#+BEGIN_SRC clojure
  :jvm-opts [
            "-Duser.language=en"
            ;;"-Dfile.separator=/"
            "-Duser.home=c:\\Users\\mikio"
             ]
#+END_SRC
*** 経過
#+BEGIN_SRC sh
C:\Documents and Settings\mikio>cd dev/sample

C:\Documents and Settings\mikio\dev\sample>lein repl
Error: Could not find or load main class clojure.main
Exception in thread "Thread-1" clojure.lang.ExceptionInfo: Subprocess failed {:e
xit-code 1}
        at clojure.core$ex_info.invoke(core.clj:4327)
        at leiningen.core.eval$fn__2654.invoke(eval.clj:213)
        at clojure.lang.MultiFn.invoke(MultiFn.java:231)
        at leiningen.core.eval$eval_in_project.invoke(eval.clj:283)
        at leiningen.repl$start_server.invoke(repl.clj:117)
        at leiningen.repl$server$fn__6110.invoke(repl.clj:173)
        at clojure.lang.AFn.applyToHelper(AFn.java:159)
        at clojure.lang.AFn.applyTo(AFn.java:151)
        at clojure.core$apply.invoke(core.clj:617)
        at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1788)
        at clojure.lang.RestFn.invoke(RestFn.java:425)
        at clojure.lang.AFn.applyToHelper(AFn.java:163)
        at clojure.lang.RestFn.applyTo(RestFn.java:132)
        at clojure.core$apply.invoke(core.clj:621)
        at clojure.core$bound_fn_STAR_$fn__4102.doInvoke(core.clj:1810)
        at clojure.lang.RestFn.invoke(RestFn.java:397)
        at clojure.lang.AFn.run(AFn.java:24)
        at java.lang.Thread.run(Thread.java:722)
#+END_SRC

classpathを確認してみる。
#+BEGIN_SRC sh
C:\Documents and Settings\mikio\dev\sample\test;C:\Documents and Settings\m-oon
o\dev\sample\src;C:\Documents and Settings\mikio\dev\sample\dev-resources;C:\Do
cuments and Settings\mikio\dev\sample\resources;C:\Documents and Settings\m-oon
o\dev\sample\target\classes;C:\Documents and Settings\mikio\.m2\repository\org\
clojure\clojure\1.5.1\clojure-1.5.1.jar
#+END_SRC
clojure-1.5.1.jarへパスが空白を含むものになっているのが怪しい。

試しにlein経由ではなく、直接起動してみた。
#+BEGIN_SRC sh
C:\Documents and Settings\mikio>java -cp C:\Documents and Settings\mikio\.m2\r
epository\org\clojure\clojure\1.4.0\clojure-1.4.0.jar clojure.main
エラー: メイン・クラスandが見つからなかったかロードできませんでした
#+END_SRC
メッセージが日本語だけど内容は同じだ!
クラスパスをダブルクオーテーションで囲ってみた。
#+BEGIN_SRC sh
C:\Documents and Settings\mikio>java -cp "C:\Documents and Settings\mikio\.m2\
repository\org\clojure\clojure\1.4.0\clojure-1.4.0.jar" clojure.main
Clojure 1.4.0
user=>
#+END_SRC
ビンゴ!ってことは、パスに空白があるから駄目だったんだ。
今までは大丈夫だったのに何故だろう。

** DONE firefox の同期不具合                                 :firefox:hamari:
   CLOSED: [2013-05-03 金 08:35]

下記のエラーが頻繁に表示される。
#+BEGIN_EXAMPLE
「接続中にエラーが発生しました: 不明なエラー。この処理は自動的に再施行されます。」
#+END_EXAMPLE

これの対処方法は、
- 「メニュー」→「ツール」→「オプション」→「Syncタブ」
- 「アカウントを管理ボタン」→「Syncをリセット」
で、もとに戻るはず。

*** 追記
結局もとに戻らなかった。さらにいろいろ調査してみたところ、アドレスバーに下記を入力すると、
syncエラーの原因が読めることがわかった。
#+BEGIN_SRC sh
about:sync-log
#+END_SRC
今まで同期エラーがでると、原因を示してくれないので対処のしようがなかったのだけれど、
このログをみれば詳細な情報が手にはいるので大助かり。

自分の場合、ログをみたところ、bookmark同期に原因があった模様。
#+BEGIN_SRC sh
1368414694893	Sync.Engine.Bookmarks	DEBUG	First sync, uploading all items
1368414694893	Sync.Engine.Bookmarks	INFO	2 outgoing items pre-reconciliation
1368414695441	Sync.Engine.Bookmarks	WARN	Got exception "Component returned failure code: 0x80070057 (NS_ERROR_ILLEGAL_VALUE) [nsINavBookmarksService.getItemType] Stack trace: _buildGUIDMap()@resource://gre/modules/services-sync/engines/bookmarks.js:233 < resource://gre/modules/services-sync/engines/bookmarks.js:357 < _mapDupe()@resource://gre/modules/services-sync/engines/bookmarks.js:313 < _findDupe()@resource://gre/modules/services-sync/engines/bookmarks.js:413 < _reconcile()@resource://services-sync/engines.js:1120 < resource://services-sync/engines.js:903 < resource://gre/modules/services-sync/record.js:625 < Channel_onDataAvail()@resource://gre/modules/services-sync/resource.js:542 < <file:unknown>" building GUID map. Skipping all other incoming items.
1368414695441	Sync.Engine.Bookmarks	WARN	Reconciliation failed: aborting incoming processing.
#+END_SRC
そこで「ツール」→「オプション」→「Sync」→「同期するデータ」から、
ブックマークを外して再度同期したところ、エラーが表示されなくなった。

しかしこのままではブックマークの同期ができないのでなんとかしなくてはならない。
そこで、下記の手順をとることにした。
- https://account.services.mozilla.com にアクセス
- 左ペインの =Clear Your Sync data= をクリック 
- =Clear My Sync Data= をクリックしてサーバー上のデータを削除
- 上述した方法でアカウントをリセット。そのとき、「他のすべてのデバイスのブラウザデータを、このパソコンのデータと置き換える」を選択する。
ただしこの方法は、同期もとにするPCのデータに異常がない場合に有効。

以上で同期が復活するはず。

*** 参考
- https://account.services.mozilla.com/sync/request_quota
- http://coffeecupman.blog28.fc2.com/blog-entry-25.html

** DONE git プロトコルについて                                          :git:
   CLOSED: [2013-05-03 金 08:36]

vimのneobundleを試してみていたのだが、 =git clone= 時の =git= プロトコルが使用できずに困っていた。
しかし、gitプロトコルを強制的にhttpsに変換する方法があったので設定したら見事にダウンロードできた。
- http://rochefort.hatenablog.com/entry/2013/03/26/000013
#+BEGIN_SRC sh
git config --global url."https://".insteadOf git://
#+END_SRC
今までel-getを敬遠してきたけどこれで復活させてもいいかもしれない。


** DONE org-modeの段落の改行を削除したい                       :hamari:oblog:
   CLOSED: [2013-02-16 土 01:13]

当ブログは、[[http://renard.github.com/o-blog/][o-blog]] で運営していて、org-modeで原稿を書いています。
その際、頻繁に =fill-paragraph(M-q)= を使用するのですが、
これが =org-export-as-html= すると都合が悪いのです。

どう都合が悪いかというと、段落の文のなかに半角スペースが紛れこんでしまうのです。

例をあげると
#+BEGIN_EXAMPLE
今日はいい
天気ですね!
#+END_EXAMPLE
これは、HTMLエクスポートすると
#+BEGIN_EXAMPLE
<p>今日はいい
 天気ですね!</p>
#+END_EXAMPLE
となるので、ブラウザ上では
#+BEGIN_EXAMPLE
今日はいい 天気ですね!
#+END_EXAMPLE
となり、文の途中に空白文字が挿入されてしまいます。

これはHTMLの仕様なので、変更するのはムズかしそうです。
cssなりorg-modeなりで「pタグの改行は空白にしない」オプションがあればいいのですが、
ざっと見たかぎり見つかりませんでした。[fn:1]

まあしょうがないので、これからは =fill-paragraph(M-q)= を使用せず、
1行ごとに改行することにします。
#+BEGIN_EXAMPLE
今日はいい天気ですね!
そうですね。
#+END_EXAMPLE
これはこうなる。
#+BEGIN_EXAMPLE
今日はいい天気ですね!そうですね。
#+END_EXAMPLE

[fn:1]わかち書きが基本の英語圈でできた仕様だからしかたないのだろうけど、
日本語の文章を書くときは不便だなあ。

** DONE o-blogのデザインを修正しました。                              :oblog:
   CLOSED: [2013-02-16 土 01:13]

lessファイルがコンパイルできるようになったため、
いろいろとデザインを修正しました。

- 日本語フォントをメイリオ系を利用するようにした。
- タイトルのバーコードを削除
- タイトルのスタイルを修正
  - フォントのサイズ、行間
  - Twitter bootstrapの =well= クラスを削除
- 見出しのスタイルを全て修正
- 見出し毎にパラグラフが横にシフトするスタイルを修正
- ページャを下に移動
- 最上部にあるメニューを固定しないように修正
  - org-modeの注釈でジャンプするときに、ずれるため。
- lessではく、コンパイル後のcssを読むように修正

などです。[[http://renard.github.com/o-blog/][本家]] のデザインとは大分離れたと思います。

forkしたリポジトリの =topic-my-design= ブランチにあります。
- https://github.com/mikio/o-blog/tree/topic-my-design

** DONE sbclをubuntuにインストールする                     :lisp:sbcl:ubuntu:
   CLOSED: [2013-02-15 金 08:43]

ubuntuにインストールする場合、リポジトリにあるsbclのバージョンが古いので、
SLIMEが動かなかったりする。
したがって公式サイト(http://www.sbcl.org/getting.html)からバイナリをインストールする。

#+BEGIN_SRC sh
$ cd Downloads/
$ wget --trust-server-names http://downloads.sourceforge.net/project/sbcl/sbcl/1.1.4/sbcl-1.1.4-x86-64-linux-binary.tar.bz2?r=http%3A%2F%2Fwww.sbcl.org%2Fplatform-table.html&ts=1360882833&use_mirror=jaist 
$ tar xvfj sbcl-1.1.4-x86-64-linux-binary.tar.bz2 
$ cd sbcl-1.1.4-x86-64-linux/
$ sudo paco -D sh install.sh 
#+END_SRC
- wgetの =--trust-server-names= オプションがないと、正しいファイル名で保存されない。
- pacoを使用してパッケージ管理している。

 =~/.bashrc= などに下記を追加しておく。
#+BEGIN_SRC sh
export PATH=$PATH:/usr/local/bin
#+END_SRC

起動。プロンプトがアスタリスクなので一瞬面くらう。
#+BEGIN_SRC sh
 mikio@whitebase:~$ sbcl
 This is SBCL 1.1.4, an implementation of ANSI Common Lisp.
 More information about SBCL is available at <http://www.sbcl.org/>.
 
 SBCL is free software, provided as is, with absolutely no warranty.
 It is mostly in the public domain; some portions are provided under
 BSD-style licenses.  See the CREDITS and COPYING files in the
 distribution for more information.
 * 
#+END_SRC

終了。quit関数を呼びだす。
#+BEGIN_SRC lisp
 * (quit)
#+END_SRC

*** SLIMEの最新版をインストール
package.elで取得。

 =M-x slime= で起動すると下記のエラー。
#+BEGIN_SRC lisp
Debugger entered: (("Error in timer" slime-attempt-connection (#<process inferior-lisp<1>> nil 6) (void-variable --cl-accu--)))
  #[257 "\302\303\304\300\301F\"\207" [slime-attempt-connection (#<process inferior-lisp<1>> nil 6) debug nil "Error in timer"] 7 "\n\n(fn DATA)"]((void-variable --cl-accu--))
  funcall(#[257 "\302\303\304\300\301F\"\207" [slime-attempt-connection (#<process inferior-lisp<1>> nil 6) debug nil "Error in timer"] 7 "\n\n(fn DATA)"] (void-variable --cl-accu--))
  slime-timer-call(slime-attempt-connection #<process inferior-lisp<1>> nil 6)
  apply(slime-timer-call (slime-attempt-connection #<process inferior-lisp<1>> nil 6))
  byte-code("r\301\302H\303H\"\210)\301\207" [timer apply 5 6] 4)
  timer-event-handler([t 20765 29729 757686 0.3 slime-timer-call (slime-attempt-connection #<process inferior-lisp<1>> nil 6) nil])
  recursive-edit()
  debug(nil ("Error in timer" slime-attempt-connection (#<process inferior-lisp> nil 6) (void-variable --cl-accu--)))
  #[257 "\302\303\304\300\301F\"\207" [slime-attempt-connection (#<process inferior-lisp> nil 6) debug nil "Error in timer"] 7 "\n\n(fn DATA)"]((void-variable --cl-accu--))
  funcall(#[257 "\302\303\304\300\301F\"\207" [slime-attempt-connection (#<process inferior-lisp> nil 6) debug nil "Error in timer"] 7 "\n\n(fn DATA)"] (void-variable --cl-accu--))
  slime-timer-call(slime-attempt-connection #<process inferior-lisp> nil 6)
  apply(slime-timer-call (slime-attempt-connection #<process inferior-lisp> nil 6))
  byte-code("r\301\302H\303H\"\210)\301\207" [timer apply 5 6] 4)
  timer-event-handler([t 20765 29509 897808 0.3 slime-timer-call (slime-attempt-connection #<process inferior-lisp> nil 6) nil])
#+END_SRC

ググった結果、下記のサイトによるとemacs24のレキシカルスコープ関連の不具合らしい。
- http://stackoverflow.com/questions/9161871/slime-doesnt-work-in-emacs24

サイトの指示どおりに =slime.el= を修正してバイトコンパイル。
#+BEGIN_SRC lisp
-;; lexical-binding: t
+;; lexical-binding: nil
#+END_SRC
これで =M-x slime= でslimeを起動できた!
#+BEGIN_SRC lisp
; SLIME - ChangeLog file not found
CL-USER> 
#+END_SRC

** DONE Twitter bootstrap.lessのコンパイル                       :less:oblog:
   CLOSED: [2013-02-07 木 20:49]

[[http://renard.github.com/o-blog/][o-blog]] は、Twitter Bootstrapのlessを使用しているのですが、
事前にコンパイルしていないため初回ページの表示にかなり時間がかかります。

このブログが重かったのはその為です(今は大丈夫なはず)。

この問題を解消するため、o-blogで使用してるlessをコンパイルすることにしました。
以降では =~/dev/= というディレクトリで作業することとします。

*** 環境準備
lessをコンパイルするには、まずnode.jsが必要です。
Windowsであれば公式サイトからインストーラをダウンロードしてインストールします。

ubuntuであればapt-getでインストールしたい所ですが、
node.jsは更新が激しくapt-getだと使い勝手が悪いので、nvm経由でインストールします。

まず、nvmをインストールします。
#+BEGIN_SRC sh
$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh
#+END_SRC

nvmコマンドでインストールできたか確認します。
#+BEGIN_SRC sh
$ nvm

Node Version Manager

Usage:
    nvm help                    Show this message
    nvm install [-s] <version>  Download and install a <version>
#+END_SRC

続いて現時点で最新のバージョンであるv0.10.xのnode.jsをインストールします。
#+BEGIN_SRC sh
$ nvm install 0.10
#+END_SRC

確認します。
#+BEGIN_SRC sh
$ node -v
v0.10.22
#+END_SRC

続いてless.jsのソースコードを入手します。
#+BEGIN_SRC sh
$ cd ~/dev/
$ git clone https://github.com/cloudhead/less.js
$ cd less.js
#+END_SRC
以上で準備ができました。

*** コンパイルをためす

下記の内容のlessファイルを =~/dev/less-test/style.less= として保存します。
#+BEGIN_SRC css
@main-bg: #efefef;
@default-color: #aaaaaa;
html {
	background-color: @main-bg;
	color: @default-color;
}
#+END_SRC


あとは、lesscコマンドでコンパイルできます。
#+BEGIN_SRC sh
$ cd ~/dev/less.js
$ bin/lessc ../less-test/style.less
html {
  background-color: #efefef;
  color: #aaaaaa;
}
#+END_SRC
コンパイル結果は、標準出力に表示されます。

*** Bootstrapをコンパイルする。
Twitter Bootstrapのlessソースをダウンロードします。
#+BEGIN_SRC sh
$ cd ~/dev
$ git clone https://github.com/twitter/bootstrap.git
#+END_SRC

コンパイルします。
#+BEGIN_SRC sh
$ cd ~/dev/less.js
$ bin/lessc ../bootstrap/less/bootstrap.less 
ParseError: Unrecognised input in /home/mikio/dev/bootstrap/less/mixins.less on line 561, column 7:
560     .spanX (@index) when (@index > 0) {
561       (~".span@{index}") { .span(@index); }
562       .spanX(@index - 1);
#+END_SRC
シンタックスエラーになってしまいました。

原因を調べたところ(かなりハマりました)、
lessの文法が、ver1.4から変更になったせいのようです。

less.orgの文字列エスケープの説明を読むと下記のように、
selectorの変数名の文法に変更があったとあります。
#+BEGIN_EXAMPLE
Note: prior to less 1.3.1 a (~"@{name}") type of selector was supported.
 Support for this will be removed in 1.4.0.
#+END_EXAMPLE
bootstrap.lessは、less.1.3.1 a以前の文法で記述されているので
less.jsのバージョンを変更します。
#+BEGIN_SRC sh
$ git tag
1.1.4-lastest
1.1.5-extend_patch
v1.0
v1.3.0
v1.3.1
v1.3.2
v1.3.3
$ git co v1.3.3
$ bin/lessc ../bootstrap/less/bootstrap.less
#+END_SRC
これでやっとコンパイルできました!

*** o-blog.less をコンパイルする。
Bootstrapがコンパイルできるようになったので、本ブログのlessである、
o-blog.lessもコンパイルしてみます。
#+BEGIN_SRC sh
$ bin/lessc ../../Dropbox/site-lisp/o-blog/templates/style/less/o-blog.less > o-blog.css
$ ls -ltr
合計 236
-rw-rw-r-- 1 mikio mikio    287  2月  7 20:20 README.md
-rw-rw-r-- 1 mikio mikio   9764  2月  7 20:20 LICENSE
-rw-rw-r-- 1 mikio mikio   1559  2月  7 20:20 CONTRIBUTING.md
-rw-rw-r-- 1 mikio mikio   4522  2月  7 20:20 CHANGELOG.md
drwxrwxr-x 2 mikio mikio   4096  2月  7 20:20 benchmark
drwxrwxr-x 3 mikio mikio   4096  2月  7 20:20 lib
drwxrwxr-x 2 mikio mikio   4096  2月  7 20:35 build
drwxrwxr-x 2 mikio mikio   4096  2月  7 20:35 bin
-rw-rw-r-- 1 mikio mikio   1824  2月  7 20:35 Makefile
drwxrwxr-x 2 mikio mikio   4096  2月  7 20:35 dist
drwxrwxr-x 5 mikio mikio   4096  2月  7 20:35 test
-rw-rw-r-- 1 mikio mikio    756  2月  7 20:35 package.json
-rw-rw-r-- 1 mikio mikio 179293  2月  7 20:38 o-blog.css
#+END_SRC
無事コンパイルできました!
サイズが180Kbもありますが。

あとは、この =o-blog.css= をlessのあったところに移動し、
#+BEGIN_SRC sh
$ mv o-blog.css ../../Dropbox/site-lisp/o-blog/templates/style/less/
#+END_SRC
less.jsを読みこまないようにします。
 - o-blog/templates/page_header.html
#+BEGIN_SRC html
-<link rel="stylesheet" type="text/less" href="<lisp>(ob:path-to-root)</lisp>/style/less/o-blog.less"/>
+<link rel="stylesheet" type="text/css" href="<lisp>(ob:path-to-root)</lisp>/style/less/o-blog.css"/>
-<script src="<lisp>(ob:path-to-root)</lisp>/style/js/less-1.3.0.min.js" type="text/javascript"></script>
#+END_SRC

アイコン系のデータのパスも修正する必要があります。
 - templates/style/Font-Awesome/less/font-awesome.less
#+BEGIN_SRC css
-@fontAwesomePath: '../font';
+@fontAwesomePath: '../Font-Awesome/font';
#+END_SRC

これでlessファイルのコンパイルがなくなり、サイトの読み込みが軽くなりました!

** DONE Redditで海外サイトをチェックする!                    :reddit:firefox:
   CLOSED: [2013-02-01 金 23:57]

みなさん「はてブ」使ってますか？
サイトの評価をするとき日本では「はてブ数」がひとつの指標になると思います。
同じように海外では [[http://www.reddit.com/r/Clojure/][reddit]] が有名らしいです。[fn:1]

私の場合、 [[http://www.blog.replore.com/?p%3D6][ここ]] で紹介されていたのをきっかけに、
Clojureの情報源として頻繁にチェックするようになりました。
日本の記事を見る時条件反射的に「はてブ数」をチェックしてしまうのですが、
その時に便利なのがFirefoxの拡張です。
記事が表示されると同時に「はてブ数」も表示されるので、
はてぶ経由で開かなかった記事もどれだけ話題なのかがわかって、
非常に便利です。

Reidditは、気になる記事をユーザがチェックしてコメントがつく仕組みなので、
「はてブ」にちょっと似ています。すると当然欲しくなりますよね拡張が（笑）。

そしたら公式AddOnがありました。
- https://addons.mozilla.org/ja/firefox/addon/socialite/

このAddOnをインストールしておくと、Redditに登録されて記事であれば自動的にツールバーが表示されます。
これで海外サイトでも話題のサイトなのかどうか判断できますね!

[fn:1] Redditについては、下記が詳しいです。
- http://blog.steamcommunity.jp/2012/01/2reddit-pc.html

** DONE Compojureの起動方法まとめ                         :clojure:compojure:
   CLOSED: [2013-02-01 金 23:37]

nrepl(emacs)から起動
#+BEGIN_SRC clojure
user> (use 'hello-world.handler)
user> (use 'ring.util.serve)
user> (serve app)
Started web server on port 3000
#+END_SRC

再起動
#+begin_src clojure
user> (serve 'hello-world.handler)
Stopped web server
Started web server on port 3000
#+end_src

端末で起動
#+BEGIN_SRC sh
$ lein ring server
#+END_SRC

サーバー上で起動する場合は、X環境がないので =*-headless= 関数を使う。

nreplから起動
#+BEGIN_SRC clojure
user> (serve-headless app)
#+END_SRC

端末で起動
#+BEGIN_SRC sh
$ lein ring server-headless
#+END_SRC

** DONE 端末からサーバー上のcompojureが起動しない          :hamari:compojure:
   CLOSED: [2013-01-31 木 23:37]

自作サーバー上のcompojureで作ったアプリを起動しようとしたところ、下記のエラーが発生して起動しなかった。
#+BEGIN_SRC sh
$ lein ring server
2013-02-01 17:23:52.538:INFO::Logging to STDERR via org.mortbay.log.StdErrLog
2013-02-01 17:23:52.540:INFO::jetty-6.1.26
Started server on port 3001
2013-02-01 17:23:52.567:WARN::failed SocketConnector@0.0.0.0:3000: java.net.BindException: Address already in use
2013-02-01 17:23:52.567:WARN::failed Server@18532dc: java.net.BindException: Address already in use
2013-02-01 17:23:52.567:INFO::jetty-6.1.26
2013-02-01 17:23:52.569:INFO::Started SocketConnector@0.0.0.0:3001
Exception in thread "main" java.awt.HeadlessException:
No X11 DISPLAY variable was set, but this program performed an operation which requires it.
        at java.awt.GraphicsEnvironment.checkHeadless(GraphicsEnvironment.java:159)
        at java.awt.Window.<init>(Window.java:432)
        at java.awt.Frame.<init>(Frame.java:403)
        at java.awt.Frame.<init>(Frame.java:368)
        at javax.swing.JFrame.<init>(JFrame.java:158)
        at clojure.java.browse_ui$open_url_in_swing.invoke(browse_ui.clj:20)
        at clojure.lang.Var.invoke(Var.java:415)
        at clojure.java.browse$open_url_in_swing.invoke(browse.clj:44)
        at clojure.java.browse$browse_url.invoke(browse.clj:52)
        at ring.server.standalone$open_browser_to.invoke(standalone.clj:39)
        at ring.server.standalone$serve$fn__1497.invoke(standalone.clj:102)
        at ring.server.standalone$try_port.invoke(standalone.clj:16)
        at ring.server.standalone$try_port.invoke(standalone.clj:19)
        at ring.server.standalone$serve.doInvoke(standalone.clj:95)
        at clojure.lang.RestFn.invoke(RestFn.java:423)
        at ring.server.leiningen$serve.invoke(leiningen.clj:20)
        at user$eval2358.invoke(NO_SOURCE_FILE:1)
        at clojure.lang.Compiler.eval(Compiler.java:6511)
        at clojure.lang.Compiler.eval(Compiler.java:6501)
        at clojure.lang.Compiler.eval(Compiler.java:6477)
        at clojure.core$eval.invoke(core.clj:2797)
        at clojure.main$eval_opt.invoke(main.clj:297)
        at clojure.main$initialize.invoke(main.clj:316)
        at clojure.main$null_opt.invoke(main.clj:349)
        at clojure.main$main.doInvoke(main.clj:427)
        at clojure.lang.RestFn.invoke(RestFn.java:421)
        at clojure.lang.Var.invoke(Var.java:419)
        at clojure.lang.AFn.applyToHelper(AFn.java:163)
        at clojure.lang.Var.applyTo(Var.java:532)
        at clojure.main.main(main.java:37)
#+END_SRC

なんでサーバー上で起動してるのにX11を使おうとしてるんだ？と思ったが、こ
れはCompojureが自動的にブラウザを起動させようとしてるかららしい。
https://github.com/NeillAlexander/battleships/issues/1

サーバー上で起動には下記のコマンドを使用すれば良い
#+BEGIN_SRC sh
$ lein ring server-headless
#+END_SRC

** DONE o-blogのフォント                                              :oblog:
   CLOSED: [2013-01-31 木 22:37]

o-blogのデフォルトのフォントが気に入らなかったので、メイリオ系を使用するように修正した。
#+BEGIN_SRC sh
diff --git a/templates/style/less/o-blog-default.less b/templates/style/less/o-blog-default.less
index a819c1d..10d8e50 100644
--- a/templates/style/less/o-blog-default.less
+++ b/templates/style/less/o-blog-default.less
@@ -24,12 +24,13 @@
 
 
     h1, h2, h3, h4, h5, h6 {
-	font-family: "Yanone Kaffeesatz", "Helvetica Neue", Helvetica, Arial, sans-serif;
+    font-family: 'Hiragino Kaku Gothic ProN', Meiryo, 'VL ゴシック', 'MS PGothic', Sans-serif;
     }
 
 
     @monoFontFamily: "Ubuntu Mono", Menlo, Monaco, Consolas, "Courier New";
-    @sansFontFamily: "Andika", "Helvetica Neue", Helvetica, Arial, sans-serif;
+    @sansFontFamily: 'Hiragino Kaku Gothic ProN', Meiryo, 'VL ゴシック', 'MS PGothic', Sans-serif;
+

diff --git a/templates/style/less/o-blog.less b/templates/style/less/o-blog.less
index 78ee71b..50b3df3 100644
--- a/templates/style/less/o-blog.less
+++ b/templates/style/less/o-blog.less
@@ -3,8 +3,7 @@
     @import "font-Ubuntu-Mono.less";
     @import "font-Andika.less";
     @monoFontFamily: "Ubuntu Mono", Menlo, Monaco, Consolas, "Courier New";
-    @sansFontFamily: "Andika", "Helvetica Neue", Helvetica, Arial, sans-serif;
-
+    @sansFontFamily: 'Hiragino Kaku Gothic ProN', Meiryo, 'VL ゴシック', 'MS PGothic', Sans-serif;
 }
 @import "../bootstrap/less/bootstrap.less";
 @import "../bootstrap/less/responsive.less";

#+END_SRC

変更内容は、下記を参考にした。
- http://wada811.blogspot.com/2012/12/best-font-family-definitive-edition.html

デフォルトのフォントは下記のとおり
| 基本フォント     | Andika      | http://www.google.com/webfonts/specimen/Andika            |
| ヘッダとかはこれ | Yanone      | http://www.yanone.de/typedesign/kaffeesatz/               |
| コードまわり     | Ubuntu Mono | http://www.google.com/webfonts/specimen/Ubuntu+Mono       |
| アイコンとか     | Awesome     | http://hyper-text.org/archives/2012/10/font_awesome.shtml |

** DONE Firefoxで水平スクロールを改ページする方法          :firefox:keysnail:
   CLOSED: [2013-01-31 木 21:37]

タイル型ウィンドウマネージャーを使用していると、ウィンドウ枠が固定なので、
例えばFirefoxなどで横スクロールしないと画面の端が見れないことがあります。

そんな時欲しい機能が横スクロールなのですが、ざっと調べた限り、
横方向に改ページというキーボードショートカットは無さそうです。
そこで安直ですが、KeysNailのキーバインドとして、
ビューモード時に行頭行末移動として下記のように割りあてました。

#+BEGIN_SRC javascript
key.setViewKey([["C-e"]], function (ev) {
    for (var i = 0; i < 100; i++) {
        key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_RIGHT, true);
    }
}, '右端へ移動', false);

key.setViewKey([["C-a"]], function (ev) {
    for (var i = 0; i < 100; i++) {
        key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_LEFT, true);
    }
}, '左端へ移動', false);
#+END_SRC

これで、「ひょいっ」という感じで端っこが気軽に閲覧できるようになりました。

** DONE Helmでバックスペース(C-h)が効かなくなった!        :emacs:helm:hamari:
   CLOSED: [2013-01-31 木 20:37]

helmセッション中に打ち間違いしたときに、C-hでバックスペースすることがよ
くあるのですが、これがいつのまにかできなくなってました。

多分今までは.emacs設定ファイル中の
#+BEGIN_SRC emacsl-lisp
(define-key global-map (kbd "C-h") 'delete-backward-char)
#+END_SRC
が有効になっていて、helm独自の設定をしなくてもオッケーだったんですが、
helmをバージョンアップしたら効かなくなってしまったようです。そこで、
emacs起動中に下記を評価して凌いだのですが、再起動したら効かなくなりまし
た。
#+BEGIN_SRC emacs-lisp
     (define-key helm-map (kbd "C-h") 'delete-backward-char)
#+END_SRC
原因は、この式が評価されるタイミングでhelmが読みこまれてないためで、
helm-mapが存在してないようです。

この手の不具合は設定ファイルをいじってるとよく遭遇するのですが、いまい
ち回避方法がわかってませんでした。したいことは「helmをきちんと読み込ん
だあとに式を評価する」ということなんですが。

で、今回は少し時間をとってGoogle先生から聞きだした結果、
=eval-after-load= を使用すれば良いことがわかりました。
#+BEGIN_SRC emacs-lisp
(eval-after-load 'helm
  '(progn
     (define-key helm-map (kbd "C-h") 'delete-backward-char)
     ))
#+END_SRC
これで無事helmセッション中に =C-h (delete-backward-char)= が使用できる
ようになりました。

** DONE WindowsでLinuxするのに、CygwinとVirtualBoxどっちがいいか？ :cygwin:virtualbox:
   CLOSED: [2013-01-31 金 19:37]

自宅ではUbuntuが使えるからいいんだけど、会社での作業はWindowsが必須。
なのでどうにかLinux環境を構築したい。選択肢はふたつ。

*** Cygwin
- 全体的に軽い。
- Windowsとの融合性が高い。DosのコマンドがCygwin上で使えるし、Winアプリの起動もできる。
- 全画面アプリとかだと結構表示崩れすることがある。
- Cygwin版emacsは結構重い。
- LinuxやMacでは簡単に動くものが、Cygwinでは結構苦労する。
  - 特にclojureのアプリでパスまわりの関係で動かないプログラムも多い。
*** VirtualBox
- なんといっても互換性が高い(あたりまえだが)。ネットのLinux向けのノウハウがそのまま使える。
- GUIを使用するとどうしてももっさり。
- Excelとの併用ができない。
  - シームレスモードは画面が乱れるのでイヤ。
- VirtualBoxのアップデートなどで動作が不安定になる可能性がある。
- スナップショットで保存できる。
*** 結論
やっぱりCygwinがいいかなぁ。Python-Windows-Tilerを使用すればそれなり快
適だし。

** DONE leinの出力するメッセージを英語化する。                    :lein:java:
   CLOSED: [2013-01-31 木 03:38]

WindowsのCygwinでleinを弄っていると、java.exeの出力メッセージが
が文字化けする。

下記は、leinじゃないけど、javaを実行したときの文字化けの例。
#+BEGIN_SRC sh
$ java -jar target/hoge-0.1.0-SNAPSHOT.jar
▒G▒▒▒[: ▒▒▒C▒▒▒E▒N▒▒▒Xhoge.core▒▒▒▒▒▒▒▒Ȃ▒▒▒▒▒▒▒▒▒▒[▒h▒ł▒▒܂▒▒▒ł▒▒▒
#+END_SRC

これは、java.exeのメッセージがShiftJISのに対してCygwin環境がUTF-8なのが
原因。解消するには、メッセージを英語表記にすれば良い。
#+BEGIN_SRC sh
$ java -Duser.language=en -jar target/hoge-0.1.0-SNAPSHOT.jar
Error: Could not find or load main class hoge.core
#+END_SRC

これをlein実行時に指定するには、 =~/.lein/profiles.clj= を以下のように
編集しておく。
#+BEGIN_SRC clojure
  :jvm-opts [
             "-Duser.language=en"
             ]
#+END_SRC

** DONE Javaでコンソールアプリを作りたいのでライブラリを調査してみた :clojure:java:
   CLOSED: [2013-01-11 金 22:37]

JAVAで端末(gnome-terminal, putty, cygwinなど)で動作するTUI(テキストユー
ザーインターフェイス)ベースのアプリを作るにはどうすればいいかと思い、ま
ずライブラリを調査しました。以下の3つが見つかりましたよ。

- [[http://sourceforge.net/projects/javacurses/][jcurses]]
- [[http://www.pitman.co.za/projects/charva/][charva]]
- [[http://code.google.com/p/lanterna/][lanterna]]

jcursesは一番老舗っぽい。全く更新されてない。

charvaはswing/awt互換のライブラリをTUIで表示するもの。意欲的なライブラ
リだがやっぱり開発停止中。

最後のlaternaは、活発に開発していて、しかもPure Javaで開発されてます!
つまり、他のライブラリと違ってネイティブのライブリが必要ありません。だ
から導入が簡単です(Mavenリポジトリもあります)。ScreenShotを見る限りMac
でもUbuntuでもWindwos7でも同じように動いてそうです。現時点で、Javaで
TUIアプリを開発するならlaterna一択かもしれません。

laternaにおいて個人的になにより嬉しいのが、[[http://sjl.bitbucket.org/clojure-lanterna/][clojure-laterna]] という
Clojureのラッパーがあるということですね。これでTUIベースのテキストエディ
タとか作りたいなぁ。

** DONE python window tiler を試す                           :windows:xmonad:
   CLOSED: [2013-01-29 火 23:07] 

[[http://www.lifehacker.jp/2013/01/130120mykids_command_line.html][この記事]] にxmonadがでてきたので、自分が普段使っているWindowsでもタイル
型マネージャを使いたくなった。実は以前にも何度か試したことがあったが、
どれもキーバインドが好みでなかったり動作が不安定だったりで、いまいち納
得のいくものがなかったので、使っていなかったのだ。でもその時から大分時
間も経ってるので、最近は何かないかなと調べたところPythonで実装されたそ
の名もずばり「Python-windows-tiler」というものを見つけた。

 - https://github.com/Tzbob/python-windows-tiler
 - http://d.hatena.ne.jp/uhiaha888/20121125/1353824257

使用方法は簡単で、バイナリを解凍してPWT.exeを実行するだけだが、パスに日
本語を含むとエラーになるのでルートに解凍するのが良いと思う。

キーバインディングはAwesomeなどと似ている。ただ、Altキーを使用するので
Emacsとキーバインディングが被ってしまうのでconfig.iniを開き、altを全て
winにしてPWT.exeを再起動した。

これでとりあえずEmacsとのキーバインディングの回避ができた。めでたしめで
たし、と思ったのだが、Win+Lキーでウィンドウの横幅を広げようとしたらロッ
ク画面になってしまう。。。

てことでWin+Lを無効化する方法を模索したけど、結局どれもうまくいかなかっ
たので横幅操作は封印することにした。てか、Winを使用するコンビネーション
キーはどれもWindowsに奪われてしまってうまくイカナイ。。。とはいえ、Win
キー経由でタイル操作はとても使いやすい。多様する操作はこれ。

| Win+SPC        | ウィンドウレイアウトの変更             |
| Win+j, Win+k   | ALT+TABの代りになる                    |
| Win+S+Ent      | プライマリの切替                       |
| Win+数字キー   | 仮想デスクトップの切替                 |
| Win+S+数字キー | カレントアプリを仮想デスクトップへ移動 |

特にWin+j,kがイイ!

自宅のUbuntu環境ではStumpWMを使用していたが、これはEmacserにはなじみの
あるキー操作なんだけど(Screen系のプリフィックスキーのあるやつ)、それが
逆に操作の混乱を生んでしまう。というのもの、自分の場合デスクトップの
emacsでは =windows.el= を使用し、端末ではtmuxを使用してるので、タイル型
ウィンドウマネージャのキーバインドにプレフィックスを使用すると混乱する
のだ。それにデスクトップのウィンドウ操作はできるだけすばやくしたいので
Screen系のStumpWMよりAwesome系のほうがサクサク操作できる。以上から自分
にはAwesome系の操作体系のほうが向いているような気がした。

ということで、Ubuntuではxmonadをもう一度使ってみようと思う。

** DONE emacsでgoogleReaderを読む                              :emacs:hamari:
   CLOSED: [2013-01-11 金 21:36]

基本的にできるだけemacs上でなんでも操作したいのですが、現在、
GoogleReaderは、emacs上で読んでません。w3mからログインできなくなってし
まったからです。そこでemacs上でGoogleアプリを操作できるという
=g-client= を試してみることにしました。

下記を参考にしました。
- http://titilat.raindrop.jp/blog/?p=12

makeに必要そうなものをインストール。不要なものもあるかも。
#+BEGIN_SRC sh
apt-cyg install libxslt # g起動時に必要
apt-cyg install openssl-devel
apt-cyg install libgc-devel
apt-cyg install gcc
apt-cyg install autoconf
apt-cyg install make
#+END_SRC

#+BEGIN_SRC sh
cd Dropbox/site-lisp/
svn export http://emacspeak.googlecode.com/svn/trunk/lisp/g-client/
cd g-client/
make
#+END_SRC

下記のエラーがでてしまう。
#+BEGIN_SRC sh
$ make
 :
Generating /cygdrive/c/Users/mikio/Dropbox/site-lisp/g-client/g-cus-load.el...done
emacs -batch -q -no-site-file  -eval '(setq vc-handled-backends nil)'  -l ./g-load-path.el -l ./g-loaddefs.el  -f batch-byte-compile org2blogger.el

In toplevel form:
org2blogger.el:33:1:Error: Can't find library org
Makefile:68: recipe for target `org2blogger.elc' failed
make: *** [org2blogger.elc] Error 1
#+END_SRC

bloggerは使用しないので、org2blogger.elcのターゲットをまるっと削除した。
で、今度は成功。
#+BEGIN_SRC sh
$ make
 :
gtube.el:349:1:Warning: the function `word-at-point' is not known to be
    defined.
Wrote /cygdrive/c/Users/mikio/Dropbox/site-lisp/g-client/gtube.elc
emacs -batch -q -no-site-file  -eval '(setq vc-handled-backends nil)'  -l ./g-load-path.el -l ./g-loaddefs.el  -f batch-byte-compile gsheet.el
Wrote /cygdrive/c/Users/mikio/Dropbox/site-lisp/g-client/gsheet.elc
#+END_SRC

=.emacs= に下記を設定。
#+BEGIN_SRC emacs-lisp
(load-library "g")
(setq g-user-email "hoge@gmail.com")
(setq browse-url-browser-function 'w3m-browse-url)
#+END_SRC

 =M-x greader-reading-list= を実行したら下記のエラーがw3m上で表示された。
#+BEGIN_EXAMPLE
-:1: parser error : Start tag expected, '<' not found 指定されたパスが見つかりません。 ^ unable to parse - 
#+END_EXAMPLE
cygwin上のemacsだったら大丈夫だった。

表示されるデータは、xmlをxsltでhtmlに変換したもので、ページの上部にRSSの各記事のタイトル一覧がならび
リンク(ページ内リンク)を辿ると、下部の概要文にジャンプするというもの。

試してみてわかったが、googlreaderからのxmlをxsltでhtmlに変換して表示し
ている。なので、w3m上でどんどん次の記事を読みすすめるということが出来な
さそう(静的htmlなので)。また表示される情報もタグ毎ではないし、件数も少
ないので自分の要件を満たしてなかった。CUIのpeepは大分使いやすかったので
残念。

** DONE cygwin経由で表示したtmuxの分割罫線が表示崩れする             :hamari:
   CLOSED: [2013-01-06 日 08:56]

最初Cygwinのバージョンが古いからかなと思ってバージョンアップしても改善
せず、ならばとtmuxのバージョンを最新にしても直らず、結局cyg-terminalの
オプションでTextの設定を下記のように変更したら、表示崩れが解消した。
#+BEGIN_EXAMPLE
変更前
Locale:JA_jp
CharacterSet:UTF-8

変更後
Locale:C
CharacterSet:UTF-8
#+END_EXAMPLE

** DONE CentOS5.6にtmux1.7をインストールする                         :hamari:
   CLOSED: [2013-01-06 日 08:56]

現在インストールしているtmuxはバージョンが1.5 。
cygwinから使用すると、罫線の表示がおかしくなるので
試しにtmuxを1.7にしてみることにした。

makeしたら下記のエラー。
#+BEGIN_SRC sh
$ sudo make
gcc -DPACKAGE_NAME=\"tmux\" -DPACKAGE_TARNAME=\"tmux\" -DPACKAGE_VERSION=\"1.7\" -DPACKAGE_STRING=\"tmux\ 1.7\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DPACKAGE=\"tmux\" -DVERSION=\"1.7\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_CURSES_H=1 -DHAVE_DIRENT_H=1 -DHAVE_FCNTL_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_NCURSES_H=1 -DHAVE_PATHS_H=1 -DHAVE_PTY_H=1 -DHAVE_STDINT_H=1 -DHAVE_SYS_DIR_H=1 -DHAVE_TERM_H=1 -DHAVE_B64_NTOP=1 -DHAVE_FORKPTY=1 -DHAVE_DAEMON=1 -DHAVE_SETENV=1 -DHAVE_ASPRINTF=1 -DHAVE_STRCASESTR=1 -DHAVE_STRSEP=1 -DHAVE_DECL_OPTARG=1 -DHAVE_DECL_OPTIND=1 -DHAVE_DECL_OPTRESET=0 -DHAVE_BZERO=1 -DHAVE_DIRFD=1 -DHAVE_SYSCONF=1 -DHAVE_BSD_TYPES=1 -DHAVE___PROGNAME=1 -DHAVE_PROC_PID=1 -I.    -iquote. -I/usr/local/include    -D_GNU_SOURCE -std=c99    -MT control.o -MD -MP -MF .deps/control.Tpo -c -o control.o control.c
control.c: In function ‘control_callback’:
control.c:103: 警告: implicit declaration of function ‘evbuffer_readln’
control.c:103: error: ‘EVBUFFER_EOL_LF’ undeclared (first use in this function)
control.c:103: error: (Each undeclared identifier is reported only once
control.c:103: error: for each function it appears in.)
control.c:103: 警告: assignment makes pointer from integer without a cast
make: *** [control.o] エラー 1
#+END_SRC

下記によるとlibeventのバージョンが古い可能性があるようなので、libevevntのバージョンを調べる。
- http://sourceforge.net/mailarchive/forum.php?thread_name=CALmqh6G6zzvcKcwRmNOmFRT0qO8A__YD3RjDuBwnSJ%3DJutTMPA%40mail.gmail.com&forum_name=tmux-users
#+BEGIN_SRC sh
$ ldd /usr/local/bin/tmux
        linux-gate.so.1 =>  (0x00e0c000)
        libutil.so.1 => /lib/libutil.so.1 (0x00de4000)
        libm.so.6 => /lib/libm.so.6 (0x00685000)
        libncurses.so.5 => /usr/lib/libncurses.so.5 (0x0075b000)
        libevent-1.4.so.2 => /usr/lib/libevent-1.4.so.2 (0x001b5000)
        librt.so.1 => /lib/librt.so.1 (0x00742000)
        libc.so.6 => /lib/libc.so.6 (0x00523000)
        libresolv.so.2 => /lib/libresolv.so.2 (0x00a2a000)
        /lib/ld-linux.so.2 (0x00504000)
        libdl.so.2 => /lib/libdl.so.2 (0x0067e000)
        libnsl.so.1 => /lib/libnsl.so.1 (0x008d7000)
        libpthread.so.0 => /lib/libpthread.so.0 (0x006b0000)
#+END_SRC

tmuxのサイトを見ると、libeventのバージョンは、1.4 or 2.0とあるので一見問題なさそう。
- http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/3593
#+BEGIN_EXAMPLE
That's still an old version.  Use either libevent-1.4.14b or libevent-2.0.21
#+END_EXAMPLE
とある。そこで、インストールしているバージョンを確認したところ、1.4.13だった。

#+BEGIN_SRC sh
$ sudo yum list installed |grep libevent-devel
libevent-devel.i386                     1.4.13-1                       installed
#+END_SRC

そこで1.4.14にバージョンアップできないか調査してみる。
yum経由でバージョンアップする方法がわからなかったので
手動でインストールすることにした。
#+BEGIN_SRC sh
# yum版パッケージを削除
sudo yum remove libevent-devel

sudo wget --no-check-certificate https://github.com/downloads/libevent/libevent/libevent-1.4.14b-stable.tar.gz
sudo tar xvfz libevent-1.4.14b-stable.tar.gz
cd libevent-1.4.14b-stable
sudo ./configure
sudo make
sudo paco -D make install
#+END_SRC

結局cygwinでの罫線表示崩れは直らなかった。。。

** DONE oblogをプレビューできるようにするためにUbuntuにApache2をインストールする :ubuntu:
   CLOSED: [2012-12-29 土 18:11]

このブログはoblogで書いてるんだけど、生成されたhtmlをfileとして開いてみ
るとcssがうまく適用されなかったりするので、プレビュー用に自宅サーバに
apacheを入れることにした。

まずはインストール。
#+BEGIN_SRC sh
$ sudo apt-get install apache2
#+END_SRC

下記の設定でoblogを設定する
#+BEGIN_SRC sh
$ cd /etc/apache2/sites-available
$ cp default oblog.whitebase
#+END_SRC

oblog.whitebaseファイルを下記のように編集
#+BEGIN_EXAMPLE
<VirtualHost oblog.whitebase:80>
	ServerAdmin webmaster@localhost

	DocumentRoot /home/mikio/dev/mikio.github.com
	<Directory />
		Options FollowSymLinks
		AllowOverride None
	</Directory>
	<Directory /home/mikio/dev/mikio.github.com>
		Options Indexes FollowSymLinks MultiViews
		AllowOverride None
		Order allow,deny
		allow from all
	</Directory>

	ErrorLog ${APACHE_LOG_DIR}/error.log

	# Possible values include: debug, info, notice, warn, error, crit,
	# alert, emerg.
	LogLevel warn

	CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
#+END_EXAMPLE

/etc/hostsを下記のように修正
#+BEGIN_SRC sh
192.168.10.2	whitebase.lan	whitebase
192.168.10.2	oblog.whitebase
#+END_SRC

#+BEGIN_SRC sh
$ sudo a2ensite oblog.whitebase
$ sudo service apache2 reload
#+END_SRC

続いてWindows7側でhostsを設定する。Windows7でhostsファイルを編集するに
は、メモ帳を管理者権限で開く必要がある。スタートメニューでnotepadと入力
し、右クリで「管理者権限で実行する」を選択すれば良い。
#+BEGIN_EXAMPLE
c:/Windows/System32/drivers/etc/hosts
192.168.10.2 whitebase
192.168.10.2 oblog.whitebase
#+END_EXAMPLE

設定が終わったら下記へアクセス。
- http://oblog.whitebase/

** DONE eshell上でリダイレクトした結果が文字化け                     :hamari:
   CLOSED: [2012-12-30 日 17:27]

#+BEGIN_SRC sh
$ git diff > hoge.patch
#+END_SRC
hoge.patchを開くと下記のような制御コードのまじった結果になりpatchとして使用できない。
#+BEGIN_SRC sh
^[[0m^[[01;32march^[[0m      ^[[01;32mcut^[[0m                   ^[[01;32mdoexec^[[0m      ^[[01;32mgettext^[[0m   ^[[01;36mksh^[[0m
#+END_SRC
るびきちさんのメルマガ第3号に紹介されていたesh-myparser.elを使って以下のコマンドでおっけー。
#+BEGIN_SRC sh
$ b git diff > hoge.patch
#+END_SRC

** DONE terminfoとtermcapとncurses                                 :terminal:
   CLOSED: [2012-12-30 日 17:27]

下記が詳しい。
- http://doda.b.sourceforge.jp/2013/01/03/termcap_andterminfo/

*** terminfo,termcap
- terminfo,termcapは、端末毎の情報を集めたデータベースのこと。
- termcap,terminfoからどの情報を使用するかを環境変数TERMで指定する。
- termcapは過去の規格。
- termcapは全ての端末情報を1ファイルに記述。
- terminfoは、端末毎に記述。
- terminfoは、テキストのソースファイルがあり、コンパイルが必要。
- terminfoは、/usr/share/terminfo にある。

*** ncurses
ncurses は、端末に依存しない形式でテキストユーザインタフェース（TUI）
を作成するためのAPIを提供するライブラリ。画面切り替えを最適化し、リモー
トシェルで使ってもレイテンシを最小に抑えるようになっている。
- 色の制御
コンソールでは「ANSIエスケープシーケンス」という制御シーケンスで色を指
定する。

** DONE o-blogをcloneする。                                           :oblog:
   CLOSED: [2012-12-30 日 17:28]

まずはforkする。

forkしたリポジトリをcloneする。
#+BEGIN_SRC sh
$ git clone https://github.com/mikio/o-blog.git
#+END_SRC

リモートリポジトリとしてオリジナルのリポジトリをupstreamとして登録する。
#+BEGIN_SRC sh
$ git clone https://github.com/mikio/o-blog.git
$ cd o-blog
$ git remote add upstream git://github.com/renard/o-blog.git
#+END_SRC

最新版に追従する手順
#+BEGIN_SRC sh
$ git fetch upstream
$ git merge upstream/master
#+END_SRC

** DONE javacの文字化けの解消方法                                 :tips:java:
   CLOSED: [2012-12-26 水 09:25]

cygwin経由でjavacを起動したり、emacs経由でjavaを利用したりするとよくjavaのメッセージが文字化けする。
下記のように-J-Dオプション経由で =user.language=en= システムプロパティを設定してあげると、
メッセージが英語になる。
#+BEGIN_SRC sh
$ javac -J-Duser.language=en
#+END_SRC
これでエラーメッセージが文字化けして手をつけられないという事態を回避できる。

** DONE JDEEでコンパイルコマンドを実行すると、文字化け発生      :hamari:jdee:
   CLOSED: [2012-12-26 水 09:20]

日本語環境で =C-c C-v C-c= でコンパイルすると、
エラーメッセージなどのjavacの出力するメッセージが文字化けする。

そこで下記のとおり出力メッセージをアスキーで出力するようにしたところ、
JDEEがこのオプションを受け付けてくれない。具体的には下記のとおり。
#+BEGIN_SRC emacs-lisp
  (setq jde-compile-option-command-line-args '("-J-Duser.language=en"
                                               "-J-Dfile.encoding=UTF8"
                                               ))
#+END_SRC

この時表示されるメッセージが文字化けしていて解読不能だったが、
いろいろオプションを試した結果、下記のコマンドで再現できた。

#+BEGIN_SRC sh
$ javac -J-D user.language=en
javac: user.language=enは無効なフラグです
使用方法: javac <options> <source files>
使用可能なオプションのリストについては、-helpを使用します
#+END_SRC
このエラーが文字化けしてるものと思われる。
  
その後の調査の結果、結局下記の方法で落ちついた(prj.elに設定する)。
#+BEGIN_SRC emacs-lisp
 '(bsh-vm-args '("-Duser.language=en")) ;文字化け対策
#+END_SRC
下記サイトを参考にしました。
http://tanuzou.com/nuzou/wiki/index.php?JDEE

** DONE JDEEのコンパイルした.classファイルの出力場所を指定したい。     :jdee:
   CLOSED: [2012-12-26 水 08:20]

prj.elに下記を追加。
#+BEGIN_SRC emacs-lilsp
 '(jde-compile-option-directory "./build/classes")
#+END_SRC

** DONE JDEEの最新を取得する。                                   :emacs:jdee:
   CLOSED: [2012-12-25 火 08:20]

別にjdeeに特化した方法ではないけれども。
forkしたリポジトリのmasterを最新にする手順
#+BEGIN_SRC sh
$ git co master
$ git remote add upstream https://github.com/emacsmirror/jdee.git
$ git fetch upstream
$ git merge upstream/master
#+END_SRC

** DONE 【旧記事】Emacs中毒者に贈るJDEEによるJava開発環境の構築(24.2版) :emacs:jdee:
   CLOSED: [2000-12-23 日 08:20]

!!!この記事は古いので　[[http://mikio.github.io/article/2012/12/23_emacsjdeejava.html][こちら]] を参照してください。!!!

この投稿は [[http://qiita.com/advent-calendar/2012/emacs][Emacs Advent Calendar 2012]] の23日目の記事です。 

*** はじめに

Java開発といえばEclipse一択なこの時代、どれだけ需要があるかわかりませんが、
Emacs中毒な皆さんはできればEclipseなんか使いたくないですよね？
私は使いたくないです(笑)。私もご多分にもれず、なんでもEmacsで済ましたい人になってしまったので、
当然JavaもEmacsで開発したくなります。そこでJDEEの環境を構築しようとしたのですが、
JDEEの開発は停止しているせいか、最新のEmacs23や24だとすんなり動きません。

ならばと、malabar-modeも試したのですが、Maven環境を要求してきますし、
なんだか動作がもっさりな上に(JDEEより重い印象)ところどころエラーがでたりしてうまく動きません。

で、やっぱりJDEEがいいということで、苦労の末、
最近やっとemacsによるJava開発環境(JDEE)が構築できたのでその方法をメモしておきます。

今回は、JDEEの導入方法しか解説しませんが、最終的な私のJava開発環境は以下のとおりです。
今ところantベースのプロジェクトでしか使用しておらず、
Mavenベースのプロジェクトでは動作確認してません。

| インポート文の自動生成 | JDEE                   |
| Javadoc表示            | JDEE + w3m             |
| ビルド                 | JDEE + ant             |
| デバッガ               | JDEE + jdb             |
| REPLぽいもの           | JDEE(BeanShell)        |
| コードスニペット       | Yasnippet              |
| タグジャンプ           | gtags(global)          |
| メソッド補完           | helm-jdee-method(拙作) |

まだ導入したばかりで検証してないものもあります。
JDEEは「BeanShell(JavaInterpreter) + 大作Elisp拡張」という、
「重い + 重い」の強力タッグです。動作速度については期待しないほうが良いです。
メソッド補完については、Helmで補完するelispを自作しました。

*** 必要なもの

JDEEのビルドには下記のものが必要になります。
- emacs24.2 :: emacsは執筆時点の最新のemacs24.2を使用しています。

- [[http://jdee.sourceforge.net/][JDEE-2.4.1]] :: githubに [[https://github.com/emacsmirror/jdee/][ミラー]] がありますのでそちらを利用します。

- [[http://cedet.sourceforge.net/][CEDET 1.1]] :: CEDETは、emacs24に同梱されているのですが(Version:1.0pre7)、
JDEEが動作しないので別途インストールします。
ただし、特定のtarでないとうまく動作しません。後述します。

- [[http://sourceforge.net/projects/ant-contrib/files/ant-contrib/ant-contrib-0.6/][ant-contrib-0.6]] :: ant-contribは、
ant側のライブラリとしてビルド時に必要です。

あとはantの最新版とJDKの最新版を用意しておきます。
また環境変数 =JAVA_HOME= は必須です。
ちなみに、elib1.0はemacs22以降から組み込みなので必要ありません。

以降では、 =~/site-lisp= とういうディレクトリを作成し、
そこに必要なソースコードを展開してビルドすることにします。
#+BEGIN_SRC sh
~/site-lisp
  |
  +- cedet-1.1
  |
  +- jdee
#+END_SRC

ちなみに動作確認は、windows7,windowXP,ubuntu-server上のCUI環境でしています。
実際の構築は、Cygwin+WindowsXPで実施しました。LinuxもMacも大体同じかと思います。

*** CEDETのビルド
まずは、JDEEが依存しているパッケージCEDETを導入します。
最新のスナップショット(tarボール)や、リポジトリから取得したCEDETだとうまくいかないので、
必ず下記から取得したCEDETを使用して下さい。[fn:1]
- http://jdee.sourceforge.net/ を開く
- 左メニューの[Downloading the JDEE] リンクをクリック
- 上部の[project download area]リンクをクリック
- [Download cedet-1.1.tar.gz (2.2 MB)]リンクをクリックしてダウンロード

ダウンロードした =cedet-1.1.tar.gz= を =~/site-lisp= にcedet-1.1として展開しておきます。

続いてビルドします。Make環境がある場合は、普通にmakeして下さい。
一発目は生成ファイルの順番の関係で失敗することがあるので、
そんな時はもう一度makeして下さい。Makeには結構時間がかかります。
#+BEGIN_SRC sh
$ cd cedet-1.1
$ make
#+END_SRC

Windowsな人やMake環境がない場合は、下記のようにemacs本体を使用してビルドしてください。
詳細は、cedet-build.el本体のヘッダにコメントとして記述されています。
emacsでビルドする場合、途中でディレクトリ作成のYes/Noの入力を求められるので離席しないほうが良いです。

#+BEGIN_SRC sh
$ cd cedet-1.1
$ C:/Users/mikio/apps/emacs-24.2/bin/runemacs.exe -Q -l cedet-build.el -f cedet-build
#+END_SRC

*** JDEEのビルド
ビルドには [[http://sourceforge.net/projects/ant-contrib/files/ant-contrib/ant-contrib-0.6/][ant-contrib-0.6]] が必要です。ant-contrib-0.6.zipを展開してできた
 =ant-contrib-0.6.jar= を =~/.ant/lib/= ディレクトリに配置しておいてください。

まずはJDEEモジュールを準備します。
#+BEGIN_SRC sh
$ cd ~/site-lisp/
$ git clone https://github.com/emacsmirror/jdee.git
#+END_SRC

jdeeディレクトリに入り、1度だけantを実行してbuild.propertiesを生成します。
#+BEGIN_SRC sh
$ cd jdee
$ ant configure
#+END_SRC

build.propertiesを編集します。 =cedet.dir=, =build.bin.emacs= を環境に合わせて編集します。 
#+BEGIN_SRC sh
elib.dir=
prefix.dir=
cedet.dir=c:/Users/mikio/site-lisp/cedet-1.1
build.bin.emacs=C:/Users/mikio/apps/emacs-24.2/bin/runemacs.exe
#+END_SRC

準備ができたらビルドします。
#+BEGIN_SRC sh
ant
#+END_SRC

以上で、ビルドが完了です。

*** .emacsの設定

CEDETとJDEEのビルドができたら下記の設定を.emacsに加えます。
#+BEGIN_SRC emacs-lisp
;; ↓とにかく設定ファイルの最初のほうで読みこむ
(load-file "~/site-lisp/cedet-1.1/common/cedet.el") 

(add-to-list 'load-path "~/site-lisp/jdee/dist/jdee-2.4.1/lisp")
(load "jde-autoload")

(defun my-jde-mode-hook ()
  (require 'jde)

  (setq jde-build-function 'jde-ant-build) ; ビルドにantを利用する
  (setq jde-ant-read-target t)             ; targetを問い合わせる
  (setq jde-ant-enable-find t)             ; antに-findオプションを指定する(要らないかも)

  ;; complilationバッファを自動的にスクロールさせる
  (setq compilation-ask-about-save nil)
  (setq compilation-scroll-output 'first-error)

  (define-key jde-mode-map (kbd "C-c C-v .") 'jde-complete-minibuf)
  )

(add-hook 'jde-mode-hook 'my-jde-mode-hook)
#+END_SRC
ポイントは、CEDETを読み込む順番です。CEDETはEmacsに標準で組み込まれているため、
できるだけ早く読み込まないと、組み込み側が有効になってしまい、自分でビルドしたほうが有効になりません。

CEDETが正しく読みこまれたかどうかは =M-x cedet-version= で確認できます。
#+BEGIN_EXAMPLE
CEDET Version:  1.1
                Requested   File        Loaded
  Package       Version     Version     Version
  ----------------------------------------------------------
  cedet:          1.1     ok      ok
  eieio:          1.4     ok      ok
  semantic:       2.1     ok      ok
  srecode:        1.1     ok      ok
  ede:            1.1     ok      ok
  speedbar:       1.0.4   ok      ok
  cogre:          1.1     ok      Not Loaded
  cedet-contrib:  1.1     ok      Not Loaded
#+END_EXAMPLE

*** サンプルプロジェクトの準備

ここまで作業できたら、動作確認してみましょう。
JDEEの動作確認用に [[https://github.com/mikio/sample-java-project][Javaプロジェクト]] を準備しました。
といっても私の作ったものではなくて、
[[https://github.com/skeeto/emacs-java][java-mode-plus]] を作成してるskeetoさんの [[https://github.com/skeeto/sample-java-project][プロジェクト]] をforkしていくつか追加したものです。
fork前のプロジェクトは、アノテーションを活用してすごくシンプルに書かれた、
すばらしいプロジェクトなのですが、JDEEがアノテーションをサポートしていないため、
わざわざ改悪？して古いライブラリを使用して書きなおしています。
あくまでJDEEの動作確認用のものなので、そのまま使用するときは注意してください。

このプロジェクトはivyを使用しています。ivyとは、antベースのプロジェクトで、
Mavenのリポジトリを利用して必要なjarをダウンロードするモジュールです。
 - http://ant.apache.org/ivy/download.cgi
上記サイトから最新版をダウンロードして展開したら、 =ivy-2.3.0-rc1.jar=
 を =~/.ant/lib/= に配置したらインストール完了です。

ivyのインストールが終わったら、サンプルプロジェクトを下記のようにgithubから落してください。
#+BEGIN_SRC sh
$ git clone https://github.com/mikio/sample-java-project.git
#+END_SRC

続いてprj.elを自分の環境に合わせて編集します。
#+BEGIN_SRC emacs-lisp
(jde-project-file-version "1.0")
(jde-set-variables

 ;; --------------
 ;; project common
 ;; --------------
 '(jde-jdk (quote ("1.7")))
 '(jde-jdk-registry (quote (("1.7" . "c:/Program Files/Java/jdk1.7.0_09/")
                            )))
 '(jde-jdk-doc-url "http://docs.oracle.com/javase/jp/6/api/")
 '(jde-help-docsets '(
                      ;;("JDK API" "file://c:/Users/mikio/Dropbox/java6_ja_apidocs/ja/api" nil)
                      ("JDK API" "http://docs.oracle.com/javase/jp/6/api/" nil)
                      ))
 '(jde-help-use-frames nil)

 ;; --------------
 ;; this project only
 ;; --------------
 '(jde-sourcepath (quote ("./src" "./test")))
 '(jde-global-classpath (quote ("./build/classes" "./build/test" "./lib")))
 '(jde-lib-directory-names '("lib"))
 '(jde-expand-classpath-p t)

 '(jde-build-function (quote jde-ant-build))
 '(jde-ant-enable-find t)
 '(jde-ant-read-target t)
 '(jde-ant-working-directory "./"))
#+END_SRC

 =jde-jdk= 、 =jde-jdk-registry= をローカルの環境に合わせて編集してください。

また、今回のサンプルを使用しない場合、下記の変数を自分の環境に合わせて適宜設定すれば、
どの環境でも動くかと思います。

| jde-sourcepath          | .javaの場所                      |
| jde-global-classpath    | .class、.jarの場所               |
| jde-lib-directory-names | .jarのあるディレクトリの正規表現 |

 =jde-lib-directory-names= には =*.jar= ファイルのあるディクレトリ名を設定します。
今回の場合は、 ={PROJECT_ROOT}/lib/= にjarファイルがあるので =lib= としています。
また、 =jde-expand-classpath-p= にはtを必ず設定します。
設定しないと、BeanShell起動時に =*.jar= ファイルがClassPathに設定されません。

*** 動作確認してみる

続いてもろもろの動作確認をしていきます。
 =<PROJECT-ROOT>/src/sample/java/project/SampleJavaProject.java= を開いてください。

**** BeanShell
おもむろに、 =C-c C-v C-k= でBeanShellを起動します。
まれにJavaファイルを開いてもJde-modeにならないことがあります。
原因はわからないのですが、もしキーバインドが効かなかった場合は、
手動で =M-x jde-mode= してから再度、 =C-c C-v C-k= して下さい。

BeanShellは、JDEEを使用する上でEmacsとJavaの橋渡し的な位置づけにあるようで、
様々な動作の裏で動くみたいです。ただし非常に起動が重いので最初に起動しておくと良いです。
起動をかけると =Starting the BeanShell. Pleasewait...= のメッセージがミニバッファに表示されるので、
 =bsh %= のプロンプトがでるまで待ちます。コーヒーの一杯でも用意したほうがいいかもです(2回目移行は速い)。

[[file:img/jdee/bean-shell.png]]

BeanShellを起動しておくと、ちょっとしたAPIの挙動を調べるとき便利です。
例えば環境変数 =JAVA_HOME= を調べるAPIの動作確認をしたい時は、
#+BEGIN_SRC sh
bsh % System.out.println(System.getenv().get("JAVA_HOME"));
C:\Program Files\Java\jdk1.7.0_09
#+END_SRC
という風に簡単に確認できます(いちいちSystem.out.printlnしないと結果がわからないですが)。

ちなみに、なにか動作がおかしいな(インポートやメソッドの補完が効かないなど)と思ったら、
このBeanShellを再起動すれば( =M-x jde-bsh-exit= でBeanShellを終了できる)治ることがあります。
この辺はSLIMEに似てますね。

**** 依存ライブラリのダウンロード
続いてプロジェクトに必要なjarをリポジトリからローカルにもってきます。
通常は、下記のようにコマンドラインから入力しますが、これをJDEEから操作してみましょう。
#+BEGIN_SRC sh
$ ant lib
#+END_SRC
 =C-c C-v C-b= でantを実行できます。
ミニバッファにantのターゲットを求めるプロンプトが表示されるので =C-i= してください。
ターゲットの一覧が表示されます。

[[file:img/jdee/ant-target.png]]

プロンプトで =lib= と入力してエンターしてください。

[[file:img/jdee/ant-lib.png]]

無事成功すれば、 =<PROJECT_ROOT>/lib= に必要なjarファイルがダウンロードされているはずです。
#+BEGIN_SRC sh
$ ls -la lib
total 26716
drwxr-xr-x+ 1 mikio None       0 Dec 22 11:06 .
drwxr-xr-x+ 1 mikio None       0 Nov 28 23:04 ..
-rwxr-xr-x  1 mikio None   74080 Jan 10  2012 annotations-2.0.0.jar
                  :
                  :
-rwxr-xr-x  1 mikio None  124724 Nov 23  2005 xmlParserAPIs-2.6.2.jar
-rwxr-xr-x  1 mikio None  108874 Nov 16  2006 xom-1.0.jar
#+END_SRC

**** ビルドエラー
つぎにビルドに失敗してエラー表示された時の挙動を試してみましょう。
まず、わざとビルドを失敗させるために、ソース冒頭のimport文を全て削除します。
次に、 =C-c C-v C-b RET= でビルドしてみてください。

当然エラーが表示されますが、エラーが表示された場合、 =M-g M-n, M-g M-p= 
ですばやくジャンプできます。

[[file:img/jdee/ant-error.png]]

**** importの自動挿入とビルド
import文を自動挿入するには、 =C-c C-v z= してください。
通常は、JDEEが自動で必要なクラスをどばっと挿入してくれます。
ただし今回の場合は、候補が複数あるのでCUIによる選択画面が表示されます。
必要なクラスのカッコのところでRETを叩いて選択してください
( =org.apache.commons= で始まるものを選択してください)。
最後にOKの上でRETで決定です。

[[file:img/jdee/import.png]]

import文の挿入が成功したら =C-c C-v C-b= でビルドプロンプトを表示し、
何もターゲットを入力せずにエンターしてください。
今度はビルドが成功するはずです。

**** APIドキュメントの参照
カーソルをStringのところに合わせて =C-c C-v C-w= してください。
StringクラスのJavadocがブラウザ上に開きます。
emacserなら当然w3mですよね？ローカルにダウンロードしたAPIを指定すると更に快適です。

[[file:img/jdee/javadoc.png]]

# **** javaDocコメントの挿入
#  =C-c C-v j= でJavaDocのコメントが挿入されます。

**** メソッド補完
 =C-c C-v .= でメソッドの補完ができます。
 =options.= とピリオドまで打ったところで =C-c C-v .= します。 

[[file:img/jdee/method.png]]

ミニバッファに =[...]= が表示されます。ここで =C-i= してください。
候補が一覧表示されます。引数も含めて入力してください。
適当なところで =C-i= しながら候補がひとつに絞りこめたところでエンターすれば、
選んだメソッドを入力できます。これはこれで感動ものですが[fn:2] 
・・・とっても使いづらいですね。でも安心してください。helm版を作りました。

*** メソッド補完(Helm版)
ミニバッファでメソッドを補完する機能は確かに便利ですが、
今となってはこのインターフェイスは古くさいですね。
そこでこの機能をHelmで実現してみました。

- [[https://github.com/mikio/emacs-helm-jdee-method][helm-jdee-method.el]]  [fn:3]

今回は時間がなかったので手動インストールですが、そのうちMELPAに登録します。

このelisp拡張はHelmとYasnippetに依存しています
(導入してない方はこの機会にインストールすることをお勧めします)。
まず[[https://raw.github.com/mikio/emacs-helm-jdee-method/master/helm-jdee-method.el][helm-jdee-moethod.el]] をロードパスのとおったところに置いて、
今回設定した =.emacs= の =my-jde-mode-hook= 関数の冒頭で下記の設定をしてください。

#+BEGIN_SRC emacs-lisp
(defun my-jde-mode-hook ()
  (require 'helm-jdee-method) ;; これを追加
  (require 'jde)
  (define-key jde-mode-map (kbd "C-c C-v C-i") 'helm-jdee-method) ;; これを追加
  )
#+END_SRC

これで例えば、 =options.= とピリオドまで打ったところで =C-c C-v C-i= すると、
メソッドの候補一覧がhelmで表示されます。

[[file:img/jdee/helm1.png]]


適当に選ぶとメソッドが挿入されるのですが、Yasnippetで動的にテンプレートを作成しているので、
引数ごとに値を入力できます。引数を入力したらTabで移動してください。

[[file:img/jdee/helm2.png]]

先程のミニバッファ版に比べると、Eclipseのインテリセンス機能みたいで、
なかなか便利なんじゃないでしょうか？
また、自前のクラスもBeanShellを再起動すれば補完されますし、
ClassPathさえ正しく設定されてれば、AndroidSDKなんかのAPIも適切に補完してくれると思います
(Androidに関して私はまだ試してません。DalvikVMなので駄目かも？)。

ちなみに補完機能をauto-completeにしなかった理由は、メソッド補完がかなり高コストだからです。
これを自動でやると、とてももっさりになってしまうので、
ユーザが必要なときに「よっこらしょ」って感じで利用することを想定しました。

*** 操作方法まとめ
ここまでの機能の操作方法をまとめました。
| メソッドの補完       | C-c C-v .                 |
| メソッドの補完(Helm) | C-c C-v C-i               |
| ビルド(ant)          | C-c C-v C-b               |
| BeanShell起動        | C-c C-v C-k               |
| BeanShell終了        | M-x jde-bsh-exit          |
| prj.elの再読込       | M-x jde-load-project-file |
| 自動import           | C-c C-v z                 |
| javadocの表示        | C-c C-v C-w               |
これだけでも大分便利に使えるのではと思います。

これに加えて、デバッガの起動やJunitのファイル単位の実行などが使えれば更に便利だと思いますが、
自分はまだ試していません。

また、これらJDEEの基本機能に加えて、私は、AutoComplete, Yasnippet,Gtagsなどを導入しており、
かなり快適に使えてます[fn:4]flymakeも試したのですが、動作が重いのでいまのところ常用してません。

*** 所感
ここまで紹介しておいてなんですが、JDEEは現在では開発が停止してます。
そのため新しい文法はサポートされてません(アノテーション、ジェネリクス、拡張for文など)。
特にアノテーションを利用したJavaコードだと、Import文などはうまく補完できなかったりします。
個人的には再開を願っているのですが、全然その気配がありません。。。
そんなJDEEとは対象的にCEDETの開発は盛んで、JAVAの対応も結構進んでいるようです
(メーリングリストでよく話題をみかけます)。
なので将来的には、JDEEをやめてCEDETメインの環境に移行するかもしれません。

以上、長文をここまで読んで頂いてありがとうございました。

*** 参考URL
- JDEEインストールしてからの設定とか下記のサイトが大変参考になった。
 - http://epian-wiki.appspot.com/wiki/Emacs/JDEE

- 操作方法はメニューを開けば大体わかる。詳しくは以下のサイトが詳しい。
 - http://www.02.246.ne.jp/~torutk/jdee/jdee.html

- 割と最近のMLのやりとり。
 - http://sourceforge.net/mailarchive/message.php?msg_id=28645729


[fn:1] 最新のCEDETも今回ダウンロードするCEDETも同じVer1.1ですが、リポジトリから取得したものは、ディレクトリ構成などが大幅に変わっています。
[fn:2] JDEE紹介サイトの多くが、メソッド補完のスクリーンショットにGUIメニュー版を載せていたので、CUIではメソッド補完は使えないものと勘違いしてました。
[fn:3] すみません、anything版は作成してません。要望があれば対応するかもです。
[fn:4] Yasnippetはnekopさんの定義した [[https://github.com/nekop/yasnippet-java-mode][Javaのやつ]] を利用しています。ありがとうございます。

*** 更新履歴
-  2013/01/15 =jde-lib-directory-names= の説明が間違っていたため、修正しました。失礼しました。
** DONE Emacs中毒者に贈るJDEEによるJava開発環境の構築            :emacs:jdee:
   CLOSED: [2012-12-23 日 08:20]

この投稿は [[http://qiita.com/advent-calendar/2012/emacs][Emacs Advent Calendar 2012]] の23日目の記事です。 

*** 追記(2013/08/01)
いつの間にか本家JDEEがCEDET2.0に対応していました。
emacs24.3にはCEDET2.0が最初から導入されているため、CEDETを別途導入する必要はなくなります。
これによりJDEEの導入がグッっと簡単になりました。

そこで最新のemacs24.3対応ということでもう一度記事の内容を整理しました。
特に理由のない限り、最新のemacsとJDEEを利用するのが良いかと思います。

また嬉しいことにJDEE(に代わるJavaの開発環境)の開発(議論)がスタートしているみたいです。
今後に期待しましょう。
- http://sourceforge.net/mailarchive/message.php?msg_id=30783951

*** はじめに
Java開発といえばEclipse一択なこの時代、どれだけ需要があるかわかりませんが、
Emacs中毒な皆さんはできればEclipseなんか使いたくないですよね？
私は使いたくないです(笑)。私もご多分にもれず、なんでもEmacsで済ましたい人になってしまったので、
当然JavaもEmacsで開発したくなります。そこでJDEEの環境を構築しようとしたのですが、
JDEEの開発は停止しているせいか、最新のEmacs23や24だとすんなり動きません。

ならばと、malabar-modeも試したのですが、Maven環境を要求してきますし、
なんだか動作がもっさりな上に(JDEEより重い印象)ところどころエラーがでたりしてうまく動きません。

で、やっぱりJDEEがいいということで、苦労の末、
最近やっとemacsによるJava開発環境(JDEE)が構築できたのでその方法をメモしておきます。

今回は、JDEEの導入方法しか解説しませんが、最終的な私のJava開発環境は以下のとおりです。
今ところantベースのプロジェクトでしか使用しておらず、
Mavenベースのプロジェクトでは動作確認してません。

| インポート文の自動生成 | JDEE                   |
| Javadoc表示            | JDEE + w3m             |
| ビルド                 | JDEE + ant             |
| デバッガ               | JDEE + jdb             |
| REPLぽいもの           | JDEE(BeanShell)        |
| コードスニペット       | Yasnippet              |
| タグジャンプ           | gtags(global)          |
| メソッド補完           | helm-jdee-method(拙作) |

まだ導入したばかりで検証してないものもあります。
JDEEは「BeanShell(JavaInterpreter) + 大作Elisp拡張」という、
「重い + 重い」の強力タッグです。動作速度については期待しないほうが良いです。
メソッド補完については、Helmで補完するelispを自作しました。

*** 必要なもの

JDEEのビルドには下記のものが必要になります。
- emacs24.3 :: emacsは執筆時点の最新のemacs24.3を使用しています。

- [[http://jdee.sourceforge.net/][JDEE-2.4.2]] :: githubに [[https://github.com/emacsmirror/jdee/][ミラー]] がありますのでそちらを利用します。

- [[http://cedet.sourceforge.net/][CEDET]] :: CEDETは、24.3同梱のものを使用するので別途用意する必要はありません。

- [[http://sourceforge.net/projects/ant-contrib/files/ant-contrib/ant-contrib-0.6/][ant-contrib-0.6]] :: ant-contribは、
ant側のライブラリとしてビルド時に必要です。

あとはantの最新版とJDKの最新版を用意しておきます。
また環境変数 =JAVA_HOME= は必須です。
ちなみに、elib1.0はemacs22以降から組み込みなので必要ありません。

以降では、 =~/site-lisp= とういうディレクトリを作成し、
そこに必要なソースコードを展開してビルドすることにします。
#+BEGIN_SRC sh
~/site-lisp
  |
  +- jdee
#+END_SRC

ちなみに動作確認は、windows7,windowXP,ubuntu-server上のCUI環境でしています。
実際の構築は、Cygwin+WindowsXPで実施しました。LinuxもMacも大体同じかと思います。

*** JDEEのビルド
ビルドには [[http://sourceforge.net/projects/ant-contrib/files/ant-contrib/ant-contrib-0.6/][ant-contrib-0.6]] が必要です。ant-contrib-0.6.zipを展開してできた
 =ant-contrib-0.6.jar= を =~/.ant/lib/= ディレクトリに配置しておいてください。
ここでは、~/srcにソースファイル群を展開し、~/site-lisp/jdeeにインストールすことにします。

まずはJDEEモジュールを準備します。
#+BEGIN_SRC sh
$ cd ~/src
$ git clone https://github.com/emacsmirror/jdee.git
#+END_SRC

jdeeディレクトリに入り =ant confugre= を実行してbuild.propertiesを生成します。
#+BEGIN_SRC sh
$ cd jdee
$ ant configure
#+END_SRC

build.propertiesを編集します。 =cedet.dir=, =build.bin.emacs= を環境に合わせて編集します。 
#+BEGIN_SRC sh
# 絶対パスで記述すること
elib.dir=
prefix.dir=C:/Users/mikio/Dropbox/site-lisp/jdee
cedet.dir=
build.bin.emacs=c:/Users/mikio/apps/emacs-24.3/bin/runemacs.exe
#+END_SRC

準備ができたらビルドします。
#+BEGIN_SRC sh
ant
#+END_SRC

最後に =prefix.dir= で定義したディレクトリにインストールします。
このときインストール先のディレクトリは無くても勝手に作ってくれます。
#+BEGIN_SRC sh
ant install
#+END_SRC
以上で完了です。

*** .emacsの設定

CEDETとJDEEのビルドができたら下記の設定を.emacsに加えます。
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/site-lisp/jdee/lisp")
(load "jde-autoload")

(defun my-jde-mode-hook ()
  (require 'jde)

  (setq jde-build-function 'jde-ant-build) ; ビルドにantを利用する
  (setq jde-ant-read-target t)             ; targetを問い合わせる
  (setq jde-ant-enable-find t)             ; antに-findオプションを指定する(要らないかも)

  ;; complilationバッファを自動的にスクロールさせる
  (setq compilation-ask-about-save nil)
  (setq compilation-scroll-output 'first-error)

  (define-key jde-mode-map (kbd "C-c C-v .") 'jde-complete-minibuf)
  )

(add-hook 'jde-mode-hook 'my-jde-mode-hook)
#+END_SRC

*** サンプルプロジェクトの準備

ここまで作業できたら、動作確認してみましょう。
JDEEの動作確認用に [[https://github.com/mikio/sample-java-project][Javaプロジェクト]] を準備しました。
といっても私の作ったものではなくて、
[[https://github.com/skeeto/emacs-java][java-mode-plus]] を作成してるskeetoさんの [[https://github.com/skeeto/sample-java-project][プロジェクト]] をforkしていくつか追加したものです。
fork前のプロジェクトは、アノテーションを活用してすごくシンプルに書かれた、
すばらしいプロジェクトなのですが、JDEEがアノテーションをサポートしていないため、
わざわざ改悪？して古いライブラリを使用して書きなおしています。
あくまでJDEEの動作確認用のものなので、そのまま使用するときは注意してください。

このプロジェクトはivyを使用しています。ivyとは、antベースのプロジェクトで、
Mavenのリポジトリを利用して必要なjarをダウンロードするモジュールです。
 - http://ant.apache.org/ivy/download.cgi
上記サイトから最新版をダウンロードして展開したら、 =ivy-2.3.0-rc1.jar=
 を =~/.ant/lib/= に配置したらインストール完了です。

ivyのインストールが終わったら、サンプルプロジェクトを下記のようにgithubから落してください。
#+BEGIN_SRC sh
$ git clone https://github.com/mikio/sample-java-project.git
#+END_SRC

続いてprj.elを自分の環境に合わせて編集します。
#+BEGIN_SRC emacs-lisp
(jde-project-file-version "1.0")
(jde-set-variables

 ;; --------------
 ;; project common
 ;; --------------
 '(jde-jdk (quote ("1.7")))
 '(jde-jdk-registry (quote (("1.7" . "c:/Program Files/Java/jdk1.7.0_09/")
                            )))
 '(jde-jdk-doc-url "http://docs.oracle.com/javase/jp/6/api/")
 '(jde-help-docsets '(
                      ;;("JDK API" "file://c:/Users/mikio/Dropbox/java6_ja_apidocs/ja/api" nil)
                      ("JDK API" "http://docs.oracle.com/javase/jp/6/api/" nil)
                      ))
 '(jde-help-use-frames nil)

 ;; --------------
 ;; this project only
 ;; --------------
 '(jde-sourcepath (quote ("./src" "./test")))
 '(jde-global-classpath (quote ("./build/classes" "./build/test" "./lib")))
 '(jde-lib-directory-names '("lib"))
 '(jde-expand-classpath-p t)

 '(jde-build-function (quote jde-ant-build))
 '(jde-ant-enable-find t)
 '(jde-ant-read-target t)
 '(jde-ant-working-directory "./"))
#+END_SRC

 =jde-jdk= 、 =jde-jdk-registry= をローカルの環境に合わせて編集してください。

また、今回のサンプルを使用しない場合、下記の変数を自分の環境に合わせて適宜設定すれば、
どの環境でも動くかと思います。

| jde-sourcepath          | .javaの場所                      |
| jde-global-classpath    | .class、.jarの場所               |
| jde-lib-directory-names | .jarのあるディレクトリの正規表現 |

 =jde-lib-directory-names= には =*.jar= ファイルのあるディクレトリ名を設定します。
今回の場合は、 ={PROJECT_ROOT}/lib/= にjarファイルがあるので =lib= としています。
また、 =jde-expand-classpath-p= にはtを必ず設定します。
設定しないと、BeanShell起動時に =*.jar= ファイルがClassPathに設定されません。

*** 動作確認してみる

続いてもろもろの動作確認をしていきます。
 =<PROJECT-ROOT>/src/sample/java/project/SampleJavaProject.java= を開いてください。

**** BeanShell
おもむろに、 =C-c C-v C-k= でBeanShellを起動します。
まれにJavaファイルを開いてもJde-modeにならないことがあります。
原因はわからないのですが、もしキーバインドが効かなかった場合は、
手動で =M-x jde-mode= してから再度、 =C-c C-v C-k= して下さい。

BeanShellは、JDEEを使用する上でEmacsとJavaの橋渡し的な位置づけにあるようで、
様々な動作の裏で動くみたいです。ただし非常に起動が重いので最初に起動しておくと良いです。
起動をかけると =Starting the BeanShell. Pleasewait...= のメッセージがミニバッファに表示されるので、
 =bsh %= のプロンプトがでるまで待ちます。コーヒーの一杯でも用意したほうがいいかもです(2回目移行は速い)。

[[file:img/jdee/bean-shell.png]]

BeanShellを起動しておくと、ちょっとしたAPIの挙動を調べるとき便利です。
例えば環境変数 =JAVA_HOME= を調べるAPIの動作確認をしたい時は、
#+BEGIN_SRC sh
bsh % System.out.println(System.getenv().get("JAVA_HOME"));
C:\Program Files\Java\jdk1.7.0_09
#+END_SRC
という風に簡単に確認できます(いちいちSystem.out.printlnしないと結果がわからないですが)。

ちなみに、なにか動作がおかしいな(インポートやメソッドの補完が効かないなど)と思ったら、
このBeanShellを再起動すれば( =M-x jde-bsh-exit= でBeanShellを終了できる)治ることがあります。
この辺はSLIMEに似てますね。

**** 依存ライブラリのダウンロード
続いてプロジェクトに必要なjarをリポジトリからローカルにもってきます。
通常は、下記のようにコマンドラインから入力しますが、これをJDEEから操作してみましょう。
#+BEGIN_SRC sh
$ ant lib
#+END_SRC
 =C-c C-v C-b= でantを実行できます。
ミニバッファにantのターゲットを求めるプロンプトが表示されるので =C-i= してください。
ターゲットの一覧が表示されます。

[[file:img/jdee/ant-target.png]]

プロンプトで =lib= と入力してエンターしてください。

[[file:img/jdee/ant-lib.png]]

無事成功すれば、 =<PROJECT_ROOT>/lib= に必要なjarファイルがダウンロードされているはずです。
#+BEGIN_SRC sh
$ ls -la lib
total 26716
drwxr-xr-x+ 1 mikio None       0 Dec 22 11:06 .
drwxr-xr-x+ 1 mikio None       0 Nov 28 23:04 ..
-rwxr-xr-x  1 mikio None   74080 Jan 10  2012 annotations-2.0.0.jar
                  :
                  :
-rwxr-xr-x  1 mikio None  124724 Nov 23  2005 xmlParserAPIs-2.6.2.jar
-rwxr-xr-x  1 mikio None  108874 Nov 16  2006 xom-1.0.jar
#+END_SRC

**** ビルドエラー
つぎにビルドに失敗してエラー表示された時の挙動を試してみましょう。
まず、わざとビルドを失敗させるために、ソース冒頭のimport文を全て削除します。
次に、 =C-c C-v C-b RET= でビルドしてみてください。

当然エラーが表示されますが、エラーが表示された場合、 =M-g M-n, M-g M-p= 
ですばやくジャンプできます。

[[file:img/jdee/ant-error.png]]

**** importの自動挿入とビルド
import文を自動挿入するには、 =C-c C-v z= してください。
通常は、JDEEが自動で必要なクラスをどばっと挿入してくれます。
ただし今回の場合は、候補が複数あるのでCUIによる選択画面が表示されます。
必要なクラスのカッコのところでRETを叩いて選択してください
( =org.apache.commons= で始まるものを選択してください)。
最後にOKの上でRETで決定です。

[[file:img/jdee/import.png]]

import文の挿入が成功したら =C-c C-v C-b= でビルドプロンプトを表示し、
何もターゲットを入力せずにエンターしてください。
今度はビルドが成功するはずです。

**** APIドキュメントの参照
カーソルをStringのところに合わせて =C-c C-v C-w= してください。
StringクラスのJavadocがブラウザ上に開きます。
emacserなら当然w3mですよね？ローカルにダウンロードしたAPIを指定すると更に快適です。

[[file:img/jdee/javadoc.png]]

# **** javaDocコメントの挿入
#  =C-c C-v j= でJavaDocのコメントが挿入されます。

**** メソッド補完
 =C-c C-v .= でメソッドの補完ができます。
 =options.= とピリオドまで打ったところで =C-c C-v .= します。 

[[file:img/jdee/method.png]]

ミニバッファに =[...]= が表示されます。ここで =C-i= してください。
候補が一覧表示されます。引数も含めて入力してください。
適当なところで =C-i= しながら候補がひとつに絞りこめたところでエンターすれば、
選んだメソッドを入力できます。これはこれで感動ものですが[fn:2] 
・・・とっても使いづらいですね。でも安心してください。helm版を作りました。

*** メソッド補完(Helm版)
ミニバッファでメソッドを補完する機能は確かに便利ですが、
今となってはこのインターフェイスは古くさいですね。
そこでこの機能をHelmで実現してみました。

- [[https://github.com/mikio/emacs-helm-jdee-method][helm-jdee-method.el]]  [fn:3]

今回は時間がなかったので手動インストールですが、そのうちMELPAに登録します。

このelisp拡張はHelmとYasnippetに依存しています
(導入してない方はこの機会にインストールすることをお勧めします)。
まず[[https://raw.github.com/mikio/emacs-helm-jdee-method/master/helm-jdee-method.el][helm-jdee-moethod.el]] をロードパスのとおったところに置いて、
今回設定した =.emacs= の =my-jde-mode-hook= 関数の冒頭で下記の設定をしてください。

#+BEGIN_SRC emacs-lisp
(defun my-jde-mode-hook ()
  (require 'helm-jdee-method) ;; これを追加
  (require 'jde)
  (define-key jde-mode-map (kbd "C-c C-v C-i") 'helm-jdee-method) ;; これを追加
  )
#+END_SRC

これで例えば、 =options.= とピリオドまで打ったところで =C-c C-v C-i= すると、
メソッドの候補一覧がhelmで表示されます。

[[file:img/jdee/helm1.png]]


適当に選ぶとメソッドが挿入されるのですが、Yasnippetで動的にテンプレートを作成しているので、
引数ごとに値を入力できます。引数を入力したらTabで移動してください。

[[file:img/jdee/helm2.png]]

先程のミニバッファ版に比べると、Eclipseのインテリセンス機能みたいで、
なかなか便利なんじゃないでしょうか？
また、自前のクラスもBeanShellを再起動すれば補完されますし、
ClassPathさえ正しく設定されてれば、AndroidSDKなんかのAPIも適切に補完してくれると思います
(Androidに関して私はまだ試してません。DalvikVMなので駄目かも？)。

ちなみに補完機能をauto-completeにしなかった理由は、メソッド補完がかなり高コストだからです。
これを自動でやると、とてももっさりになってしまうので、
ユーザが必要なときに「よっこらしょ」って感じで利用することを想定しました。

*** 操作方法まとめ
ここまでの機能の操作方法をまとめました。
| メソッドの補完       | C-c C-v .                 |
| メソッドの補完(Helm) | C-c C-v C-i               |
| ビルド(ant)          | C-c C-v C-b               |
| BeanShell起動        | C-c C-v C-k               |
| BeanShell終了        | M-x jde-bsh-exit          |
| prj.elの再読込       | M-x jde-load-project-file |
| 自動import           | C-c C-v z                 |
| javadocの表示        | C-c C-v C-w               |
これだけでも大分便利に使えるのではと思います。

これに加えて、デバッガの起動やJunitのファイル単位の実行などが使えれば更に便利だと思いますが、
自分はまだ試していません。

また、これらJDEEの基本機能に加えて、私は、AutoComplete, Yasnippet,Gtagsなどを導入しており、
かなり快適に使えてます[fn:4]flymakeも試したのですが、動作が重いのでいまのところ常用してません。

*** 所感
ここまで紹介しておいてなんですが、JDEEは現在では開発が停止してます。
そのため新しい文法はサポートされてません(アノテーション、ジェネリクス、拡張for文など)。
特にアノテーションを利用したJavaコードだと、Import文などはうまく補完できなかったりします。
個人的には再開を願っているのですが、全然その気配がありません。。。
そんなJDEEとは対象的にCEDETの開発は盛んで、JAVAの対応も結構進んでいるようです
(メーリングリストでよく話題をみかけます)。
なので将来的には、JDEEをやめてCEDETメインの環境に移行するかもしれません。

以上、長文をここまで読んで頂いてありがとうございました。

*** 参考URL
- JDEEインストールしてからの設定とか下記のサイトが大変参考になった。
 - http://epian-wiki.appspot.com/wiki/Emacs/JDEE

- 操作方法はメニューを開けば大体わかる。詳しくは以下のサイトが詳しい。
 - http://www.02.246.ne.jp/~torutk/jdee/jdee.html

- 割と最近のMLのやりとり。
 - http://sourceforge.net/mailarchive/message.php?msg_id=28645729


[fn:1] 最新のCEDETも今回ダウンロードするCEDETも同じVer1.1ですが、リポジトリから取得したものは、ディレクトリ構成などが大幅に変わっています。
[fn:2] JDEE紹介サイトの多くが、メソッド補完のスクリーンショットにGUIメニュー版を載せていたので、CUIではメソッド補完は使えないものと勘違いしてました。
[fn:3] すみません、anything版は作成してません。要望があれば対応するかもです。
[fn:4] Yasnippetはnekopさんの定義した [[https://github.com/nekop/yasnippet-java-mode][Javaのやつ]] を利用しています。ありがとうございます。

*** 更新履歴
-  2013/01/15 =jde-lib-directory-names= の説明が間違っていたため、修正しました。失礼しました。
-  2013/08/01 本家JDEEがCEDET2.0に対応したので記事も併せて修正しました。

** DONE githubでclone時に怒られる。                                  :hamari:
   CLOSED: [2012-12-22 土 22:26]

cygwinでgit cloneしたらなぜか下記のようなエラーがでてしまいました。
#+BEGIN_SRC sh
$ git clone https://github.com/emacsmirror/jdee.git
Cloning into 'jdee'...
error: error setting certificate verify locations:
  CAfile: /usr/ssl/certs/ca-bundle.crt
  CApath: none while accessing https://github.com/emacsmirror/jdee.git/info/refs
fatal: HTTP request failed
#+END_SRC

下記を参考に =curl-ca-bundle.crt= を配置したらうまくいきました。
- http://d.hatena.ne.jp/limitusus/20120529/1338306372
#+BEGIN_SRC sh
$ cd /usr/ssl/certs/
$ curl http://curl.haxx.se/ca/cacert.pem -o ca-bundle.crt
$ git config --system http.sslcainfo /usr/ssl/certs/ca-bundle.crt
#+END_SRC

** DONE jruby版のgem                                                  :jruby:
   CLOSED: [2012-12-22 土 22:26]

jrubyにはjruby版のgemが必要でした。
#+BEGIN_SRC sh
$ sudo -E /usr/local/jruby-1.7.1/bin/gem install nokogiri
#+END_SRC
-E は環境変数を引き継ぐオプション。これがないと、PATHやJAVA_HOMEを引き継がないので実行できない。

インストールしたら、下記で確認する。
#+BEGIN_SRC sh
$ sudo -E /usr/local/jruby-1.7.1/bin/gem list
 *** LOCAL GEMS ***

nokogiri (1.5.5 java)
rake (0.9.2.2)
#+END_SRC

** DONE dropboxをcuiで起動する。                                    :dropbox:
   CLOSED: [2012-12-22 土 22:26]

#+BEGIN_SRC sh
$ ~/.dropbox-dist/dropbox.py start   
#+END_SRC

** DONE cygwinでssh接続できない                           :cygwin:hamari:ssh:
   CLOSED: [2012-12-22 土 22:27]

 =/home/mikio= にホームを設定してるのではなく、 =c:/Users/mikio= にHOMEを設定し
てる場合でssh接続すると、下記のように =/home/mikio= ディレクトリが作成でき
ないと怒られてしまう。
#+BEGIN_SRC sh
$ ssh -v 192.168.10.2 -p 30890 -i ~/.ssh/id_rsa.whitebase
OpenSSH_6.1p1, OpenSSL 1.0.1c 10 May 2012
debug1: Connecting to 192.168.10.2 [192.168.10.2] port 30890.
debug1: Connection established.
Could not create directory '/home/mikio/.ssh'.
#+END_SRC
この場合は、 =/etc/passwd= の =/home/mikio= となってるところを、
 =/cygdrive/c/Users/mikio= に書き換えれば良い。
- http://ekawas.blogspot.jp/2007/03/solving-pesky-ssh-issues-in-cygwin.html

しかし今度はpublickeyがパーミッションエラー。
#+BEGIN_SRC sh
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /cygdrive/c/Users/miki/.ssh/id_rsa.whitabase
debug1: No more authentication methods to try.
Permission denied (publickey).
#+END_SRC
下記よるとホスト側で =/etc/ssh/sshd_config= の設定でユーザを許可してな
いのが原因とあったので調べたところドンピシャでした。

- http://lunatear.net/archives/000300.html

早速編集して再起動したところ、まだ駄目。
#+BEGIN_SRC sh
# AllowUsersにユーザを追加
$ sudo vi /etc/ssh/sshd_config

# 再起動 
$ sudo /etc/init.d/ssh restart
 ：
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /cygdrive/c/Users/miki/.ssh/id_rsa.whitabase
debug1: No more authentication methods to try.
Permission denied (publickey).
#+END_SRC

接続ホスト側でログを確認してみる。

 =/etc/ssh/sshd_config= を編集
#+BEGIN_SRC sh
SyslogFacility AUTH
LogLevel VERBOSE
#+END_SRC

#+BEGIN_SRC sh
$ sudo tail -f /var/log/auth.log
 :
Dec  1 21:54:00 whitebase sshd[20701]: Set /proc/self/oom_score_adj to 0
Dec  1 21:54:00 whitebase sshd[20701]: Connection from 192.168.10.229 port 64522
Dec  1 21:54:01 whitebase sshd[20701]: Connection closed by 192.168.10.229 [preauth]
 :
#+END_SRC
...ログをみてもよくわからなかった。

今度は、サーバー側でもデバッグモードにして接続してみる。
#+BEGIN_SRC sh
mikio@whitebase:~/.ssh$ whereis sshd
sshd: /usr/sbin/sshd /usr/share/man/man8/sshd.8.gz
mikio@whitebase:~/.ssh$ sudo /usr/sbin/sshd -d
debug1: sshd version OpenSSH_5.9p1 Debian-5ubuntu1
debug1: read PEM private key done: type RSA
debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048
debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048
debug1: private host key: #0 type 1 RSA
debug1: read PEM private key done: type DSA
debug1: Checking blacklist file /usr/share/ssh/blacklist.DSA-1024
debug1: Checking blacklist file /etc/ssh/blacklist.DSA-1024
debug1: private host key: #1 type 2 DSA
debug1: read PEM private key done: type ECDSA
debug1: Checking blacklist file /usr/share/ssh/blacklist.ECDSA-256
debug1: Checking blacklist file /etc/ssh/blacklist.ECDSA-256
debug1: private host key: #2 type 3 ECDSA
debug1: rexec_argv[0]='/usr/sbin/sshd'
debug1: rexec_argv[1]='-d'
Set /proc/self/oom_score_adj from 0 to -1000
debug1: Bind to port 30890 on 0.0.0.0.
Server listening on 0.0.0.0 port 30890.
debug1: Bind to port 30890 on ::.
Server listening on :: port 30890.
debug1: Server will not fork when running in debugging mode.
debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8
debug1: inetd sockets after dupping: 3, 3
Connection from 192.168.10.229 port 64488
debug1: Client protocol version 2.0; client software version OpenSSH_6.1
debug1: match: OpenSSH_6.1 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1
debug1: permanently_set_uid: 105/65534 [preauth]
debug1: list_hostkey_types: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256 [preauth]
debug1: SSH2_MSG_KEXINIT sent [preauth]
debug1: SSH2_MSG_KEXINIT received [preauth]
debug1: kex: client->server aes128-ctr hmac-md5 none [preauth]
debug1: kex: server->client aes128-ctr hmac-md5 none [preauth]
debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
debug1: SSH2_MSG_NEWKEYS sent [preauth]
debug1: expecting SSH2_MSG_NEWKEYS [preauth]
debug1: SSH2_MSG_NEWKEYS received [preauth]
debug1: KEX done [preauth]
debug1: userauth-request for user mikio service ssh-connection method none [preauth]
debug1: attempt 0 failures 0 [preauth]
debug1: PAM: initializing for "mikio"
debug1: PAM: setting PAM_RHOST to "miki-pc.lan"
debug1: PAM: setting PAM_TTY to "ssh"
Connection closed by 192.168.10.229 [preauth]
debug1: do_cleanup [preauth]
debug1: monitor_read_log: child log fd closed
debug1: do_cleanup
debug1: PAM: cleanup
#+END_SRC
うーん、よくわからん。

今度は、クライアント側のデバッグログの出力レベルをあげて試す。
(vの数がレベルになる。知らなかった。)
#+BEGIN_SRC sh
$ ssh -vvv whitebase
  :
  :
debug1: Next authentication method: publickey
debug1: Trying private key: /cygdrive/c/Users/miki/.ssh/id_rsa.whitabase
debug3: no such identity: /cygdrive/c/Users/miki/.ssh/id_rsa.whitabase
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey).
#+END_SRC
おおおお!、なんという初歩的ミス!。 =.ssh/config= の秘密鍵の名前をタイポ。
#+BEGIN_SRC sh
- IdentityFile ~/.ssh/id_rsa.whitabase
+ IdentityFile ~/.ssh/id_rsa.whitebase
#+END_SRC
これで無事接続できました。
*** まとめ
- パーミッションを疑え!
  -  =$HOME= -> =700=
  -  =$HOME/.ssh= -> =700=
  -  =$HOME/.ssh/id_rsa= -> =644=
  - サーバ側の =$HOME/.ssh/authorized_keys= -> 644
- ログイン許可してるユーザを確認しろ!
  - サーバ側の =/etc/ssh/sshd_config= の =AllowUsers= 
- クライアント側のログを確認しろ!
  -  =ssh -v HOSTNAME=
  - vオプションの数でデバッグレベルを調節できる!
    -  =ssh -v HOSTNAME=
    -  =ssh -vv HOSTNAME=
    -  =ssh -vvv HOSTNAME= 
- サーバ側のログを確認しろ!
  - サーバ側の =/etc/ssh/sshd_config=
    -  =SyslogFacility AUTH=
    -  =LogLevel VERBOSE=
  -  =sudo tail -f /var/log/auth.log=
  -  =/usr/sbin/sshd -d=
- =$HOME/.ssh/config= のタイポを確認しろ!

以上で大体解決すると思います。

** DONE clojureでtimeout処理                                        :clojure:
  CLOSED: [2012-11-26 月 18:21]

clj-webdrive.taxiを使用して、ブラウザの結合テストをしていたんだけども、
taxiの関数を呼び出しになぜか失敗することがある。失敗すると処理がそこで
止ってしまう。そんな時は、ブラウザ上でF5リロードしたり、どこかをクリッ
クすると、原因はわからないけれどもなぜかコードの実行が再開される。

ということで、テストが途中で止ってしまうのを防ぐため、タイムアウト付き
のリトライ処理をStackOverflowから拝借してきました。

#+BEGIN_SRC clojure
;; http://stackoverflow.com/questions/1683680/clojure-with-timeout-macro
(defmacro time-limited [ms & body]
  `(let [f# (future ~@body)]
     (.get f# ~ms java.util.concurrent.TimeUnit/MILLISECONDS)))

;; http://stackoverflow.com/questions/1879885/clojure-how-to-to-recur-upon-exception
(defn try-times*
  "Executes thunk. If an exception is thrown, will retry. At most n retries
  are done. If still some exception is thrown it is bubbled upwards in
  the call chain."
  [n thunk]
  (loop [n n]
    (if-let [result (try
                      [(thunk)]
                      (catch Exception e
                        (when (zero? n)
                          (throw e))))]
      (result 0)
      (recur (dec n)))))

(defmacro try-times
  "Executes body. If an exception is thrown, will retry. At most n retries
  are done. If still some exception is thrown it is bubbled upwards in
  the call chain."
  [n & body]
  `(try-times* ~n (fn [] ~@body)))
#+END_SRC

利用は以下のような感じ。
#+BEGIN_SRC clojure
(require '[clj-webdriver.taxi :as wd] )

    (try-times 3 (time-limited 3000
                               (if exists (wd/click id))))
#+END_SRC


これで処理が途中で止まるようなことは一応なくなりました。

** DONE git mergeでrenmae関係のエラーがでた                             :git:
   CLOSED: [2012-12-30 日 17:30]

git merge したら次のようなワーニングがでた。
#+BEGIN_EXAMPLE
warning: inexact rename detection was skipped due to too many files.
warning: you may want to set your merge.renamelimit variable to at least 1814 and retry the command.
#+END_EXAMPLE

下記によると、デフォルトの設定では、renameのマージはアルゴリズムが遅いためにOFFにしてるらしい。
- http://stackoverflow.com/questions/7830728/warning-on-diff-renamelimit-variable-when-doing-git-push

そこで、ワーニングの =least 1814= から設定値を2000として下記のようにした。
#+BEGIN_SRC sh
git config diff.renamelimit 2000
#+END_SRC

これで一応ワーニングはでなくなったが、なにか不具合でるかもしれない。

** DONE 今更ながらackいれた。                                         :linux:
   CLOSED: [2012-12-22 土 22:30]

- perlでできてるので、ほとんどのlinux環境で使える。
- WindowsでもCygwinいれてればOK
- helmとの連携があるのでcolor-moccurからおさらば
- color-moccurは便利だけどelisp実装なので遅い!
こんなコマンド。$HOMEに入れるので環境汚さないしオススメ。
#+BEGIN_SRC sh
$ curl http://betterthangrep.com/ack-standalone > ~/bin/ack && chmod 0755 !#:3
#+END_SRC

オプションに =--{ext}= な感じで拡張子を指定できる。デフォルトで再帰ディレクトリ指定なので楽チン。おまけに.gitとか.svnとかは無視するので速いと。
#+BEGIN_SRC sh
$ ack --java 'public'|head
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:12:public abstract class AbstractTask implements Task {
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:44:    public AbstractTask() {
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:53:    public AbstractTask(final int priority) {
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:63:    public AbstractTask(final String name, final int priority) {
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:77:    public final int getPriority() {
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:89:    public final String getName() {
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:101:    public final boolean isAlive() {
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:109:    public abstract void execute();
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:116:    public void kill() {
src/main/java/com/googlecode/ochagl/app/AbstractTask.java:127:    public static int getCount() {
#+END_SRC
*** 参考
- http://d.hatena.ne.jp/tototoshi/20101214/1292330164

*** 追記
 windowsだとうまく動かなかったので、結局 =helm-do-grep= を使用している。

** DONE nuxus7にubuntuをインストール                                 :nexus7:
   CLOSED: [2012-12-22 土 22:30]

- linux complete installerを使用する。
- linux complete installerを使用して、Terminalをダウンロード。
- linux complete installerを使用して、ubunut 12.04のcoreイメージをダウンロード
- イメージをESファイルエクスプローラなどで展開しておく。
- 展開したフォルダを/sdcardに配置。
- /sdcard/ubuntuにrenameしておく
- 以上で起動できる
- 起動の際、VNC,sshdを有効にするかの問い合わせがあるが、全てnoとする。
- VNC,sshdについて間違ってyを入力してしまった場合は、 =/root/cinf/linux.config= を削除すれば良い。
#+BEGIN_SRC sh
# apt-get -y update
# adduser mikio
# usermod -G sdcard-rw mikio
# chmod 666 /dev/tty # 一般ユーザでもアクセスできるようにする
#+END_SRC
#+BEGIN_SRC sh
# vi /etc/group
## sudoグループの行にユーザーを追加する。
sudo:x:27:pangolin,mikio
#+END_SRC

** DONE nexus7をroot化した後にやること                               :nexus7:
   CLOSED: [2012-12-22 土 22:30]

- TitaniumBackupで復元
*** fontサイズを小さく
 - http://www.straitmouth.com/blog/blog/setomits/2465
#+BEGIN_SRC sh
/system/build.prop
-ro.sf.lcd_density=230
+ro.sf.lcd_density=160
#+END_SRC

*** キーボードレアウトの復元
    /system配下を書き込み可能にする。
    mountで/systemのデバイスを確認する(実際にはgrepはない)。
#+BEGIN_SRC sh
$ mount |grep /system 
#+END_SRC
書込み指定する。
#+BEGIN_SRC sh
$ mount -o rw,remount -t yaffs2 /dev/block/platform/sdhci-tegra.3/by-name/APP /system
#+END_SRC
キーボードを接続してVendorIDとProductIDを調べる。
#+BEGIN_SRC sh
cat /proc/bus/input/devices
#+END_SRC
キーレイアウトファイルのVendorIDとProductIDが正しいか確認する。
#+BEGIN_SRC sh
cd /system/usr/keylayout
ls
#+END_SRC
キーキャラクタマップファイルのVendorIDとProductIDが正しいか確認する。
#+BEGIN_SRC sh
cd /system/usr/keychars
ls
#+END_SRC

** DONE root化したneuxs7をアップデート                               :nexus7:
   CLOSED: [2012-12-22 土 22:30]

2012/12/11, 4.2.1でも同様の手順で成功した。

*** バックアップ
- TitaniumBackupでバックアップ。
 - /sdcard/TitaniumBackup をUSB接続してPCにコピーしておく
- キーボードの設定ファイルをバックアップ
 - /system/usr/keylayout,/system/usr/keychars/
 - 上記フォルダを /sdcard/にnexus7上でコピーし、USB接続してPCにコピーしておく
  - http://www.teradas.net/archives/3841/
- ボリュームボタンの下と電源ボタンを長押し
- もしくはコマンドプロンプトからadb reboot bootloaderと打つ）
*** イメージの準備
- 下記からnakasi-jzo54kイメージを落して解凍
 - https://developers.google.com/android/nexus/images#nakasijzo54k
- 解凍してできたimage-nakasi-jzo54k.zipを解凍
- nakasi-jzo54kのなかにあったbootloader-grouper-3.41.imgを上記zipを解凍してできたフォルダに移動
 - このフォルダをadbのplatfom-toolsと同じ場所に移動しておく(作業しやすくするため)。
*** 本体とPCをUSB接続する
*** Nexus 7本体のBootloaderを起動する
- コマンドプロンプトで下記のコマンドを打つ(場所はどこでも良い)
#+BEGIN_SRC sh
$ adb reboot bootloader
#+END_SRC
*** 4.1.2のイメージを燒く
- bootoloader
- boot
- system
- recovery
- userdata

#+BEGIN_SRC sh
$ cd C:\android-sdk-windows\platform-tools
$ fastboot.exe flash bootloader nexus7-4.1-imgs\bootloader-grouper-3.41.img
sending 'bootloader' (2092 KB)...
OKAY [  0.283s]
writing 'bootloader'...
OKAY [  1.183s]
finished. total time: 1.466s

$ fastboot.exe flash boot nexus7-4.1.2-imgs\boot.img
sending 'boot' (4896 KB)...
OKAY [  0.637s]
writing 'boot'...
OKAY [  0.252s]
finished. total time: 0.890s

$ fastboot.exe flash system nexus7-4.1.2-imgs\system.img
sending 'system' (446268 KB)...
OKAY [ 56.028s]
writing 'system'...
OKAY [ 22.082s]
finished. total time: 78.111s

# リカバリーツールの書き換え(通常は実行しない)
$ fastboot.exe flash recovery nexus7-4.1.2-imgs\recovery.img
sending 'recovery' (5240 KB)...
OKAY [  0.680s]
writing 'recovery'...
OKAY [  0.264s]
finished. total time: 0.944s

# ユーザデータが消えるので注意(通常は実行しない)
$ fastboot.exe flash userdata nexus7-4.1.2-i
mgs\userdata.img
sending 'userdata' (104285 KB)...
OKAY [ 13.077s]
writing 'userdata'...
OKAY [  4.877s]
finished. total time: 17.955s
#+END_SRC

*** 再起動
Nexus7上でリカバリー画面(ドロイド君がお腹を開いた画像)でStartが表示され
ているのを確認し、電源ボタン押下で再起動が始まる。すると、自動的に「アッ
プグレードしています。」のメッセージが表示されアップグレードが適用され
る。再起動後に、設定→タブレット情報からAndroidバージョン4.2.1が確認で
きれば成功。SuperUserがあるか確認し(ないはず)、必要に応じて再度Root奪取
の手順を取る。
*** もう一度root化
**** 4.2.1
- http://kaimuna.wordpress.com/2012/12/03/nexus7-rooting/

**** 4.1
 - 下記を参考にroot化
  - http://mikio.github.com/article/2012/09/28_nexus7root.html
 - 実行前にウィルスチェックソフトのリアルタイムチェックなどはOFFにしておくこと。
 - bootloaderのunlockは既に終ってるので最初の選択ではunlockを選択する。

** DONE git remoteでoriginが表示されなくなった。                     :hamari:
   CLOSED: [2012-12-22 土 22:27]

#+BEGIN_SRC sh
$ git remote
#+END_SRC

branch情報をみてみる。
#+BEGIN_SRC sh
 $ git branch -a
 * master
   remotes/origin/HEAD -> origin/master
   remotes/origin/master
 #+END_SRC
remote情報は一応残っている。

どうやら =.git/config= ファイルが削除されてしまったのが原因ぽい。
適当なディレクトリにリポジトリをcloneしなおして =.git/config= をコピーしなおしたら直った。

** DONE firefoxで常にIMEをOFFにする方法                             :firefox:
   CLOSED: [2012-12-30 日 17:31]

- プロファイルフォルダの場所を調べる。
 - ヘルプ -> トラブルシューティング情報 -> アプリケーション基本情報 -> プロファイルフォルダ
- {プロファイルフォルダ}/userChrome.css を開く(なければ作成)
下記のコードを追加
#+BEGIN_SRC css
 @charset "utf-8";
 * *|input {ime-mode: inactive !important;}
#+END_SRC
*** 参考
- http://ameblo.jp/damocha/entry-11105732309.html
   
** DONE 空白を含むファイルをxargsで削除する                           :linux:
   CLOSED: [2012-12-22 土 22:27]

#+BEGIN_SRC sh
find . -type f -name '*2012-10-18)*' -print0|xargs -0 rm -f
#+END_SRC
- http://linuxjm.sourceforge.jp/html/GNU_findutils/man1/xargs.1.html

** DONE org-onlineを試す                                              :emacs:
   CLOSED: [2012-12-22 土 22:27]

- configディレトリ内にdirectoriesファイルを用意。中身は
#+BEGIN_SRC sh
data
#+END_SRC
- dataディレトリに.orgファイルを準備。
- orgファイルは、先頭にTODOのプロパティの記述が必要。
#+BEGIN_EXAMPLE
#+TODO: TODO(t) WAIT(w) | DONE(d) SOMEDAY(s) CANCEL(c)
#+END_EXAMPLE
- git cloneしたら、 =lein run= で起動。
- localhost:8080にアクセスする。
- 認証画面が表示されるので適当に入力(ここではmikio/mikio)
- dataディレクトリのファイルが一覧表示されるのでクリック
- 大見だししか表示されない。がクリックすると以降の見出しが表示される。

*** 所感
基本的に装飾はほとんどせずに、orgファイルの中身をそのまま出力するかんじ。
1行毎にpタグで囲んでいるのは、なんとかしたほうが良さげ。

** DONE stumpwmを試す                                                :ubuntu:
   CLOSED: [2012-12-22 土 22:27]

*** 導入。
数日まえにxmonadは設定ファイルがHaskell[fn:1]なのでCommonLispで設定ファ
イルが定義できるStumpWMに早速乗り換えることにした。
#+BEGIN_SRC sh
$ sudo apt-get install stumpwm
#+END_SRC

下記を参考にさせて頂きました。
- [[http://d.hatena.ne.jp/tototoshi/20110219/1298121492][XmonadからStumpWMに乗り換えました]]

#+BEGIN_EXAMPLE
/usr/share/xsessions/stumpwm.desktop を作るとログイン時にstumpwmが選択できるようになります。
#+END_EXAMPLE
#+BEGIN_SRC sh
[Desktop Entry]
Name=StumpWM
Comment=This session logs you into stumpWM
Exec=stumpwm
TryExec=stumpwm
Icon=
Type=Application
#+END_SRC

**** .xsession
下記を参考にした。
- http://d.hatena.ne.jp/teturouet/20090523/how_to_install_stumpwm
 =~/.xsession= を作成する。
#+BEGIN_SRC sh
gnome-settings-daemon & # (普段 Gnome を使っている場合は)キーボードやディスプレイの設定を有効にしてくれる
#nm-applet & # 勝手に無線LANに接続してくれる
gnome-power-manager &
gnome-volume-manager &
nautilus -n & 
# pidgin &
dropbox start -i &
update-notifier --startup-delay=60 &
#exec ~/stumpwm/stumpwm-0.9.5/stumpwm
#+END_SRC
このとき =$ chmod +x ~/.xsession= を忘れずに。

*** 基本操作
ログインしたら画面真っ黒で途方にくれます。とりあえず最低限覚えたほうが
良さげなコマンド。
| C-t ; loadrc RETURN | .stumpwmrcの読みこみ        |
| C-; quit RETRUN     | ログアウト                  |
| C-t ?               | 簡易ヘルプ                  |
| C-t C-g             | 中断                        |
| C-t t               | カレントのアプリにC-tを送る |

**** フレームとかウィンドウとか
StumpWMでは分割した領域をフレームと呼び、個々のアプリケーションはウィン
ドウと呼ぶみたい。

| C-t o      | フレームを順番に移動                    |
| C-t f      | フレームを選択                          |
| C-t R      | フレームを削除                          |
| C-t s      | フレームを上下に分割(vsplit)            |
| C-t S      | フレームを左右に分割                    |
| C-t r      | hjklでフレームのサイズを変更。ESCで終了 |
| C-t +      | フレームのサイズを均等に。              |
| C-t C-p    | 今いるフレームのアプリを入れ換える。    |
| C-t C-n    | 今いるフレームのアプリを入れ換える。    |
| C-t C-t    | 最後に入れ換えたアプリを選択            |
| C-t C-数字 | アプリを選択(C-t C-wで数字を確認)       |

**** アプリケーションを起動する
Firefoxの起動例。
| C-t C-e             | 我らがEmacsの起動            |
| C-t C-c             | 端末起動                     |
| C-t ! firefox ENTER | fierfox起動                  |
| C-t ;               | コマンド入力(emacsでいうM-x) |

**** 仮想デスクトップ
仮想デスクトップは、StumpWMではグループというらしい。番号は1オリジン。
| C-t g g   | グループの一覧                                 |
| C-t g c   | グループの作成。                               |
| C-t g C-p | 前のグループへ移動                             |
| C-t g C-n | 次のグループへ移動                             |
| C-t F*    | F*はファンクションキー。各グループに移動する  |
| C-t g N   | カンレントのアプリを次グループに移動する       |
| C-t g P   | カンレントのアプリを次グループに移動する       |

*** プレフィックス
C-t はemacsとバッティングしてるのでなんとかしたい。とりあえずC-lにした。
しかし、できればWidowsキーを使いたいところ。

-  =W+t= (Windowsキー+t)は？この場合、連続入力がやりづらい
-  =W+t C-p= とか無理。必然的にW-t p とかになりそう
-  =W+t W-p= と定義するとか。これはキーの再定義がかなり面倒くさい。




[fn:1] 関数型のHaskellにはもちろん興味あって、この先じっくり勉強したい。

** DONE xmonadを試す                                          :ubuntu:xmonad:
   CLOSED: [2012-09-28 金 10:02]

CUIでtmuxを操作してるときの一覧できる快適さをGUIに求めた結果、
自宅のUbuntuにXmonadをいれてみました。

- http://gihyo.jp/admin/serial/01/ubuntu-recipe/0124

タイル型のウィンドウマネージャです。常にウィンドウ全てが一覧されるやつです。
インストールしてみて実感しましたがタイル型はとーっても快適です。
普段からemacsでキーボード操作メインのユーザだったらすぐに気にいるかと思います。
とくにウィンドウ切り替えが =Mod+j/k= でできるのがイイ!
(それに比べて WindowsのALT+tabは左手の手首が死ぬ。。。)

今回、Xmonadというのをインストールしましたが、老舗のawesomeというのも人気があるそうです。
ただXmonadの方が後発である分いろいろブラッシュアップされてるような印象でした。
問題は設定ファイルがHaskellってことですかね。できれば覚えたくないですよね。
いやHaskellは勉強して動かしたことはありますが、
今はLisp系言語を覚え中なので他の言語はできるだけ気にせず脳の負担を増やしたくないのです。
そういう意味で気になるのは、設定フィアルがCommonLispであるstumpwm。そのうち試したいと思います。

しかしタイル型使ってると、UnityとかgnomuShellの動向がどうでもよくなりますな。

*** インストールメモ
#+BEGIN_SRC sh
$ sudo apt-get install xmonad
$ sudo apt-get install dmenu  # キーボードランチャー
$ sudo apt-get install xmobar # ステータスバー
#+END_SRC

xmorbar用の設定ファイル( =~/.xmobarrc= )を作成する。
#+BEGIN_SRC haskell
-- -*- mode:haskell -*-
Config { font = "xft:Sans-9:bold"
       , bgColor = "black"
       , fgColor = "grey"
       , position = Top
       , lowerOnStart = False
       , commands = [ Run Network "eth0" ["-L","0","-H","32","--normal","green","--high","red"] 10
                    , Run Cpu ["-L","3","-H","50","--normal","green","--high","red"] 10
                    , Run Memory ["-t","Mem: <usedratio>%"] 10
                    , Run Swap [] 10
                    , Run Battery [] 600
                    , Run Com "lsb_release" ["-s","-d"] "" 36000
                    , Run Date "%Y %b %_d(%a) %H:%M:%S" "date" 10
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = "<fc=#ee9a00>%lsb_release%</fc> | %cpu% | %memory% %swap% | %eth0% | %battery% }{ %date%"
       }
#+END_SRC

 =~/.xmonad/xmonad.hs= を作成する。
#+BEGIN_SRC haskell
import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import System.IO

main = do
        xmproc <- spawnPipe "/usr/bin/xmobar /home/mikio/.xmobarrc"  -- .xmoabrrcのパスを記述しておく
        xmonad $ defaultConfig
             { manageHook = manageDocks <+> manageHook defaultConfig
             , layoutHook = avoidStruts  $  layoutHook defaultConfig
             , logHook = dynamicLogWithPP $ xmobarPP
             { ppOutput = hPutStrLn xmproc
             , ppTitle = xmobarColor "green" "" . shorten 50
              }
             , modMask = mod4Mask     -- WindowsキーをModキーとしてバインドする
          } `additionalKeys`
          [ ((mod4Mask .|. shiftMask, xK_z), spawn "xscreensaver-command -lock")
          , ((controlMask, xK_Print), spawn "sleep 0.2; scrot -s")
          , ((0, xK_Print), spawn "scrot")
          ]
#+END_SRC

最低限のコマンド
| Mod-S-q   | ログアウト               |
| Mod-S-c   | ウィンドウクローズ       |
| Mod-S-RET | 端末起動                 |
| Mod-p     | キーワードランチャー起動 |
| Mod-q     | 設定ファイルの再読込     |
*** xinitrc
xmodmapの設定とdropboxの読み込みを設定しています。
#+BEGIN_SRC sh
(sleep 3; xmodmap ~/.xmodmap) &
~/.dropbox-dist/dropboxd &
exec xmonad
#+END_SRC
*** 参考サイト
- http://d.hatena.ne.jp/uhiaha888/20110113/1294885816

** DONE misaki運用草案                                               :misaki:
   CLOSED: [2012-09-28 金 10:02]

o-blogはorg-mode使いとしてはものすごく使いやすくて大変満足しているので
すが、変換処理が段々重くなってきてるのと、clojurianを目指す身としては普
段からclojureと戯れたい、という理由から将来的にはmisakiへの移行を考えて
います。そうするといろいろと考えることが増えるわけです。

*** 基本は1ファイル1記事
 - o-blogでは1orgファイルに全ての記事があったのでこれをどうするか。
*** 変換をどうするか。
 - 1orgファイル1cljファイルにする(.org -> .html.clj)
 - 1orgフィアルを1htmlファイルまでにしてしまう。
  - このときヘッダーフッターをclojureのテンプレートとどう統合するか
*** o-blogをどうするか。
 - ドメイン直下はmisakiで管理し安定するまで当面は/o-blogなどに記事をおく。
 - 現状では、o-blogの出力を直下にしているのでURLの修正(リダイレクト)などをどうするか？
  - 気にしないという手もあるが、コメントやブクマなどがもったいない(いやほとんどないんだけど)。
 - 静的ファイルのみmisakiで生成することにして、blogは今までどおりという手もあるが。。。
  - misakiの動的なレビューとかの恩恵に預かれない。
  - howmも使う意味がなくなる？

*** howmでできた日付ファイルをどう.html.cljに関連づけるか
- 1日1ファイルでメモが作れた!
#+BEGIN_SRC emacs-lisp
(setq howm-file-name-format "%Y/%m/%Y_%m_%d.howm")
#+END_SRC

** DONE howm-modeとorg-modeを同時に使ってみたい。                     :emacs:
   CLOSED: [2012-09-28 金 10:02]

しばらくメモ管理は、org-modeのみで運用してきた。
ブログの下書きも blog.orgという1ファイルのみで運用している
(これはo-blogというelispが1ファ イルのみのサポートなため。
複数ファイルでの運用方法もあるかもしれないが未確認。
結果、ポケットひとつの原則に従うことになりすごくやりやすい)。

しかしさすがに内容が増えてくると管理がきつくなってくるし、
将来的には Clojure版JykyllのMisakiに移行したいと考えているので、
そろそろhowmにも手を出してみようかなと。

howmにもリンク機能やTODO機能があるが、
これらはorg-modeにもあるのでそのまま継続するとして、
howmに任せたいのはファイル管理。
ファイル自体を意識せずにどんどんメモが取れる環境が理想。

*** やること
- 拡張子は.howmと.orgどちらにするか。
 - →howmの機能は主にファイル管理に使用する予定なのと、改宗したときに.howmだと面倒なので.orgでいく。
 - →howmディレクトリをつくってその配下のファイルはすべてhome-modeにしたほうがいいのかも。
 - →.elも.txtも.orgもすべてhowmで管理。だけどタイトルの仕切りは？
- 日報をhowmでうまいこと管理したい。
 - →repotディレクトリとか作る？
- orgのtagによるマッチ機能があれば、howmを使う必要もないかも？

*** 影響されたサイト
- [[http://yamadawindsurf.blogspot.jp/][Evernote vs Emacs+howm+org+Dropbox]]
 - 完全同意です。evernoteは流行り始めたころは使ってましたが、
   emacsとの連携がしづらいのでいつのまにか使わなくなってしまいました。

- [[http://techwave.jp/archives/51465161.html][emacsだけで書上げた書籍…翔泳社「ツイッター情報収集術」のつくり方(2) 執筆環境編【増田(maskin)真樹】]]
 - すごいですね。この方のノウハウをぜひ聞いてみたいです。

- [[http://kinjo.github.com/hago16-emacs/][My life on Emacs]]
 - org-modeとhowmを同時に使用するというのはこの方の資料を拝見して初めて気づきました。
   howmをサンプルプログラムと日報に活用ってところが詳しくしりたいです。

- [[http://yono05.wordpress.com/2011/11/23/emacs-org-mode-howm-mobileorg-dropbox-%E3%81%A7%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E7%AE%A1%E7%90%86%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%97%E3%81%9F/][Emacs + Org-mode + howm + MobileOrg + Dropbox でテキスト管理環境を構築した]]
 - MobileOrgもぜひ活用したいと思っているのですが、まだできてないですね。。。

** DONE w3m-emacsが重いのをなんとかしたい。                           :emacs:
   CLOSED: [2012-09-28 金 10:02]

- windows(Cygwin)で使用することを目的としています。
- 連携に関して、GUIブラウザ起動は考えていません

*** 動機と調査
- emacs-w3mは正直重い。firefoxやchromのほうがレンダリングが速い。
  - それでも便利なので使う価値はあると思っている
    - キーボード操作
    - emacsのツールからのemacs-w3m起動
    - キルリングの共有

- 対してw3m本家端末版はめちゃくちゃ軽い
  - とにかく軽いので快適 -> この軽さでemacs-w3mが動けばどんなに幸せか!
  - 画像表示はどうする？ -> コンソールで表示する拡張がある
  - キーバインドが違う？ -> 設定ファイルで吸収できるかも

- screen/tmuxを使えばいいんじゃね？
  - windowsだとscreenしか使えない
    - たまに表示が崩れる？
    - screenで縦分割できないので使いづらい
      - 開発版を導入すれば良いがCygwinにインストールはかなり面倒
      - しかも表示崩れの問題がつきまとう
  - emacsとの連携が大変(twittering-mode, newsticker)  
  - 連携に関してはrubikitchさんがノウハウをもってるっぽい
  - コンソール版のemacsを使用しなければならない。
    - フォントの装飾がない
    - 画像表示ができない
    - Cygwin版は表示崩れをよくおこす。
    - Cygwin版は重い。
    - Drag&Dropができない -> たまーに使う。

- GUI版を使用しつつコンソール版のw3mは使用できないか？
  - ansi-termとか
    - windowsでは多分無理
  - GUI版の恩恵は得られるものの、w3mの画像表示とか連携の問題はのこる。

- emacs-w3mそのものを高速できないのか？
  - elispのレンダリングが重いのが原因
  - w3m側でemacsの文字列リテラルを出力できるようになればよいかも。

- 他にもいくつかテキストブラウザは存在する
  - lynx 老舗。日本語が表示できない。w3mより重い
  - links, links2 そこそこ速い？
  - elinks javascriptなどの対応している。期待の星。
    しかし機能が充実してる分、emacsとの連携は厳しそう。

- webkitをコンソールから操作とかできないものか。
  - 未調査

*** 結論
- 多大な労力が必要なので結局現状維持でいいや。

** DONE GoogleIMEをemacsから使用したい。                              :emacs:
   CLOSED: [2012-09-28 金 10:02]

*** 動機と調査
  - SKKのシフト操作になれると、他の環境にいったりきたりが苦痛
  - SKKを使っているがやっぱりIMEのほうが変換がらくだと思うことも。
  - ということでGoogleIME自体をemacsバインドにする方法を調査
    - →設定ファイルで可能
  - mozcやatok(linux)版では連携するためのelispがある
    - →未調査
  - windowsはそもそも連携できるAPIがなさそう
    - →未調査

*** 結論
- 多大な労力が必要なので結局現状維持でいいや。
    
** DONE 手動インストールしたelispのinfoファイルを後から追加する。     :emacs:
   CLOSED: [2012-09-28 金 10:02]

規模の大きいelispパッケージ(jabber,navi2ch,mewなどなど)や、どっかから拾ってきたinfoファイルを
手動で追加する方法のメモ。

以下は、 =~/Dropbox/info/= に追加する場合。

.emacsに下記を追加。
#+BEGIN_SRC emacs-lisp
(add-hook 'Info-mode-hook
          (lambda ()
            (setq Info-directory-list '("c:/Users/mikio/apps/emacs-24.3/info/"
                                        "~/Dropbox/info/"))))
#+END_SRC

 =Info-directory-list= は初期状態はnilなので、
emacsのもともとのinfoディレクトリを追加してあげないといけない。

次に =~/Dropbox/info/= に 追加したいinfoファイルを置く。

 =*.info= がなくて =*.texinfo= しかない場合は、
 =*.texinfo= ファイルをemacsで開き、 =M-x texinfo-format-buffer= で =*.info= が作れる。

続いて、infoのメニューファイルであるdirファイルを =~/Dropbox/info/= に作成する。
内容は下記のとおり(el-getでインストールした際にできたdirを借用)。
この例では、magito.infoファイルを手動で追加している。
#+BEGIN_SRC sh
 This is the file .../info/dir, which contains the
 topmost node of the Info hierarchy, called (dir)Top.
 The first time you invoke Info you start off looking at this node.
 ^_ 
 File: dir,	Node: Top	This is the top of the INFO tree
 
   This (the Directory node) gives a menu of major topics.
   Typing "q" exits, "?" lists all Info commands, "d" returns here,
   "h" gives a primer for first-timers,
   "mEmacs<Return>" visits the Emacs manual, etc.
 
   In Emacs, you can click mouse button 2 on a menu item or cross reference
   to select it.
 
 * Menu:
 
 Emacs
 * Magit: (magit).               Using Git from Emacs with Magit.
#+END_SRC

 =^_= のところはコントーロールコードなので、=C-q C-_= で入力すること。
今回の場合は、magit.infoを追加するので下記のように、括弧のなかに =magit= と記述する。
#+BEGIN_SRC
 * Magit: (magit).               Using Git from Emacs with Magit.
#+END_SRC

File:の行も適切に変更しないとうまくいかないので注意。
#+BEGIN_SRC
File: magit.info, Node: Top, Next: Introduction, Prev: (dir), Up: (dir)
#+END_SRC
以上で、 =M-x info= すれば、もともとのinfoに上記のmagit.infoが追加されて見れるようになるはず。


** DONE awkでカンマ区切りの数字を出力する。                           :linux:
   CLOSED: [2012-09-28 金 10:02]

下記を参考に。
- http://pooh.gr.jp/?p=9768

C言語のprintfでは ="%'3d"= でカンマ出力できるが、awkの場合 ='= をエスケー
プしなければならない。これには =\047= を使用する。
#+BEGIN_SRC sh
echo 1000000|awk '{printf("%\0473d\n", $1)}'
awk '{printf("%\0473d\n", $1)}' <<< 1000000
#+END_SRC

** DONE Twittering-mode でなぜか認証できなくなった。           :hamari:emacs:
   CLOSED: [2012-09-28 金 10:02]

 =M-x twit= してトークンの保存してある*.gpgファイルのパスワードが求めら
れたあと通常であれば、認証が通過されてタイムラインが表示されるのに
failed to ...みたいなメッセージが表示されなぜか表示されなくなった。

この原因はわからなかったが、このようなときは、GPGファイルを作りなおせば良い。
#+BEGIN_SRC emacs-lisp
(setq twittering-auth-method 'oauth)
(setq twittering-use-master-password t)
(setq twittering-private-info-file "~/hogehoge/twittering-mode.gpg")
#+END_SRC
と定義されていた場合、この =twittering-private-info-file= をコメントア
ウトし再度 =M-x twit= する。すると、 =~/.twittering-mode.gpg= に保存さ
れるので、必要であればこのファイルを任意の場所に移動し、さきほどコメン
トアウトした行を復活すれば良い。

** DONE openssh-serverをインストールしようとしたら、CDをいれろと。        :hamari:
   CLOSED: [2012-12-30 日 17:34]

#+BEGIN_SRC sh
Media Change: Please insert the disc labeled 
'Ubuntu-Server 12.04.1 LTS _Precise Pangolin_  - Release amd64 (2012817.3)'
 in the drive '/media/cdrom/' and press enter.
#+END_SRC
下記を参考に =/etc/sources.list= を見るとなぜか、cdromの記述が。しかも3行も。
- http://d.hatena.ne.jp/majix/

これらを削除し下記を追記した。
#+BEGIN_SRC sh
deb http://jp.archive.ubuntu.com/ubuntu/ precise main 
#+END_SRC

ちなみにこのソースリストは下記で簡単に作成できる。
- http://repogen.simplylinux.ch/

** DONE Ubuntu Server インストール時に前回作ったLVMが削除できなかった。 :hamari:ubuntu:
   CLOSED: [2012-12-30 日 17:34]

Ubuntu Serverをインストールし直したとき、前回作ったLVMを再構成しようとしたら
VGやLVMが削除できなくて先に進めなくなった。

この状態を回避するには、 まず =ALT+F2= でコンソールを切り替える。
Ubuntu Serverでは仮想コンソールが複数立ちあがっていて、 =ALT + F1 - F4= で切り替えられるのだ。

まず、論理ボリュームを削除し、その後、ボリュームグループを削除する。
#+BEGIN_SRC sh
$ lvremove /dev/{ボリュームグループ}/{論理ボリューム}
$ vgremove /dev/{ボリュームグループ}
#+END_SRC
で削除できる。
この時、swap領域に割り当てたものが削除できない場合があるが
その時は、いったんインストール作業を中断してやり直せばよい。
  
** DONE gnusでいろいろいじってたらInboxが表示されなくなった。   :hamari:gnus:
   CLOSED: [2012-09-28 金 10:02]

gnusの設定をいろいろいじっていたら、どこかのタイミングでグループバッファに
新着記事が表示されなくなってしまった。

- =~/Mail= を削除しても駄目だったが、 =.newsrc= 、 =.nnmail-cache= 、 =~/News= を削除したらうまくいった。
- =~/News= も削除したほういい
   
** DONE swank-clojureの後継モジュールのnREPLを試してみた      :clojure:nrepl:
   CLOSED: [2012-09-07 金 22:02]

いつのまにかswank-clojureが非推奨になり、代わりにnREPLというものが推奨されていた。
- https://github.com/technomancy/swank-clojure
#+BEGIN_EXAMPLE
This project is no longer under active development.

New users are strongly encouraged to try out nrepl.el instead. If you
need an advanced debugger, Ritz might be a better fit.
#+END_EXAMPLE
超意訳。「swank-clojureは全然活動してないから、新規のユーザはnrepl.elを強く推奨
する。もしイケテるデバッガが欲しいならRitzがいいかもYO!。」

ということで、el-getでレシピに下記を追加して =nrepl.el= をインストール。
#+BEGIN_SRC emacs-lisp
 (:name nrepl
  :type github
  :pkgname "kingtim/nrepl.el"
 )
#+END_SRC

で =lein2.0= で適当にプロジェクトをつくって、 =project.clj= に下記を追加。
#+BEGIN_EXAMPLE
  :dependencies [[org.clojure/clojure "1.4.0"]
                 [org.clojure/tools.nrepl "0.2.0-beta9" ]]
#+END_EXAMPLE

最後に =M-x nrepl-jack-in= すると、nREPL-Server が起動して、nREPLが起動する。

キーバインドはほとんどSLIMEと同様だし、SLIMEの下記の特徴も実現してるの
で、これは本格的に移行できる雰囲気。
- シンボルの補完(TABで補完できる)
- 関数の引数表示(シンボルを打ちこむとミニバッファに自動表示)
 
ただSLIMEを常用してきたわけではないので足りない機能もまだありそうだけど。
たとえば、
- REPL上でエラーが発生してもデバッガが起動しない(例外が表示されるだけ)
- nREPLとは直接関係ないけど、auto-complte.elに対応するモジュール(ac-slime)がない。
- HyperSpecのようなドキュメントシステムは？(doc関数ががあるからいらないか)

ちなみに下記の記事を読むと、nREPL開発に至る経緯がある。
- http://technomancy.us/163

clojureでSLIMEを使用する場合、最新のバージョンだと動かなかったりするの
で、環境構築に苦労したけど、専用のSLIME代替モジュールができたおかげで環
境構築が楽になりますな。

nREPLは、まだまだできたばかりのプロジェクトだけれども、SLIMEの呪縛から
解き放たれた期待のプロジェクト。積極的に使っていきたい。

** DONE nexus7をroot化
   CLOSED: [2012-09-28 金 10:02]

下記を参考に「one click root tool」というCUIベースのツールを使用した。
- http://www4.atwiki.jp/auroot/pages/48.html

このツールを使用すると下記の処理が適用されます。
- boot loader のアンロック
- ClockWorkMod Recoveryというリカバリーツールの導入
- root化(suコマンドの導入)

手順は以下になります。
1. http://forum.xda-developers.com/showthread.php?t=1742919 から
 =Nexus-7-root-toolkit-v.1.5.zip= をダウンロード
2. 解凍して、driversディレクトリの該当する実行ファイルを実行する(32bit or 64bit)
3. Nexus7をUSBデバッグモードにしてPCに接続
4. root.exeを実行
5. DOS窓でメッセージが表示されるので、適当に進める。
6. 途中で「あなたの端末はunlockか？」と聞かれるので、lockedを選択
7. nexus7側でunlockするかどうか更に聞かれるのでボリュームキーで「yes」
   を選択し、電源ボタンで決定する(データが全て消えるので注意!)
8. DOS窓でメッセージが変化してるので適当にキーを押下するとnexus7側のブー
   トアンロックが開始される。
完了すると、nexus7のデータが削除され、一番最初の起動時の状態になるので
googleアカウントを設定しておく

ここで、nexus7の設定をせずにほったらかして次のステップに進むと下記のエ
ラーがでてしまうので注意。
#+BEGIN_SRC sh
error: device not found
< waiting for device >
#+END_SRC
こうなってしまったら、root.exeをもう一度やり直す。この時、最初のメニュー
ではunlockを選ぶこと。

9. アンロックが終了すると、DOS窓でroot化するかのメニューが表示されるので
 =1-root + install cwm= を選択する。
10. DOS窓で、下記のメニューが表示される。
#+BEGIN_SRC sh
Please chose between installing "super user" or "SuperSU":
.......
1- super user
2- SuperSU

type 1 or 2 then press ENTER:
#+END_SRC
ここでは、「super user」を選択した。画面がパタパタ変わってNuxus7が再起動される。

再起動後、アプリケーション一覧画面に「Superuser」アイコンが追加されてい
ればroot化されたとになる。

以上で作業完了である。

** DONE Firefoxでサイトを開いた時に自動フォーカスされるのを無効化する。 :firefox:
   CLOSED: [2012-09-06 木 22:26]

Twitter,google,その他多くの検索サイトでは、ページを開くと勝手にフォーカ
スが移動して入力待ち状態になる。この挙動は多くの普通の人にとっては操作
性が良くなるんだろうけど、FirefoxのKeysnailでキーボード操作をメインとし
ている自分にとっては不便極まりない。

ってことで、この挙動をどうにかするAdd-Onを探していたんだけど、なぜかなかった。

代わりにGireaseMonkey[fn:1]を使った代替方法が見つかったのでそのスクリプトを使用することにした。
- http://javascripter.hatenablog.com/entry/20080620/1213923411

GreaseMonkeyアドオンをインストールして、下記コードを追加すれば良い。

新規ユーザスクリプトを追加する手順は以下。
- [メニュー]->[ツール]->[GreasMonkey]->[新規ユーザースクリプト]

#+BEGIN_SRC javascript
// ==UserScript==
// @name        no-focus
// @namespace   no-focus
// @version     1
// @include     http*
// ==/UserScript=
window.addEventListener('load',
function() {
  document.activeElement.blur();
  this.removeEventListener('load', arguments.callee, false);
},
false);
#+END_SRC

コードの意味はよくわかってないから、問題があるかもしれないが、その場合
はその時考えよう。

[fn:1] Greasemonkeyはchromeにも移植されているので、chromeでも利用できるかもしれない。

** DONE windows.elの作業領域                                          :emacs:
   CLOSED: [2012-09-01 日 10:07]

私は、普段 =windows.el= を常用しています。仮想デスクトップのように使用
できるのでおすすめです。

その際、各作業領域にelispアプリを割りふって自分自身が混乱しないようにし
ています。

- 1:gnus
- 2:w3m+twitter
- 3:org-mode
- 4:work

** DONE cygwinでemacsが起動しなくなった。                            :hamari:
   CLOSED: [2012-09-02 日 10:06]

#+BEGIN_SRC sh
$ ls -la /bin/emacs
lrwxrwxrwx 1 mikio Domain Users 23 Aug 28 11:41 /bin/emacs -> /etc/alternatives/emacs*
#+END_SRC
alternativesを使ってるのか。

alternativesのリンク先を調べる。
#+BEGIN_SRC sh
$ ls -la /etc/alternatives/emacs
lrwxrwxrwx 1 mikio Domain Users 22 Sep 27 12:02 /etc/alternatives/emacs -> /usr/bin/emacs-X11.exe*
#+END_SRC
おっと、xになっていた。そういえばちょっと前にCygwinでXを動かすための試行錯誤をしてたっけ。

ってことで、実態を変更しようとうしたらコマンドがない。。。
#+BEGIN_SRC sh
$ update-alternatives --config emacs
bash: update-alternatives: command not found
#+END_SRC

パスが通ってないのでした。。。
#+BEGIN_SRC sh
$ whereis update-alternatives
update-alternatives: /usr/sbin/update-alternatives
#+END_SRC

無事CUI版のemacsを設定できました。
#+BEGIN_SRC sh
$ /usr/sbin/update-alternatives --config emacs

There are 2 programs which provide 'emacs'.

  Selection    Command
-----------------------------------------------
*+ 1           /usr/bin/emacs-X11.exe
   2           /usr/bin/emacs-nox.exe

Enter to keep the current selection[+], or type selection number: 2
#+END_SRC

alternativesについては下記が詳しい。
- http://d.hatena.ne.jp/takuya_1st/20110424/1303627768

** DONE たまにundoができなくなる。                                   :hamari:
   CLOSED: [2012-09-01 土 10:04]

下記のようなメッセージがでてundoが効かなくなる。
#+BEGIN_EXAMPLE
"No undo information in this buffer"
#+END_EXAMPLE
こんなときは =M-x enable-undo= で復帰するかもしれない。。。

** DONE jabber.elの導入                                               :emacs:
   CLOSED: [2012-09-01 土 10:04]

el-getでインストールしようとしたが、gitプロトコルしか受け付けてないので
手動でインストールすることにした。

まず、 =hexrgb.el= というelispに依存しているので、予めこのelispもパスの通る場所にダウンロードしておく。
- http://www.emacswiki.org/emacs-en/download/hexrgb.el
あとは展開してロードパスを通すだけ。
もし、infoをインストールしたり、バイトコンパイルしたい場合はmakeを使えば良い。
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (mikio/site-lisp-home "emacs-jabber-0.8.91"))

;; 下記に依存
;; http://www.emacswiki.org/emacs-en/download/hexrgb.el
(require 'jabber)

(setq jabber-account-list
      '(("mikio@debian"
         (:network-server . "")
         (:connection-type . ssl))))
#+END_SRC

インストールがおわったら、 =M-x jabber-connect= で接続できる。
JIDプロンプトにユーザーIDを入力。その後パスワードプロンプトでパスワードを入力したら接続完了。
 =*-jabber-roster-*= というバッファに切り替えると、現在オンラインのユーザ一覧が表示される。
rosterは名簿という意味。

注意点としては、 =C-x C-j= がプレフィックスに割り当てられているので
skkのキーバインドが乗っ取られてしまうこと。
 
** DONE cygwinでmysql                                                :cygwin:
   CLOSED: [2012-09-01 土 10:03]

#+BEGIN_SRC sh
$ apt-cyg install mysql
$ apt-cyg install mysqld
$ whereis mysqld
mysqld: /usr/sbin/mysqld.exe /usr/share/man/man8/mysqld.8.gz
#+END_SRC

** DONE 標準のsnippetsたちをコンパイルしてひとつのファイルにする。    :emacs:
   CLOSED: [2012-09-01 土 10:01]

標準のsnippetsたちをコンパイルしてひとつのファイルにする。
- M-x yas/compile-directory ~/Dropbox/dotfiles/emacs/el-get/yasnippet/snippets/
** DONE interactive関数のPコードについて                              :emacs:
   CLOSED: [2012-08-30 木 09:59]

EmacsLispのソースコードを読んでみると =(interactive)= 関数を良く目にするが
その引数の ="p"= についてよくわかってなかったのでヘルプをみてみた。
#+BEGIN_EXAMPLE   
p -- Prefix arg converted to number.  Does not do I/O.
P -- Prefix arg in raw form.  Does not do I/O.
#+END_EXAMPLE
pはprefixのpで、前置引数の値を取得するためのコードのようだ。

「Emacsテクニックバイブル」P16より引用。
#+BEGIN_EXAMPLE   
前置引数・数値引数（C-u）

コマンドの前に「C-u」を押すと､コマンドの挙動が変化します。この「C-u」を
前置引数・数値引数と言います。「C-u」の後に数値をつけることもできます。
数値をつけない場合、｢C-u」で4、「C-u C-u」で16、「C-u C-u C-u」で64の数
値を指定したことになります。文字入力やカーソル移動などのコマンドは数値
分繰り返しします。たとえば､「C-u lO C-f」で10文字前へ進みます。数値に意
味はなく前置引数の有無のみをチェックしているコマンドもあります。
#+END_EXAMPLE

実験してみた。
#+BEGIN_SRC emacs-lisp
;; p -- Prefix arg converted to number.  Does not do I/O.
;; 小文字pは、前置引数(C-u)を省略した場合は、「1」で受けとる。
;; 小文字pは、前置引数の「数」を省略した場合は、「4」で受けとる。
;; 小文字pは、前置引数は、「数」で受けとる。
(defun testint-p (arg) (interactive "p") (message "%S" arg))

;; P -- Prefix arg in raw form.  Does not do I/O.
;; 大文字Pは、前置引数(C-u)を省略した場合は、「nil」で受けとる。
;; 大文字Pは、前置引数の「数」を省略した場合は、リスト「'(4)」で受けとる。
;; 大文字Pは、前置引数の「数」を省略しなかった場合は、「数」で受けとる。
(defun testint-P (arg) (interactive "P") (message "%S" arg))
#+END_SRC

** DONE cygwinにsbclをインストールする                                                :lisp:sbcl:
   CLOSED: [2012-08-29 水 09:58]

cygwin上で下記のとおりインストールした。
#+BEGIN_SRC sh
$ git clone https://github.com/akovalenko/sbcl-win32-threads.git
$ cd sbcl-win32-threads/
$ sh make.sh

# 起動
$ sbcl
#+END_SRC

** DONE cygwinでfstabを使う。                                        :cygwin:
   CLOSED: [2012-08-29 水 09:58]

=/etc/fstab= を編集する。
#+BEGIN_SRC sh
C:/Documents\040and\040Settings/ /home/ ntfs  override,binary,auto 0 0
C:/Documents\040and\040Settings/mikio /home/mikio ntfs  override,binary,auto 0 0
#+END_SRC
その後、 =mount -a= を実行で有効化して完了。

** DONE windows7の環境で、Cygwin Terminalからemacsが起動できない。 :cygwin:hamari:
   CLOSED: [2012-08-29 水 09:57]

 =vfork= できないとかのエラーがでて起動に失敗する。
下記の記事のとおりに実施してみた。
- http://st-jp.blogspot.jp/2012/02/doing-vfork-resource-temporarily.html

あらかじめ、rebaseというパッケージをインストールしておく必要がある。
#+BEGIN_SRC sh
apt-cyg rebase
#+END_SRC
  
その上で、管理者権限で =c:\cygwin\bin\ash.exe= を実行し、下記を実行する。
#+BEGIN_SRC sh
$ /bin/rebaseall
#+END_SRC

** DONE cygwinでsvn upgradeに失敗する。               :cygwin:svn:hamari:
   CLOSED: [2012-08-28 火 23:46]

本格的にcygwinをputty代替として使っていく気になったので、Subversionに関
してもTortoiseSVNからcygwin版のSubversionを使用することにした。
#+BEGIN_SRC sh
apt-cyg install subversion
#+END_SRC
インストール後、今まで使用していたリポジトリで =svn status= を実行したら、upgradeしろと言われたので
してみたところ、下記のエラーが。
#+BEGIN_SRC sh
$ svn upgrade
svn: E200029: Couldn't perform atomic initialization
svn: E200030: SQLite compiled for 3.7.13, but running with 3.7.3
#+END_SRC

ぐぐってみたところ、TortoiseSVNがSQLite3を使用しているのが原因のようだっ
たので、TortoiseSVNを削除してらリトライ。でも変化せず。
#+BEGIN_SRC sh
$ sqlite3
SQLite header and source version mismatch
2010-10-08 02:34:02 2677848087c9c090efb17c1893e77d6136a9111d
2012-06-11 02:05:22 f5b5a13f7394dc143aa136f1d4faba6839eaa6dc
#+END_SRC

ソースと実行ファイルでバージョンの不一致がおこっている模様。でもソース
からビルドした記憶はないんだけどなぜだろう。
よくわからないので、 =apt-cyg find sqlite3= して関連するパッケージを調べて全て削除した。
#+BEGIN_SRC sh
$ apt-cyg remove libsqlite3-devel libsqlite3_0 odbc-sqlite3 sqlite3 sqlite3-debuginfo
Removing libsqlite3-devel
Package libsqlite3-devel removed
Removing libsqlite3_0
Package libsqlite3_0 removed
Package odbc-sqlite3 is not installed, skipping
Removing sqlite3
Package sqlite3 removed
#+END_SRC

そして、再インストール。
#+BEGIN_SRC sh
$ apt-cyg install sqlite3
#+END_SRC

今度はうまくいった。
#+BEGIN_SRC sh
$ svn upgrade
Upgraded '*************'
Upgraded '*************'
 ：
#+END_SRC

** DONE cygwinでgitを使おうとしたら、 cygcrypto-0.9.8.dllがないと怒られる。 :cygwin:hamari:
   CLOSED: [2012-08-28 火 23:46]

#+BEGIN_SRC sh
$ git
/usr/bin/git.exe: error while loading shared libraries: cygcrypto-0.9.8.dll: cannot open shared object file: No such file or directory
#+END_SRC
下記で解決。
#+BEGIN_SRC sh
apt-cyg install libopenssl098
#+END_SRC

- http://cygwin.com/ml/cygwin/2003-08/msg00628.html
   
** DONE puttyをやめて、cygwin Terminalにする                     :cygwin:ssh:
   CLOSED: [2012-08-27 月 23:46]

puttyベースのminntyがいつのまにcygwinに完全統合されて、 =Cygwin
Terminal= というアプリになっていたので「putty + pagent」の組み合わせを
やめて、 =Cygwin Terminal= と =ssh-agent= を組みあわせてCygwinだけで
SSH接続を実現することにした。

その際、screenを導入することにした。screenを導入することによって、起動
の高速化はもちろん、ssh-agentプロセスの共有化ができるので、その都度鍵の
設定をする必要がなくなるからだ。

導入は簡単。
#+BEGIN_SRC sh
$ apt-cyg install screen
#+END_SRC

次に設定ファイル。
#+BEGIN_SRC sh
defencoding utf8
escape ^z^z
startup_message off
vbell off
hardstatus alwayslastline "%w"
#+END_SRC

で端末を利用するときは次の手順で。
#+BEGIN_SRC sh
$ ssh-agent bash
$ ssh-add ~/.ssh/id_dsa
$ ssh-add -l # 確認
$ screen
$ ssh -A HOST
#+END_SRC
ssh-agentを起動してから、screenすることで毎回ssh-agent
とssh-addをする必要がなくなる。

あとは必要に応じて、 =C-z c= で仮想端末を追加すれば良い。これで、
=Cygwin Terminal= で疑似マルチターミナルが実現できた!

** DONE Windowsでプロセスツリーや実行ファイルのパスを表示したい     :windows:
   CLOSED: [2012-08-27 月 11:46]

Windowsで作業をしていると、特定のプロセスを落したいことがよくあります。
しかし、標準添付されているタスクマネージャでは、表示されているプロセス
がどこのプログラムなのか？(PATHがわからない)、もしくは、どのプロセスか
ら呼びだされたなのかがわからなかったりして、結構不便です。


そんな時にはこれ。Microsoft謹製のツールです。
- [[http://technet.microsoft.com/ja-jp/sysinternals/bb896653.aspx][ProcessExplorer]]
file:img/processExplorer.jpg 

この ツールは、プロセスの親子関係を表示したり、プロセスの実行ファイルの
パスなどが表示できるツールです。なので、「どのプロセスかわからないけど、
cygwin関連のプロセスをkillしたい!」てなときに、実行ファイルのパスから手
掛かりを得たりできます。

なぜデフォルトで入っていないのか不思議。

** DONE pushマクロ                                                :emacslisp:
   CLOSED: [2012-08-29 水 14:19]

pushはマクロで、setqマクロに展開される。
#+BEGIN_SRC emacs-lisp
(push X L) ; -> (setq L (cons X L))
#+END_SRC

なので、下記のようにリストを直接指定できない。
#+BEGIN_SRC emacs-lisp
(push d '(a b c))  
#+END_SRC
なぜなら、これは下記のように展開されるから。
#+BEGIN_SRC emacs-lisp
(setq '(a b c) (cons d '(a b c)))
#+END_SRC

pushの引数にはシンボルを指定する必要がある。
#+BEGIN_SRC emacs-lisp
(setq l '())
(push "hoge" l)
#+END_SRC

** DONE Clojureでxmlを読みこむ方法                                  :clojure:
   CLOSED: [2012-08-28 日 09:53]

- http://d.hatena.ne.jp/sy-2010/20110405/1301992585

*** 基本
#+BEGIN_SRC sh
<parent>
	<child>
		hello
	</child>
</parent>
#+END_SRC

#+BEGIN_SRC Clojure
user> (x/parse (java.io.File. "./test.xml"))
{:tag :parent, :attrs nil, :content [{:tag :child, :attrs nil, :content ["\n\t\thello\n\t"]}]}
#+END_SRC

xml-seq を使用すると、それぞれのタグが、rootになった状態で展開される。
#+BEGIN_SRC clojure
user> (xml-seq (x/parse (java.io.File. "./test.xml")))
(
{:tag :parent,
  :attrs nil,
  :content [
    {:tag :child,
     :attrs nil,
     :content [
       "\n\t\thello\n\t"
     ]}]}
 {:tag :child,
  :attrs nil,
  :content [
    "\n\t\thello\n\t"]}
 "\n\t\thello\n\t"
)
#+END_SRC

こうすることで、xmlがフラットなシーケンスデータになる。
そこでforなどの従来のシーケンス関数が使えるというわけ。
#+BEGIN_SRC sh
<parent>
	<child name="taro">hello</child>
	<child name="">hi</child>
</parent>
#+END_SRC

#+BEGIN_SRC clojure
user=> (for [x (xml-seq (parse (java.io.File. "./test.xml"))) :when (= :child (:tag x))] (:name (:attrs x)))
("taro" "hanako")
#+END_SRC

xmlのデータが画面に表示されると、場合によってはスクロールが重くなるので、
そんな時はC-c M-o でバッファクリアすると良い感じ。

*** 応用：文字列としてのXMLを読みこむ
同期的に一度だけ読むのであれば、 =clojure.xml.parse= 
の関数に直接ファイルやURIを指定するだけで良い。
しかし現実的には、タイムアウトなどを設定したり、非同期のライブラリを使用して、
並列に複数のXMLを同時に取得することが多いと思う。

そんな時は、直接URLを渡すのではなく、別の手段で取得した文字列を渡したくなると思う。
というわけで、clojure.xml.parseに文字列を渡す方法。
#+BEGIN_SRC clojure
user> (doc x/parse)
-------------------------
clojure.xml/parse
([s] [s startparse])
  Parses and loads the source s, which can be a File, InputStream or
  String naming a URI. Returns a tree of the xml/element struct-map,
  which has the keys :tag, :attrs, and :content. and accessor fns tag,
  attrs, and content. Other parsers can be supplied by passing
  startparse, a fn taking a source and a ContentHandler and returning
  a parser
nil
#+END_SRC
parse関数の引数は、URI文字列か、InputStreamを渡す必要があるので
JavaAPIを使って文字列をStreamに変換する。
具体的には、java.ioByteArrayInputStreamを使用すれば良い。
#+BEGIN_SRC clojure
user> (def str-xml-data "<parent><child>hello</child></parent>")
user> (import '(java.io ByteArrayInputStream))
user> (x/parse (ByteArrayInputStream. (.. str-xml-data getBytes)))
{:tag :parent, :attrs nil, :content [{:tag :child, :attrs nil, :content ["hello"]}]}
#+END_SRC
String文字列のをまるごと渡すのでxmlが巨大な場合は注意。

** DONE GIMPについて                                                   :gimp:
   CLOSED: [2012-08-07 日 09:52]
*** 概要
- gimp最新は、ver2.8
- マニュアルは下記が一番わかりやすかった。
 - http://gimp2-how-to-use.blogspot.jp/
 - 他のサイトは最新でなかったり、解説が細かすぎたり、断片的だったり、広告が重かったり。
*** 操作していて、たくさんあるウィンドウが無くなったりすることがある。そんなときは
- [ウィンドウ] -> [ドッキング可能なダイアログ]

*** 画像をコピーして貼り付けると勝手にレイヤーができてどうしていいかわからない
- レイヤーダイアログボックスでそのレイヤを選択して、右から2番目の「いかり」みたいなボタンを押す。するとすぐ下のレイヤと結合されてひとまず落ちつく。
*** 線(描画するドット)の大きさを変更したい
- [ウィンドウ] -> [ドッキング可能なダイアログ] -> [ブラシ] 
- ブラシをダブルクリックしてブラシエディタを起動
** DONE ディレクトリのパーミッションの見方                            :linux:
   CLOSED: [2012-06-29 金 09:49]

#+BEGIN_SRC sh
drwxrwxr-x  5 miki dev 4096  1月 20 16:21 hoge
#+END_SRC
- d:ディレクトリの意味
- r:読めるという意味。rのみの場合、ファイルの一覧しか得られない。
　cdもできなければ、ファイルの（ディレクトリ）属性やファイルサイズもlsで表示されない。
- w:そのディレクトリの保持する、ファイル（ディレクトリ）の名前変更、書き込み、新規作成ができるということ。
- x:ディレクトリにアクセスできるという意味。cdができ、ファイル（ディレクトリ）のサイズや属性が表示される。

** DONE Compojure + SLIMEを試す その1                     :clojure:compojure:
   CLOSED: [2012-08-03 金 23:44]

*** まずはハローワールド
今更ながらcompojureで簡単なウェブアプリ試すことにした。素振り大切。

最初のとっかかりは公式ページのとおりにやると簡単。
- https://github.com/weavejester/compojure/wiki/Getting-Started
lein1だとpluginタスク(コマンドみたいなもの)で必要なモジュールをインストー
ルしなければならなかったが、lein2だと下記コマンドで必要なものを全部とっ
てきつつ、プロジェクトディレクトリも用意してくれる。
※pluginタスクはlein2から廃止されたらしい。
#+begin_src sh
$ lein new compojure hello-world
#+end_src

あとはサーバーを立ちあげれば、ringが勝手に空いてるポートを選択してブラ
ウザを開いてくれる。
#+begin_src sh
$ cd hello-world
$ lein ring server
#+end_src

自分の場合は3000ポートでした。
- http://localhost:3000/

試しに下記のコードをいじってみる。
#+begin_src clojure
;; src/hello_world/handler.clj
(defroutes app-routes
  (GET "/" [] "hoge?") ;; ←ここを書き換える
  (route/not-found "Not Found"))
#+end_src

でアクセスすると即反映される!これは便利!

*** hiccup導入
下地はできた!でも今のままだとビューを自力で文字列出力しなくてはんらない
のでテンプレートを使いたいところ。自分の場合は全部clojureで書けるテンプ
レートライブラリのhiccupがずっと気になってたので早速導入してみる。
- https://github.com/weavejester/hiccup/
導入はleinningenのおかげで恐しく簡単。
#+begin_src clojure
  :dependencies [[org.clojure/clojure "1.4.0"]
                 [compojure "1.1.1"]
                 [hiccup "1.0.0"] ;; ←これを追加する
                 ]
#+end_src

あとはさっきのhandler.cljを修正してブラウザアクセスするだけでオッケーだ。
#+begin_src clojure
(:use compojure.core
      hiccup.core)  ;; hiccup.coreを追加
(defroutes app-routes
  (GET "/" [] (html [:ul                   ;; html関数を使ってみる。
                   (for [x (range 1 4)]
                    [:li x])])))
#+end_src

すばらしす!

*** compojure + slime
でもemacserとしてはやっぱりslimeから使いたい!ってことで方法をぐぐる。す
ると以下の素敵なページが!
- http://tech-pon.tumblr.com/post/19624611690/hello-compojure-2-emacs-slime
このサイトの内容を参考にしつつ、公式サイトで方法を調べてみた。
- https://github.com/technomancy/swank-clojure/
どうやらproject.cljにプラグインを追加すれば良いらしい。
#+begin_src clojure
  :plugins [[lein-ring "0.7.1"]
            [lein-swank "1.4.4"]  ;; これを追加
            ]
#+end_src
そして、M-x clojure-jack-inしてみる。あとはshell上から実行していた
「lein ring server」に相当するコマンドをslimeのreplバッファから実行すれ
ば良いのだが方法はわからないのでググる。そしたら下記にあった。
- https://github.com/mmcgrana/ring/wiki/Interactive-Development

どうやらring-serveというものが必要らしいので開発環境用のところに追加する。
#+begin_src clojure
  {:dev
   {:dependencies [
                   [ring-mock "0.1.2"]
                   [ring-serve "0.1.1"] ;; ←これを追加
                   ]}}
#+end_src

一旦slimeを終了させてから「M-x slime-list-connections」再度「M-x
clojure-jack-in」する。

#+begin_src clojure
user> (use 'hello-world.handler)
nil
user> (use 'ring.util.serve)
#+end_src

これでいけると思ったら下記のエラー。hiccup/pageなって使ってないと思った
のになぜだろう。
#+begin_src sh
Could not locate hiccup/page_helpers__init.class or hiccup/page_helpers.clj on classpath: 
  [Thrown class java.io.FileNotFoundException]
#+end_src

調べてみると問題として挙がってた。
- https://github.com/weavejester/hiccup/issues/41

内容をまとめると
#+begin_src sh
lein-ring 0.7.0
Ring 1.1.0. (開発用)
#+end_src
が必要らしい。project.cljには既に「lein-ring 0.7.1」が記述してあったので
[ring/ring-devel 1.1.0]を追加してみた。
#+begin_src clojure
  {:dev
   {:dependencies [
                   [ring/ring-devel "1.1.0"]  ;; ←これを追加
                   [ring-mock "0.1.2"]
                   [ring-serve "0.1.1"]
                   ]}}
#+end_src
で、念のためlein depsしてswankを再起動。
そして下記を実行
#+begin_src clojure
user> (require 'hello-world.handler)
nil
user> (use 'ring.util.serve)
nil
user> (serve 'hello-world.handler)
Started web server on port 3000
nil
#+end_src
すると、
- http://0.0.0.0:3000/
なぜか0.0.0.0のIPに飛ばされた。。。
ブラウザには何も表示されず。
- http://localhost:3000/
にアクセスすると404エラーになっている。なぜだ。。。

しばらく奮闘したがこれから先に進めない。。
今日はここまで。  
#+BEGIN_HTML
<a href="/article/2012/08/08_compojure-slime-2.html">その2</a>に続く
#+END_HTML

** DONE Compojure + SLIMEを試す その2                     :clojure:compojure:
   CLOSED: [2012-08-08 水 21:33]


#+BEGIN_HTML
その1は<a href="/article/2012/08/03_compojure-slime-1.html">こちら</a>
#+END_HTML

*** 前回でSLIMEから起動できなかった問題

下記で実行できた!ふぅ。
#+BEGIN_SRC clojure
user> (use 'hello-world.handler)
nil
user> (use 'ring.util.serve)
nil
user> (serve app)
Started web server on port 3000
nil
#+END_SRC

*** compojureでcssを定義する方法
以下のサイトを参考にした。
- http://k2nr.me/blog/2012/03/22/deploy-clojure-app-on-heroku-with-clojure-1.html
まず、下記のようにroutesを定義する。
#+begin_src clojure
;; src/hello_world/handler.clj
(defroutes app-routes
  ：
  (route/resources "/") ;; ←ここを追加
  ：
  )
#+end_src
続いて、cssファイルを特定のパスに定義。
#+BEGIN_SRC sh
cd {プロジェクトルート}
mkdir -p resources/public/css
touch resources/public/css/style.css ;; 中身は適当に編集
#+END_SRC
呼び出し側では以下のようにinclude-css関数を呼び出す。
#+BEGIN_SRC clojure
  [:head
    [:title "hello-world"]
    (include-css "/css/style.css")]
#+END_SRC

*** compojureでtestコードを実行する方法
leinについているプラグインでプロジェクトをつくると自動的にテストの雛形
もついてくる。replからこのテストを起動する方法は以下のとおり。
#+BEGIN_SRC clojure
user> (use 'hello-world.test.handler)
nil
user> (use 'clojure.test)
nil
user> (run-tests 'hello-world.test.handler)

Testing hello-world.test.handler

Ran 1 tests containing 3 assertions.
0 failures, 0 errors.
{:type :summary, :pass 3, :test 1, :error 0, :fail 0}
#+END_SRC
これでやっと本格的に書き始める準備ができた。
なにやろう。とりあえずTwitterの連携部分をつくるか。

*** リクエストパラメータについて
Compojureはringというライブラリの上に乗っかってるフレームワークなので
基本知識はringから得る必要がある。
例えば、compojure.core/defrouteマクロは、結局ringのハンドラに展開される。
#+BEGIN_SRC clojure
;; これは
(defroutes serve
  (GET "/" [] "Hello world"))

;; こんな感じ?
(defn serve
  [request]
  (if (and (= (:request-method request) :get)
           (= (:uri request) "/"))
  ;; response
  {:status 200
   :headers {"ContentType" "text/html"}
   :body "Hello world"}))
#+END_SRC
- 参考
 - http://d.hatena.ne.jp/sDaigo/20100717/1279338938

この展開されたhandlerの引数にはrequestという変数がある。
リクエストパラメータについては以下にドキュメントがある。
- https://github.com/mmcgrana/ring/wiki/Concepts

たぶん予測だけれども、このrequestマップの中身は、ringの
middlewareかなんかで、もうちょっと整理されたかたちで入ってくるのな？
よくわからないので、下記のようなコードを書いてパラメータを確認してみた。
#+BEGIN_SRC clojure
(defroutes app-routes
  (GET "/params" {params :params} (str params))
  (route/not-found "Not Found"))
#+END_SRC 
http://localhost:3000/params?hoge=aaa&fuga=111
結果は
#+BEGIN_SRC sh
{:fuga "111", :hoge "aaa"}
#+END_SRC
てな感じに。キーと値がそれぞれマップとして格納されてきた。
さらにキーはclojureのキーワードに変換されてる。

** DONE デシジョンテーブルの作成                                    :tips:test:
   CLOSED: [2012-06-28 木 20:04]

仕様書やテスト項目書を作成するときに条件を整理するときに役だつデシジョンテーブル。
いつも書き方忘れてしまうのでここで整理しておく。
- まず条件を抽出。
- この条件を2進数の各桁とみたてて、2進数のパターンを書きだす。
 - この時、条件のパターン数は、条件数=nとしたとき2^nとなる。
 - たとえば条件数が3つだった場合、条件数=3としたとき2^3=8となる。
- 0をYes, 1をNoとみたてる。
- 条件を行の見出し、パターン番号を列の見出しとするため転置する。
- 次に各パターンに対応する動作を記述する。

以下に例を示す。

*** まず条件を抽出。
確認したい動作を決定する条件を真偽値にみたて分解して抽出する。
ここでは3パターンとする。
 - 条件1
 - 条件2
 - 条件3
*** この条件を2進数の各桁とみたてて、2進数のパターンを書きだす。
ただし条件の数によってはパターンが爆発してしまうので、
どのパターンを採用するかを慎重に決める。

| 条件1 | 条件2 | 条件3 |
|     0 |     0 |     0 |
|     0 |     0 |     1 |
|     0 |     1 |     0 |
|     0 |     1 |     1 |
|     1 |     0 |     0 |
|     1 |     0 |     1 |
|     1 |     1 |     0 |
|     1 |     1 |     1 |

*** 0をYes, 1をNoとみたてる。
| 条件1 | 条件2 | 条件3 |
|     Y |     Y |     Y |
|     Y |     Y |     N |
|     Y |     N |     Y |
|     Y |     N |     N |
|     N |     Y |     Y |
|     N |     Y |     N |
|     N |     N |     Y |
|     N |     N |     N |

*** 条件を行の見出し、パターン番号を列の見出しとするため転置する。

|       | #1 | #2 | #3 | #4 | #5 | #6 | #7 | #8 |
| 条件1 |  Y |  N |  Y |  N |  Y |  N |  Y |  N |
| 条件2 |  Y |  Y |  N |  N |  Y |  Y |  N |  N |
| 条件3 |  Y |  Y |  Y |  Y |  N |  N |  N |  N |
*** 次に各パターンに対応する動作を記述する。
条件のパターンが成立したときに確認できる動作をひとつの動作まで分解し洗いだす。
それぞれのパターン毎に該当する動作に○をつけていく。

|       | #1 | #2 | #3 | #4 | #5 | #6 | #7 | #8 |
| 条件1 | Y  | N  | Y  | N  | Y  | N  | Y  | N  |
| 条件2 | Y  | Y  | N  | N  | Y  | Y  | N  | N  |
| 条件3 | Y  | Y  | Y  | Y  | N  | N  | N  | N  |
| 動作1 | ○ | ○ | -  | ○ | -  | -  | -  | ○ |
| 動作2 | -  | ○ | ○ | ○ | -  | -  | -  | ○ |

これで完成。

|       | #1 | #2 | #3 | #4 | #5 | #6 | #7 | #8 |
| 条件1 | Y  | N  | Y  | N  | Y  | N  | Y  | N  |
| 条件2 | Y  | Y  | N  | N  | Y  | Y  | N  | N  |
| 条件3 | Y  | Y  | Y  | Y  | N  | N  | N  | N  |
| 動作1 | ○ | ○ | -  | ○ | -  | -  | -  | ○ |
| 動作2 | -  | ○ | ○ | ○ | -  | -  | -  | ○ |
| 確認  | ○ | × | ○ | ○ | ○ | ○ | ○ | × |


あとは、各パターン番号の条件が成立したとき、
あてはまる動作が確認できるかのチェック欄を設け、
それぞれ○×でチェックする。

** DONE 「Variable binding depth exceeds max-specpdl-size」というメッセージがでて何も操作できなくなった。 :emacs:hamari:
   CLOSED: [2012-06-26 火 23:21]

どれが原因かわからないが、jdeeやe2wmを起動するとまれに =Variable binding depth exceeds max-specpdl-size= と表示され、
何も操作できなくなることがある(M-xをanythingにしているため、emacsを終了することすらできない!)。
こうなるととりあえず強制終了するしかない。
再発防止としては、下記のように上限を増やしておく。
#+BEGIN_SRC emacs-lisp
(setq max-lisp-eval-depth 5000)
(setq max-specpdl-size 6000)
#+END_SRC
- http://d.hatena.ne.jp/a666666/20100221/1266695355

** DONE o-blogのfork元から最新を取り込む                      :git:
   CLOSED: [2012-06-11 月 22:07]

fork_master という名前を作りマージする。pullでも良い。
#+begin_src sh
git remote add fork_master https://github.com/renard/o-blog.git
git fetch fork_master
git merge remotes/fork_master/master
#+end_src

参考
- http://qiita.com/items/6493eec3ce156b83fb9c

** DONE javapコマンドを使ってみた。                                    :java:
   CLOSED: [2012-06-02 土 12:08]

Javaは =*.java= から =*.class= を生成するが、これはテキストエディタで閲覧できないバイナリファイルだ。
これをエディタで閲覧できる状態にするには、jdkに標準搭載されているjavapコマンドを使用しすれば良い。

例えばhogeというパッケージにあるFuga.javaがあるとする。
#+BEGIN_SRC c
package hoge;
public class Fuga {
    public static void main(String[] args) {
        System.out.println("Hello Javap!");
    }
}
#+END_SRC

これをコンパイルした結果をjavapで見たい時は、以下のようなコマンドを叩けばいい。
このときhoge.Fugaクラスはhoge/Fuga.lcassというディレクトリ構造になければならない。
#+BEGIN_SRC sh
javap -c hoge.Fuga > Fuga.code
#+END_SRC

Fuga.codeは以下のようになる。
#+BEGIN_SRC c
Compiled from "Fuga.java"
public class hoge.Fuga {
  public hoge.Fuga();
    Code:
       0: aload_0       
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return        

  public static void main(java.lang.String[]);
    Code:
       0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
       3: ldc           #3                  // String Hello Javap!
       5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       8: return        
}
#+END_SRC



** DONE Android開発環境の準備                                       :android:
   CLOSED: [2012-05-23 水 08:27]

予めjdkとeclipseを入れておく。

*** AndroidSDKの配置
Windwos版の場合、インストーラ版があるが、これはProgram Filesにインストールされしまう。
Program Files配下は管理者権限が必要になったり、パスに空白を含んでたりで勝手が悪いため、アーカイブ版を使用する。

- http://developer.android.com/sdk/index.html
- linux版、windows版どちらの場合もアーカイブ版をダウンロードして~/opt/配下に展開する。

*** SDKManagerの起動と設定
解凍したフォルダの中にSDKManagerの実行ファイルがあるので起動する。
**** Linux版の場合の起動
Windows版とLinux版で実行ファイルの構成が違う。
Linux版の場合、SDKManagerとAVDManager(エミュレータ作成ツール)が一緒になっている。
Linux版の場合は、下記で起動する。
#+begin_src sh
tools/android &
#+end_src
- ウィンドウ-AndroidSDKおよびAVDマネージャを選択する。
- AvailablePackageで全て選択してインストールする。

**** 必要なパッケージのインストール
Android SDK Managaer を使用することにより、最新のSDKに更新することができる。
Android SDK ManagaerはEclipseとは独立したGUIツール。
- Tools
- Andoroid 2.3.x をチェックする(機種個別のSDKは必要に応じて選択)
- [Extras] -> [Google USB Driver Package]

*** パスの設定
SDKを展開したフォルダにあるtoolsをPATHに通す。
先にSDKManagerでplatform-toolsをインストールしておく。
SDKを展開したディレクトリを$ANDOROID_SDKとして下記の2ディレクトにパスを通す。
#+begin_src sh
$ANDROID_SDK\tools
$ANDROID_SDK\platform-tools
#+end_src

*** EclipseにADTをインストールする。
ADT(AndroidDeveloppersTool)は、AndroidSDKとEclipseの橋渡しをするプラグイン。
- [メニュー] - [ヘルプ] - [新規ソフトウェアのインストール]
- 右上の追加ボタン押下
- 下記をインストールする
 - 名前：andorid(任意)
 - ロケーション: http://dl-ssl.google.com/android/eclipse/
- 開発をチェックしてインストール

インストールが終了したらAndroidSDKの場所を指定する。
- [メニュー] - [ウィンドウ] - [設定] - Android
- SDKロケーションにインストールしたSDKのパスを入力

*** AndroidVirtualDeviceの作成

*** 参考
- http://techbooster.jpn.org/andriod/environment/5580/

** DONE Javaでカンマ区切りの数字を出力する。                           :java:
   CLOSED: [2012-05-21 月 08:27]

#+begin_src sh
int value = 99999999;
String.format("%1$,3d円", value); // => 99,999,999円;
#+end_src
この場合「%1$,3d」が書式になる。
- %は書式の開始を示す。
- 1$は引数のインデックスを示す。ひとつの引数を使い回すときなどに必要。今回の場合はひとつなので無くても良い。
- ,は区切りたい文字
- 3 は区切りたい桁
- d は引数が数字(デシマル)を示す。

** DONE GalaxyNote(国際版)をroot化                                  :android:
   CLOSED: [2012-05-18 金 08:27]

*** 参考
- http://juggly.cn/archives/44872.html
- http://pocketgames.jp/blog/?p=19123
- http://forum.xda-developers.com/showthread.php?t=1329360

mmsの設定の紹介
- http://d.hatena.ne.jp/ks24/20120217/1329476432

*** ODIN3をダウンロード
適当にググって下記を取得。
- Odin3 v1.85.exe

*** 下記をPCにダウンロード
適当にググって下記を取得。
- netchip-cwm-update2.tar（Clockwork Modリカバリ）
- Superuser-3.0.6-efgh-signed.zip
*** Superuser-3.0.6-efgh-signed.zipをGalaxy Noteの/sdcard直下にコピー。
GalaxyNoteをUSBデバイスとして認識させて、Windowsエクスプローラなどでコピーする。
*** ODin3起動
PDAボタンを押下し、netchip-cwm-update2.tarを選択する。
下記だけがチェックされ、他のチェックが外れていることを確認する。
- AutoRevoot
- F.ResetTime
- PDA

*** CWMを焼く
- GALAXY Noteををダウンロードモードで起動
（ボリューム下とホームボタンを押しながらPowerボタン）.
- Galaxy NoteとPCを接続。
- ODin3がGalaxyNoteを認識したら、startボタンを押下する。
- GalaxyNoteが再起動するまで待つ。

*** リカバリーモードで起動する
- galayxNoteの電源OFF
- リカバリーモードで起動する
（ボリューム上とホームボタンを押しながらPowerボタン）.
*** SuperUserアプリツールをインストール
- 「install from zip sdcard」を選択する
 - ボリュームボタンで選択、パワーボタンで決定
- 「choose zip from internal sdcard」を選択する
- 「Superuser-3.0.6-efgh-signed.zip」を選択する
- インストールが成功したら、メニューからPowerOffを選択して電源オフ
*** SuperUserアプリを確認
root化すると、起動時の画面にブックリマークが表示される。
。。。titanium backupを起動するも、rootの取得に失敗したとメッセージが表示されうまくいかない。
*** SU-busyboxでをインストール
下記を参考にして、SU-Busybox-installer.zipをSubhperUser
アプリと同様の手順でインストールする
- http://forum.xda-developers.com/showthread.php?t=1329360

これでうまくいった。
dpi-changerでフォントを変更した。

** DONE gimpで画像サイズを変更する                                     :gimp:
   CLOSED: [2012-05-12 土 20:42]

- [メニュー] -> [画像] -> [画像・拡大縮小] 
- ダイアログが表示されるので、適切なサイズを指定して保存すればOK

** DONE ESC問題                                           :hamari:emacs:evil:
   CLOSED: [2012-05-17 11:38]

evilを導入したのはいいが、putty経由の端末で動かしたときに問題がでててきた。
ESCの反応が悪いのだ。具体的には、ESCキーがMETAキーとして判定されているために、
Ins->Normモードに移行するのに0.5秒ほど遅延する。
小さな遅延のようだが、体感としては非常に反応が鈍く感じるので問題である。
windwosのemacs(GUI, cygwin(CUI))では問題ない。
したがってPuttyの問題であると思われる(viでも同じ減少が発生していた)。

と思ったが、調査の結果、tmuxに問題があったようである。以下の設定で解消した。
#+BEGIN_SRC sh
# .tmux.conf
# ESCの反応が悪いのを正す
set -s escape-time 0
#+END_SRC

** DONE ubuntu serverを導入                                          :ubuntu:
   CLOSED: [2012-05-12 日 08:01]

自宅サーバにはCentOSを入れていたが、UbuntuMagazineを読んでいたらUbuntuを入れたくなったので、
UbuntuServerを入れてみた。
構築にはシンプルな環境を用意してその上にKVMで実運用のためのサーバを構築していく方針。

- kvmを運用するためのプレーンな環境の構築を目指す。
- Ubuntu 12.04 LTS Server
- CPU:Amd2.7Ghz HDD:160GBx2 Mem:2GB
- とりあえずsshd まで
*** LiveUSB の作成
- https://wiki.ubuntulinux.jp/UbuntuTips/UsbInstall/CreateUSBStartupDisk
- Windows上に作成したUbuntuでUSBに起動イメージをインストールする。
- 予めUbuntuServer64bit版のisoイメージをダウンロードしておく。
- USBを指し込んだら、VirtualBoxの環境設定で＋アイコンをクリックする。
- ダッシュから =USB= と入力すれば恐らく「USBスタートアップディスクの作
  成」アプリが表示されるので、これを使って起動USBを作成する。
*** RAID1用パーティションの設定
下記を全面的に参考にした。
 - http://rucat.wordpress.com/2012/06/24/raid1_lv/
- RAID1を採用する(HDDを2台使用し、1台をミラーリングする方式)。
- HDD1台をそれぞれ2分割する。
 - 1GB　基本パーティション　ext2　/boot　起動フラグ：オン
 - 残り 論理パーティション
- 基本パーティション同士(md0)、論理パーティション同士(md1)でRAID1を構築
- LVMを作成
 - ボリューム名はvg00
| 名前     | マウントポイント | 割り当て |
| root     | /                | 70GB     |
| tmp      | /tmp             | 1GB      |
| var      | /var             | 10GB     |
| usrlocal | /usr/local       | 10GB     |
| swap     | swap領域         | 10GB     |
| home     | /home            | 残り全部 |
*** パーティションの設定
- HDD2台をひとつのHDDと見なすためにLVMを使用する。
 - HDD 160GB 基本パーティション
 - HDD 160GB 基本パーティション

- LVMを作成
 - ボリューム名はvg00
| 名前 | マウントポイント | ファイルシステム | 割り当て |
| boot | /boot            | ext2             | 1GB      |
| swap | swap領域         |                  | 3GB      |
| root | /                | ext4             | 残り     |

*** インストール後の作業
.bashrcに下記を追加
#+BEGIN_SRC sh
case $TERM in
linux) LANG=C ;;
*) LANG=ja_JP.UTF-8;;
esac
#+END_SRC

まずは更新
#+BEGIN_SRC sh
sudo apt-get update
sudo apt-get dist-upgrade
#+END_SRC

最低限の環境構築
#+BEGIN_SRC sh
sudo apt-get install etckeeper
sudo apt-get install mosh
sudo apt-get install git
sudo apt-get install emacs
git clone https://github.com/mikio/dotfiles.git
#+END_SRC

**** sshd
- ポートの変更
- パスワードログインの禁止
- rootログインの禁止
- ログインユーザの制限

rsa形式、パスフレーズありで下記コマンドで鍵ペアを作成する。
#+BEGIN_SRC sh
$ ssh-keygen
#+END_SRC

鍵ペアができたら下記コマンドでsshサーバへ転送する。
このときまだsshサーバはパスワード認証のまま。
#+BEGIN_SRC sh
$ ssh-copy-id -i id_rsa.pub 192.168.10.2
#+END_SRC

その後、鍵認証で接続できるか確認する。
Desktop版Ubuntuだとx-sessionで勝手にssh-agentが起動している。
- http://d.hatena.ne.jp/pekatuu/20090415/p2
なので鍵を追加する。
#+BEGIN_SRC sh
$ ssh-add ~/.ssh/id_rsa.pub
$ ssh 192.168.10.2
#+END_SRC

無事接続できたら、サーバ側で認証設定を厳しく設定。
/etc/ssh/sshd_config
# Portは 30890 
#+BEGIN_SRC sh
=== modified file 'ssh/sshd_config'
--- ssh/sshd_config	2012-09-22 20:00:00 +0000
+++ ssh/sshd_config	2012-09-22 21:11:08 +0000
@@ -2,7 +2,7 @@
 # See the sshd_config(5) manpage for details
 
 # What ports, IPs and protocols we listen for
-Port 22
+Port xx 
 # Use these options to restrict which interfaces/protocols sshd will bind to
 #ListenAddress ::
 #ListenAddress 0.0.0.0
@@ -24,7 +24,7 @@
 
 # Authentication:
 LoginGraceTime 120
-PermitRootLogin yes
+PermitRootLogin no
 StrictModes yes
 
 RSAAuthentication yes
@@ -48,7 +48,7 @@
 ChallengeResponseAuthentication no
 
 # Change to no to disable tunnelled clear text passwords
-#PasswordAuthentication yes
+PasswordAuthentication no
 
 # Kerberos options
 #KerberosAuthentication no
@@ -85,3 +85,4 @@
 # PAM authentication, then enable this but set PasswordAuthentication
 # and ChallengeResponseAuthentication to 'no'.
 UsePAM yes
+AllowUsers mikio
#+END_SRC

再起動
#+BEGIN_SRC sh
$ sudo /etc/init.d/ssh restart
#+END_SRC


**** 固定IP
#+BEGIN_SRC sh
mikio@whitebase:/etc$ sudo bzr diff
[sudo] password for mikio: 
=== modified file 'network/interfaces'
--- network/interfaces	2012-09-22 21:35:38 +0000
+++ network/interfaces	2012-09-22 21:58:28 +0000
@@ -9,7 +9,8 @@
 auto eth0
 iface eth0 inet static
 address 192.168.10.2
-network 255.255.255.0
+network 192.168.10.0
+netmask 255.255.255.0
 gateway 192.168.10.1
 dns-nameservers 192.168.10.1
#+END_SRC

#+BEGIN_SRC sh
sudo /etc/init.d/networking restart
#+END_SRC

**** DDNS設定 

$HOME/bin/free_dns.sh
#+BEGIN_SRC sh
wget -O /tmp/update_freedns.log --read-timeout=0.0 --waitretry=5 --tries=400 'http://freedns.afraid.org/dynamic/update.php?VFR2RnJVTVRNMG9BQU1mSWFEUTo1NTY2NDU2'
#+END_SRC

#+BEGIN_SRC sh
$ crontab -e 
# m h  dom mon dow   command
45 * * * * $HOME/bin/free_dns.sh
#+END_SRC

** DONE Ubuntu 12.04 LTS On ZENBOOK UX21E                            :ubuntu:
   CLOSED: [2012-05-12 日 08:01]

メインで使用していたノートが3年になるのでZENBOOKを買った。
次期モデルの噂も出始めてはいるが、いつになるかもわからないし、欲しいときが買いどきということで購入。

ubuntuもほとんどそのままの状態で大体の機能が使えている。

[[file:img/ubuntu-ux21e-640-480.jpg]]

以下を参考にした。
- https://help.ubuntu.com/community/AsusZenbook

インストール後の設定は別エントリにまとめている。

事前に2chや価格comで情報収集していたが、感想としてはやはりキーボードの打ちにくさが一番気になった。
他のキーボードを使わずに、このノートだけを使いつづければ、多分慣れてし
まって、なんとも思わなくなるんだろう。
けれども自分の場合、会社ではロジクールの打ちやすいキーボードを使用して
いるので凄く気になってしまう。。。

つぎにヒンジ。自分が丁度いいと思う角度で止めようと思っても、
自重でトルクがかかってパカっと最大まで開いてしまう。
普段大きな問題となることないが、地味に痛い。ただし固体差もあるだろうか
ら大丈夫な人もいるかと思う。

トラックパッドについては言われていたほど誤タッチもなく割と快適。キーボー
ドメインの操作のときはF9を押下すればオフにできるしね。

液晶については、視野角が狭く見づらいという意見があったが、自分は特に気にならない。
動画鑑賞メインとかビジュアル系の用途には多分よわいだろう。自分の場合は
プログラミングなので大丈夫かと。

バッテリーのもちに関してはまだ計測したわではないのでわからないがあまり
期待できないだろう。もって3時間てところか？

不満が多いエントリになってしまったが、全般としては、かなり満足している。
とても静かだし、薄くて軽い。なによりさくさく動く。

次期モデルは、オプションとしてIPSと高解像度化が図られるとのことだが
それに加えてキーボードとヒンジの問題が改善されればかなり使いやすくなると思う。

** DONE apacheのOrderディレクティブ                                  :apache:
   CLOSED: [2012-05-12 土 09:25]

久し振りに設定ファイルをいじったらすっかり忘れていた。
#+begin_src sh
Order deny,allow          
#+end_src
- Orderディレクティブは、アクセス制限の評価する順番を決める。
- deny,allow は拒否して許可する。意味としては、デフォルト許可で、必要なもだけ拒否。
- allow,deny は許可して拒否する。意味としては、デフォルト拒否で、必要なもだけ許可。

** DONE emacs + SLIME + node.js + swank-js でemacsからブラウザ上のjavascriptを実行してみる :emacs:
   CLOSED: [2012-05-10 木 23:24]

まず、Windows版のnode.jsをインストールしておく。インストーラなので簡単。
その後、npmでsocket.ioをインストール。
#+begin_src sh
dos> npm install socket.io
#+end_src

あとは、swank-jsをインストールする。

下記を参考にWindowsXP環境にインストールした。
- http://e-arrows.sakura.ne.jp/2011/06/connect-to-nodejs-and-chrome-from-emacs.html

上記記事では、本家は更新が止っているとあるが、最近は更新を再開したっぽい。
もろもろバグフィックスがされているようなのでオリジナルからswank-jsを取得した。
- https://github.com/swank-js/swank-js

インストール方法などは表記のとおりすればOKだが、windowsなのでうまくlnコマンドの部分がうまくいかない。
回避方法としてswank-js.elはMarmaladeからインストールした。
#+begin_src sh
M-x packagea-list-packages
#+end_src
下記を選択してixでインスール。
#+begin_src sh
slime-js          0.0.1       installed  Slime extension for swank-js.
#+end_src

あとは裏でnode swank.jsを走らせて、SLIMEに接続する。
#+begin_src sh
M-x slime-connect 127.0.0.1 4005
#+end_src

その後、repl上で接続したいURLを指定する。
#+begin_src sh
,target-url
#+end_src

次にブラウザ上で下記にアクセスする。
- http://localhost:8009/

その後、repl上で接続する。
#+begin_src sh
,select-remote
#+end_src

あとはrepl上で下記を実行するとlocalhost:8009上でjsが実行される。
#+begin_src sh
alert ("hoge")
#+end_src

** DONE node.jsのnpmでエラーが発生してインストールできない          :node.js:
   CLOSED: [2012-05-11 金 23:24]

WindowsXPでnpm経由でのモジュールのインストールができない。
#+begin_src sh
dos>npm install socket.io
npm http GET https://registry.npmjs.org/socket.io
npm http 304 https://registry.npmjs.org/socket.io
npm http GET https://registry.npmjs.org/policyfile/0.0.4
npm http GET https://registry.npmjs.org/socket.io-client/0.9.6
npm http GET https://registry.npmjs.org/redis/0.6.7
npm http 304 https://registry.npmjs.org/redis/0.6.7
npm http 304 https://registry.npmjs.org/policyfile/0.0.4
npm http 304 https://registry.npmjs.org/socket.io-client/0.9.6
npm http GET https://registry.npmjs.org/ws
npm http GET https://registry.npmjs.org/xmlhttprequest/1.2.2
npm http GET https://registry.npmjs.org/uglify-js/1.2.5
npm http GET https://registry.npmjs.org/active-x-obfuscator/0.0.1
npm http 304 https://registry.npmjs.org/ws
npm http 304 https://registry.npmjs.org/active-x-obfuscator/0.0.1
npm http 304 https://registry.npmjs.org/xmlhttprequest/1.2.2
npm http 304 https://registry.npmjs.org/uglify-js/1.2.5
npm http GET https://registry.npmjs.org/zeparser/0.0.5
npm http 304 https://registry.npmjs.org/zeparser/0.0.5
npm http GET https://registry.npmjs.org/zeparser/-/zeparser-0.0.5.tgz
npm http 200 https://registry.npmjs.org/zeparser/-/zeparser-0.0.5.tgz
npm http GET https://registry.npmjs.org/options
npm http GET https://registry.npmjs.org/commander
npm http 304 https://registry.npmjs.org/options
npm http 304 https://registry.npmjs.org/commander

> ws@0.4.14 install C:\Documents and Settings\mikio\node_modules\socket.io\node
_modules\socket.io-client\node_modules\ws
> node install.js


node.js:195
        throw e; // process.nextTick error, or 'error' event on first tick
              ^
Error: No such module
    at net_legacy.js:38:23
    at NativeModule.compile (node.js:469:5)
    at node.js:434:18
    at child_process.js:24:14
    at NativeModule.compile (node.js:469:5)
    at Function.require (node.js:434:18)
    at Function._load (module.js:282:25)
    at Module.require (module.js:341:17)
    at require (module.js:352:17)
    at Object.<anonymous> (C:\Documents and Settings\mikio\node_modules\socket.
io\node_modules\socket.io-client\node_modules\ws\install.js:1:83)

npm ERR! ws@0.4.14 install: `node install.js`
npm ERR! `cmd "/c" "node install.js"` failed with 1
npm ERR!
npm ERR! Failed at the ws@0.4.14 install script.
npm ERR! This is most likely a problem with the ws package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node install.js
npm ERR! You can get their info via:
npm ERR!     npm owner ls ws
npm ERR! There is likely additional logging output above.
npm ERR!
npm ERR! System Windows_NT 5.1.2600
npm ERR! command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nod
ejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "socket.io"
npm ERR! cwd C:\Documents and Settings\mikio\dev\swank-js
npm ERR! node -v v0.6.17
npm ERR! npm -v 1.1.21
npm ERR! code ELIFECYCLE
npm ERR! message ws@0.4.14 install: `node install.js`
npm ERR! message `cmd "/c" "node install.js"` failed with 1
npm ERR! errno {}
npm ERR!
npm ERR! Additional logging details can be found in:
npm ERR!     C:\Documents and Settings\mikio\dev\swank-js\npm-debug.log
npm not ok
#+end_src

本家のバージョンを確認してみると、バージョンは0.5.2。
どうやらWindows版のインストーラーができる前に手動でいれたnode.exeが
優先されて実行されていたらしい。

#+begin_src sh
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\Documents and Settings\mikio>node -v
v0.5.2

C:\Documents and Settings\mikio>where node
'where' は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。

C:\Documents and Settings\mikio>whereis node
node: /cygdrive/c/WINDOWS/system32/node.exe /cygdrive/c/WINDOWS/system32/node.ex
e

C:\Documents and Settings\mikio>rm c:\WINDOWS\system32\node.exe

C:\Documents and Settings\mikio>node -v
'node' は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。

#+end_src
削除したら動いた。
#+begin_src sh
C:\Documents and Settings\mikio>npm install socket.io
npm http GET https://registry.npmjs.org/socket.io
npm http 304 https://registry.npmjs.org/socket.io
npm http GET https://registry.npmjs.org/socket.io-client/0.9.6
npm http GET https://registry.npmjs.org/policyfile/0.0.4
npm http GET https://registry.npmjs.org/redis/0.6.7
npm http 304 https://registry.npmjs.org/redis/0.6.7
npm http 304 https://registry.npmjs.org/socket.io-client/0.9.6
npm http 304 https://registry.npmjs.org/policyfile/0.0.4
npm http GET https://registry.npmjs.org/ws
npm http GET https://registry.npmjs.org/uglify-js/1.2.5
npm http GET https://registry.npmjs.org/xmlhttprequest/1.2.2
npm http GET https://registry.npmjs.org/active-x-obfuscator/0.0.1
npm http 304 https://registry.npmjs.org/xmlhttprequest/1.2.2
npm http 304 https://registry.npmjs.org/active-x-obfuscator/0.0.1
npm http 304 https://registry.npmjs.org/ws
npm http 304 https://registry.npmjs.org/uglify-js/1.2.5
npm http GET https://registry.npmjs.org/zeparser/0.0.5
npm http 304 https://registry.npmjs.org/zeparser/0.0.5
npm http GET https://registry.npmjs.org/zeparser/-/zeparser-0.0.5.tgz
npm http 200 https://registry.npmjs.org/zeparser/-/zeparser-0.0.5.tgz
npm http GET https://registry.npmjs.org/options
npm http GET https://registry.npmjs.org/commander
npm http 304 https://registry.npmjs.org/commander
npm http 304 https://registry.npmjs.org/options

> ws@0.4.14 install C:\Documents and Settings\mikio\node_modules\socket.io\node
_modules\socket.io-client\node_modules\ws
> node install.js

================================================================================

=                                                                              =

=  To install WS with blazing fast native extensions, use                      =

=       <npm install ws --ws:native>                                           =

=                                                                              =

================================================================================

socket.io@0.9.6 ./node_modules/socket.io
├── policyfile@0.0.4
├── redis@0.6.7
└── socket.io-client@0.9.6 (xmlhttprequest@1.2.2, uglify-js@1.2.5, ws@0.4.14,
 active-x-obfuscator@0.0.1)

C:\Documents and Settings\mikio>
#+end_src

























































































** DONE 束縛とは?..そうか!名札なのか!                                  :lisp:
   CLOSED: [2012-05-08 火 23:30]

「EmacsLispテクニックバイブル」を読んで、やっと理解できた。

- 束縛とは、値に名札をつけること。

Lisp(というか関数型言語)を習う上で障害となるものに用語があると思うんだけど、そのひとつに「束縛」がある。
束縛？なんだそれ？代入みたいなもん？なぜ代入じゃなくて束縛なんだ？と思いながら説明を読み進めるけど、
束縛という言葉が出てくるたびに、それが引っかかって理解を妨げていた。

従来の手続き型言語だと、変数の説明のときに箱をイメージしてその中に値をいれる図がでてくる。
だけれども束縛の場合は名札を用意して値にそれをつけるイメージだということ。
手続き言語だと変数が主役で関数言語だと値が主役ということか。

#+begin_src sh
「そうか!名札なのか!」
#+end_src

長年の疑問が解けてスッキリした瞬間だった。

#+BEGIN_HTML
<a href="http://www.amazon.co.jp/gp/product/4774148970/ref=as_li_tf_il?ie=UTF8&tag=ocha04-22&linkCode=as2&camp=247&creative=1211&creativeASIN=4774148970"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=4774148970&MarketPlace=JP&ID=AsinImage&WS=1&tag=ocha04-22&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=ocha04-22&l=as2&o=9&a=4774148970" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
#+END_HTML

** DONE (超個人的)Ubuntuインストール後にやることまとめ               :ubuntu:
   CLOSED: [2012-05-05 土 22:31]

- Ubuntu12.04LTS版です。

*** 最初にやること
**** ホーム配下のディレクトリリネーム
ホーム配下のディレクトリが日本語になっているので早々に英語化する。
#+begin_src sh
LANG=C xdg-user-dirs-gtk-update
#+end_src
**** update
最初は、メニューがところどころ日本語になっていなかったりする。
なにはともあれアップデートマネージャで最新にアップデートする。

**** 端末の設定
- [Windwoskキー] -> [gnome-terminal]
- [メニュー] -> [編集] -> [キーボードショートカット] 
- すべてチェックを外しておく
**** IME起動ショートカットの変更
- [右上のパネル（キーボード）] -> [設定] -> [一般] タブ
- [キーボードショットカット] -> [切り替え] 
- [Zenkaku_Hankaku]だけにする

**** xmodmapによるキーマッピング
下記を参考にした。
http://d.hatena.ne.jp/kenbeese/20120214/title

~/.Xmodmapを作成する。
#+begin_src sh
keycode 102 = Control_L
keycode 100 = Control_L
keycode 101 = Shift_L


keycode  66 = Control_L NoSymbol Control_L
clear Lock

add Control = Control_L
#+end_src

反映
#+begin_src sh
xmodmap ~/.xmodmap
#+end_src

これにより下記の割り当てになる。
#+begin_src sh
無変換(102)→ctrl
変換(keycode 100)→ctrl
カタカナひらがな(101)→shift
#+end_src


更に起動時に自動的に有効になるように、 =~/xinitrc= を準備する。
下記を記述する。
#+BEGIN_SRC sh
xmodmap ~/.~Xmodmap
#+END_SRC

もし割り当てを変更したいときは、xevコマンドを使ってキーコードを
調べ、 =~/.xmomap= を変更すれば良い。
#+BEGIN_SRC sh
$ xev
#+END_SRC
CapsLock(66,Eisu_toggle)  = 左Ctrl(Control_L)
Win(133,Super_L) = 左Ctrl
左ALT(64, ALT_L) = Win
無変換(102, Muhenkan)) = 左ALT
変換(100,Henkan_Mode) = 右CTRL
変換(101,Hiragana_Katakana) = 右シフト


*** Dropbox
これがないとはじまらない。dropboxのサイトへいき、.debをダウンロードしてパッケージをインストールする。
*** firefox
syncの設定して、keysnailを入れる。

*** Mig 1M 
1MのMはMonoSpaceのM。つまり等幅フォントということ。
下記から「Mig 1M」フォントをダウンロードする。
- http://mix-mplus-ipa.sourceforge.jp/download.html
あとは下記のコマンドで使えるようになる。
#+begin_src sh
mkdir ~/.fonts 
cp migu-1m-20120411.zip ~/.fonts
cd ~/.fonts 
unzip migu-1m-20120411.zip
fc-cache -fv
#+end_src

*** VLゴシック
下記をfirefoxから開けばOK
- http://apt.ubuntu.com/p/ttf-vlgothic

インストールしたフォントを使用するには、Advanced Settingsを
ソフトウェアセンターからインストールする必要がある(gnome-tweak-toolで検索する)。

Advanced Settingsをインストールすると、Launcherに「高度な設定」アイコンがあるのでこれを起動し、
フォントを選択すればよい。

*** 全体のキーボード操作をemacs系にする
ターミナルで下記コマンドを実行する。
#+begin_src sh
sudo apt-get install dconf-tools
gsettings get org.gnome.desktop.interface gtk-key-theme Emacs
#+end_src

手動の場合は以下。
#+begin_src sh
dconf-editor
#+end_src

以下のパスで
#+begin_src sh
/org/gnome/desktop/interface/gtk-key-theme
#+end_src
値をEmacsにする。Eは大文字なので注意すること。もどすときはDefaultにする。

*** paco
- http://paco.sourceforge.net/
- http://d.hatena.ne.jp/rx7/20081011/p2

pacoは、make install によってインストールされたアプリケーションのパッ
ケージ管理をしてくれる。

#+begin_src sh
# ソースは適当にWebからダウンロード
sudo apt-get install libgtkmm-2.4-dev
cd ~/src/paco-2.0.9/
./configure
make
sudo make install
sudo make logme
#+end_src

*** emacs
ソースは最新版(ver24)を取ってくる。build-depは多分emacs23でOK。
#+begin_src sh
# ソースは適当にWebからダウンロード。「emacs24」とかで検索。
sudo apt-get build-dep emacs23
cd ~/src/emacs-24/

# configureで画像関連でエラーになるかも。そのときは
# sudo apt-get install libgif-dev ligtiff-dev libxpm-dev

./configure
make
sudo paco -D make install
#+end_src
ついでにw3mも入れとく。
#+begin_src sh
sudo apt-get install w3m
#+end_src

*** cmigemo
Kaoriaからソースを取得する。
#+begin_src sh
wget http://cmigemo.googlecode.com/files/cmigemo-default-src-20110227.zip
unzip cmigemo-default-src-20110227.zip
cd cmigemo-default-src-20110227
#+end_src

そのままコンパイルするとエラーがでるので修正する。
#+begin_src sh
src/wordbuf.c:118: error: ‘INT_MAX’ undeclared (first use in this function)
src/wordbuf.c:118: error: (Each undeclared identifier is reported only once
src/wordbuf.c:118: error: for each function it appears in.)
#+end_src
wordbuf.cに下記を追加する。
#+begin_src sh
#include <limits.h>
#+end_src

あとは下記のとおり。
#+begin_src sh
sudo apt-get install curl
sudo apt-get install nkf

cd ~/src/cmigemo-default-src/
sh ./configure 
make gcc
cd dict
make utf-8
cd ..
sudo paco -D make gcc-install
#+end_src

次のようにテストできる。
#+begin_src sh
$ cmigemo -d /usr/local/share/migemo/utf-8/migemo-dict
migemo_open("/usr/local/share/migemo/utf-8/migemo-dict")=0xf54010
clock()=0.300000
QUERY: kyassyu
PATTERN: (ｷｬｯｼｭ|キャッシュ|きゃっしゅ|ｋｙａｓｓｙｕ|kyassyu)
#+end_src

*** git
#+BEGIN_SRC sh
sudo apt-get install git
git config --global alias.st "status"
git config --global alias.ci "commit"
git config --global alias.br "branch"
git config --global alias.co "checkout"
git config --global color.ui "auto"
git config --global core.pager "cat"
git config --global user.email "hoge@faga.com"
git config --global user.name "hoge"
#+END_SRC

*** skk(uim)
ubuntuは、標準でiBusを使用しているが、ibus-sskは
変換時にemacsのキーバインドが使えないので、
変わりにuimというインプットメソッドがあるので入れてみる。
- http://ubuntu-note.blog.so-net.ne.jp/2010-10-17-1

#+begin_src sh
sudo apt-get install uim uim-skk
#+end_src

- 設定　言語サポート　「キーボードに使うIMシステム」
- uimを選択
その後ログアウトすれば使用できるようになる。
- Dashでuimを入力すると設定画面が表示される
- ツールバーは表示できない。

emacsと重複するため、SKKの起動キーを変更する。
- [設定] -> [SKKキー設定1] 
- Zenkaku_Hankakuだけにする

*** jdk
下記よりjdk最新版を取得する。
- http://www.oracle.com/technetwork/java/javase/downloads/index.html

CUIから最新版をダウンロードする場合。
#+BEGIN_SRC sh
wget --no-cookies --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com" -O jdk-6u41-linux-i586.bin 'http://download.oracle.com/otn-pub/java/jdk/6u41-b02/jdk-6u41-linux-i586.bin'
#+END_SRC

解凍したディレクトリを移動する。
#+begin_src sh
sudo mkdir /usr/lib/jvm/
sudo mv ./jdk1.7.0_04/ /usr/lib/jvm/jdk1.7.0
#+end_src

下記でインストールする。
#+begin_src sh
sudo update-alternatives --install "/usr/bin/java" "java" "/usr/lib/jvm/jdk1.7.0/bin/java" 1
sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/lib/jvm/jdk1.7.0/bin/javac" 1
sudo update-alternatives --install "/usr/bin/javap" "javap" "/usr/lib/jvm/jdk1.7.0/bin/javap" 1
sudo update-alternatives --install "/usr/bin/javaws" "javaws" "/usr/lib/jvm/jdk1.7.0/bin/javaws" 1
#+end_src

複数のjavaがあれば、下記でデフォルトにするコマンドを選択する。
今回はoracleJavaのみなので必要ない。
#+begin_src sh
sudo update-alternatives --config java
#+end_src

下記で確認する。
#+begin_src sh
java -version
javac
javap
javaws
#+end_src

**** 参考
- http://radi0ant.hatenablog.com/entry/2011/12/29/015013
- http://askubuntu.com/questions/55848/how-do-i-install-oracle-java-jdk-7

*** lein(clojure)
binディレクトリを作成する。
#+begin_src sh
$ cd ~
$ mkdir bin
$ vi .bashrch
# 下記を追加
export PATH=~/bin
#+end_src

leinをインストールする。
#+begin_src sh
cd ~/bin
wget https://raw.github.com/technomancy/leiningen/stable/bin/lein
chmod +x lein
./elin repl # ダウンロード後、repl開始
#+end_src

*** eclipse
- http://gihyo.jp/admin/serial/01/ubuntu-recipe/0167

ソフトウェアセンターから「eclipse」」とpleiadesをインストールする。
その後、/etc/eclipse.iniを編集する。
#+begin_src sh
-javaagent:/usr/lib/eclipse/plugins/jp.sourceforge.mergedoc.pleiades/pleiades.jar
#+end_src
この時、eclipse.iniのそれぞれのパラメータの改行位置がおかしいことがあるので、その時は適切に編集する。
編集が終ったら、Dashメニューより起動して日本語化されていることを確認す
る。

*** その他
**** DVDについて
DVDをみるためには以下のインストールが必要。
#+BEGIN_SRC sh
$ sudo apt-get install ubuntu-restricted-extras
$ sudo sh /usr/share/doc/libdvdread4/install-css.sh
#+END_SRC
- iso マウントには Frius ISO mount
- dvd バックアップには、k9 copy

**** vmwareなどでインストールしたときにlocaleに日本語がない場合
#+begin_src sh
sudo apt-get install language-pack-ja
sudo dpkg-reconfigure locales
#+end_src

**** クリップボード履歴
#+begin_src sh
sudo apt-get install parcellite
#+end_src

**** スクリーンショット
Ubuntuでは標準でスクリーンショットがあって、PrintScrキーを押下するだけでアクティブウィンドウが
png形式でキャプチャされる。
けれども、この場合、クライアント領域だけのキャプチャになるので用途によっては不便である。
その編の問題を解決してくれるソフトがShutterである
#+begin_src sh
sudo apt-get install shutter
#+end_src

http://ankyo.blog.so-net.ne.jp/2011-04-07

*** 日本語IMEについて
Linuxは、日本語入力には３つのソフトウェアが必要。
- 日本の文字を入力するためのシステムであるインプットメソッド
- かな漢字の変換をするシステム
- 両者をつなぐ日本語ブリッジ

- インプットメソッドの例
 - SCIM
 - iBus
 - uim

- かな漢字変換システムの例
 - Anthy
 - MOZC
 - SKK

- 日本語ブリッジの例
 - ibus-mozc
 - uim-skk
 - scim-anthy

最近のUbuntuでは、インプットメソッドに、iBus,
かな漢字変換システムには、Anthyを使用している。




** DONE (超個人的)Windowsインストール後にやることまとめ             :windows:
   CLOSED: [2011-04-28 木 22:50]

*** ソフトのインストールポリシー
- インストーラのないツールは基本的に%HOME%/apps下に展開する。
- インストーラものはデフォルト値でインストール
- %HOME%/shortcutsにショートカットをおいてlauncyで管理
- UNIX系(コマンドライン系)のミドルウェアでインストーラーがない場合は%HOME&/opt/下に展開する。

*** コントロールキーの設定
***** xp
- xkeyemacsをつかってcapsキーをctrsキーにする。
***** win7
- Changekeyを使用する(右クリメニューで管理者として実行すること)。
 - chgkey.exe
 - Dropboxに保存してある。
- GUIのキーボードが表示されるので変更する
 - Caps → Ctrl
 - 無変換 → Ctrl
 - 変換 → Ctrl
 - ひらがな → Shift 
- 再起動

*** Usersディレクトリの作成(XPのみ)
「Link Shell Extension」をインストールして
「c:\」に「C:\Documents and Settings」のディレクトリジャンクションを作り名前を「Users」とする。
これにより
c:\Users\というディレクトリができ、Windows7/Vistaと同じような構成になる。

*** 一番最初にインストール
- Launcy
- Firefox
- Emacs
- ExpLzh

*** 環境変数の設定
- HOME
 - XPの場合:HOME=c:\Users\mikio
 - Windows7の場合:HOME=%USERPROFILE%

 - HOMEはダブルクォーテーションで囲んではいけない。emacsが起動しなくなる。
 - HOMEはcygwin,Emacs用、XYZZYHOMEはxyzzy用の環境変数。
 - ※cygwinでは、HOMEを設定すると、自動的に/home/mikiがc:\mikiにマウントされる。

- MAVEN_HOME
 %HOME%\opt\
- XYZZYHOME
  - XYZZYHOME=%HOME%\aps\xyzzy
  - PATH
    c:\cygwin\bin;

- 下記は.bashrc側に置くので設定しなくて良い。
  JAVA_HOME=%HOME%\opt\
  ANT_HOME=

- PATH
%PATH%;%HOME%\bin;%MAVEN_HOME%\bin;%HOME%\opt\php-5.3.8-Win32-VC9-x86
- TERM
  xternm(CYGWIN用)
- CYGWIN
  tty(screenのデタッチ用)
*** キーボードの入力速度を早める
- (Win7) [コンパネ] -> [コンピュータの簡単操作] -> [キーボード動作の変更] -> [キーボードの設定]

*** アンチエイリアスの設定
- MacTypeをインストールする。
- fontは「Mig 1M」を使用する。MigMix1M 行間が広いので注意。

*** 入れるソフト
**** インストーラ系ソフトのインストール
- Spybot Searcy & Directory
- Link Shell Extension
 - http://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.html
- AdujustClock
- WinSCP
- Jing
- Chrome
- Bullzip PDF Printer
- Java JRE
- MediaMonkey(音楽管理ソフト)
- Switcher(MacのExpose)
- JDK, JRE

**** 解凍系
- cygwinのインストール

- putty、ごった煮にさらに機能追加版
 - http://ice.hotmint.com/putty/
 ※オリジナルのごった煮版は、コマンドラインからのplinkがうまく使えなかったので使用しない。

- Jane sytle
- eclip
- Eclipse
- WinDeskWide(仮想デスクトップ)
- TClock Light (for Windows XP)
- tclocklight-kt100204(for WIndows7)
  タスクバーを左たてに表示する場合、tclock.iniを書きに書きかえる。
  Format="yy/mm/dd\nddd\nhh:nn:ss"
- AdjustClock
 windows7の場合、OSに自動同期機能があるのでいらない。

**** スタートアップの設定
- タートアップフォルダの開き方
 - [スタート] -> [すべてのプログラム] -> []
 - スタートアップを右クリック - 開く
下記を登録する。
- tclock
- eclip
- pagent
# - WinDeskWide
# - AdjustClock
# - Launchy

*** MySQL
MySQLのHPにてCommunityServerをインストールする。
HPの上の方にある大きなバナーのやつだと余計な製品がたくさん入って
わけわからんので注意。

*** php
- http://windows.php.net/download/#php-5.3-ts-VC9-x86
windows版のバイナリ(*.zip)をダウンロードして展開する。
- 展開場所の例
#+begin_src sh
$HOME/opt/php
#+end_src


*** 別PCに移行する場合
**** ファイル共有の設定
   - コンパネ　-　Windowsファイアウォール - 例外
   - 「ファイルとプリンタの共有」をチェックする。
**** ローカルPCのAdminユーザのパスワードを設定
   - コントロールパネル - ユーザアカウント
   - Administratorを選択し、[パスワードのリセット]をクリックし、新しいパスワードを入力する。
**** 設定ファイルのコピー
- エクスプローラを立ち上げ、旧端末のCドライブに接続する。
 -- \\旧端末のコンピュータ名\C$
- 旧端末の必要な情報をコピーする(FireCopyを使用する。)。
 -- c:\miki
**** 移行用ソフト
- FireFile Copy :高速ファイルツール。上書き確認とかいろいろ。エクスプローラだときつい。

*** Faithの自作マシンでのドライバインストール
windows7を入れた最初の状態では、ネットワークアダプタのドライバがないため
ネットにつながらない。
そこで、ドライバをインストールする。ネットワークアダプター以外にも
いくつかドライバがないものがあるのでついでにインストールしておく
- ユニバーサルシリアルバスや

- マザーボードのCD-ROMを用意する(P8Z68V-PRO)。
- [コントロールパネル] - [ハードウェアとサウンド]-[デバイスマネージャ]
- ほかのデバイスを選択し、びっくりマークのついている機器を右クリック
- [ドライバーソフトウェアの更新]－[コンピュータを参照してドライバーソフトウェアを検索します]

** DONE Corvus-SKK+wceSKKServの環境でddskkのユーザ辞書を追加する方法    :skk:
   CLOSED: [2012-04-22 日 09:43]

運用方法としては以下
- Corvus-SKKにはユーザ辞書は追加しない。
- 追加したくなったらddskk(emacs上)で。
- 追加したら、Corvus-SKKの設定画面から、ddskk(~/Dropbox/dict/skk/jisyo)を追加する。
- Corvus-SKKは独自形式に変換して、自身管理下のディレクトリに辞書を作成する。
- wceSKKServの辞書にはユーザー辞書は追加しない。

** DONE CoffeeScriptのインストール(WindowsXP)                  :coffeescript:
   CLOSED: [2012-04-22 日 09:44]

#+begin_src sh
dos> npm install -g coffee-script
#+end_src

** DONE emacsをスクリプト言語として活用する                           :emacs:
   CLOSED: [2012-04-22 日 09:42]

emacsはエディタなのですが、その拡張にemacs-lispというlisp方言を使用しています。
通常このemacs-lispは、エディタの拡張に使用するものなので、
emacsのメジャーモードを作ったり、新たな編集コマンドを作成するためのもです。
あたり前ですね。

なのですが。emacsにはスクリプトモードというものがあるのですよ。
emacsをエディタとして利用するのではなくて、emacs-lispというスクリプト言語として、
perlやrubyのようにテキスト処理に活用するのです。

早速テストしてみます。
下記のスクリプトを用意します。
#+BEGIN_SRC emacs-lisp
;; helloworld.el
(princ "Hello, World!\n")
#+END_SRC

下記で実行できます。
#+BEGIN_SRC sh
$ emacs --script helloworld.el
Hello, World!
#+END_SRC
スクリプトモードで起動したemacsには、ライブラリもほとんど読みこまれていないので起動も超速です!
これで普段のちょっとした雑用をlispで記述できます。
clojureは初回起動が重すぎるので起動が速いというのは魅力的ですね。

emacs-lispを使って日々の雑用処理をこなしていけば、
lispで仕事ができる上にemacs自体の力もついて一石二鳥です。

すごくわくわくしますね!

*** 参考URL
この記事は下記の記事に触発されました。ぜひ一読を!
- http://cx4a.org/pub/emacs-lisp-for-scripting.ja.html

   
** DONE cygwinでwindowsアプリをキルする。                            :cygwin:
   CLOSED: [2012-04-22 日 09:42]

Cygwinのデフォルトシェルのbashは組み込みkillを持っているので、これを使
わないようフルパスでkillを指定するようにすればできる。
#+begin_src sh
$ ps -W | grep -i iexplore
2352       0       0       2352    ?    0 14:03:36 C:Program FilesInternet ExplorerIEXPLORE.EXE
$ /usr/bin/kill.exe -9 -f 2352 
#+end_src

- http://ambiesoft.ddo.jp/blog/archives/15

** DONE 子プロセスと親プロセスのkillの方法                            :linux:
   CLOSED: [2012-04-22 日 09:41]

- 下記を参考にした。
 - http://oshiete.goo.ne.jp/qa/1968135.html
- 「親プロセスが先に死ぬと子プロセスはinitプロセスの養子になるというのはunixの仕様です。」とのこと
- なんとなく親プロを殺せば子プロも一緒に死んでくれそうだが、実際にはそうはいかない。
- 親プロを先に殺してしまうと、子プロは残ってしまい、孤児となりその親は自動的にinitプロセスとなる。
- unixでは自動的に親子を連動して殺してくれる便利なコマンドはなく、個別に殺す必要があり
  その順序は先に述べたとおり「子→親」の順である。

** DONE ClojurescriptOneで遊んでみた                          :clojurescript:
   CLOSED: [2012-04-21 土 09:40]

最近Clojurescriptが自分の中でブームである。

初見の感想は、「たった1行のコードがとてつもない量のコードに展開されていて、
こんなんじゃデバッグに苦労させられそうだなと、普通にjs使ってたほうがいいんじゃね？」
と興味わかなかったのですが、すごいIDEのLighttableやMisaki作者の[[http://liquidz.github.com/2012/03/clojurescript.html][「全部CLojureのターン」]] 、
ねこはるさんの [[http://togetter.com/li/291629][Clojure絶賛つぶやき]] をみたおかげで俄然興味が湧いてきたのでした。

** DONE ClojureScriptで書かれたGameEditerすげぇ               :clojurescript:
   CLOSED: [2012-04-21 土 00:35]

最近clojure界隈で話題の[[http://www.chris-granger.com/2012/04/12/light-table---a-new-ide-concept/][LightTable]] ですがその前身として
ClojureScriptで書かれたゲームエディタがあったようです。[fn:1]
- http://www.chris-granger.com/2012/02/26/connecting-to-your-creation/


簡単に起動できるのでleinをインストールしてるかたはぜひ一度試されることをお勧めします。
#+begin_src sh
$ git clone https://github.com/ibdknox/live-cljs.git
$ cd live-cljs/
$ lein run
#+end_src

多分次のようなrecurがどうとかのエラーが発生するので
#+begin_src sh
"Elapsed time: 58.674804 msecs"
Exception in thread "main" java.lang.RuntimeException: java.lang.AssertionError: Assert failed: Can't recur here
frame
        at clojure.lang.Util.runtimeException(Util.java:165)
        at clojure.lang.Compiler.eval(Compiler.java:6476)
        at clojure.lang.Compiler.eval(Compiler.java:6455)
#+end_src

下記を実行して再チャレンジ。
#+begin_src sh
$ rm -rf classes/cljs/
$ lein run
 :
 :
2012-04-20 19:58:40.913:INFO::jetty-6.1.25
2012-04-20 19:58:40.944:INFO::Started SocketConnector@0.0.0.0:8074
#+end_src
無事ローカルサーバが起動したら下記にアクセス。
- http://localhost:8074/

Clojurescriptで書かれたゲームエディタが起動します。
左のボックスにエディタ、右のボックスにゲーム画面が表示されます。
コード中のパラメータをいじるとすぐに反映されて楽しいです。
こういう開発をEmacs+SLIME+Clojureでしたかった！てかやろう!


[fn:1]ちなみにこの作者の「chris granger」って人、[[http://webnoir.org/][Noir]] の作者だったり
VisualStudioのプロジェクトマネージャだったりすごい人です。


** DONE GalaxyNoteをWindows7に接続してもUSBストレージデバイスとして認識しない :android:hamari:
   CLOSED: [2012-04-18 水 01:27]

今週の週刊アスキーに載ってたAndroidの音楽アプリ特集で
iSncyrというアプリを試すことにしたのですが
AndroidデバイスがUSBストレージとして認識してくれないため、
音楽ファイルの転送ができなくてハマりました。

具体的には、GalaxyNote国際版をWindowsにUSB接続しても
USBデバイスとして認識してくれません。
ただし、携帯電話デバイスとしては認識してくれます。

これを回避するには、
1. USBケーブルを外しておく
1. [設定] -> [Wireless and network] -> [USB utilities] 
1. [Connect storage to PC] ボタンを押下
1. 「Connect USB cable to use mass storate」という
  メッセージダイアログがでるのでケーブルを接続する。
1. 緑ドロイド君の画像が表示され、「connect USB storate」ボタンが表示されるので
 押下する。
1. ローディグアイコンがまわり終わるとドロイド君が赤色になり接続が完了
   する。

以上の手順を踏めば無事USBストレージデバイスとして認識してくれます。

** DONE emacsのDiredを2画面ファイラ化するe2wmのパースペクティブをつくってみた :e2wm:emacs:
   CLOSED: [2012-04-11 水 22:46]

emacsを本格的に使いはじめる前はxyzzyを使い込んでました。
xyzzyは非常に高機能で、特に愛用していたのが2画面ファイラです。
コピー元とコピー先が表示される2画面ファイラは視覚的に非常にわかりやすく便利でした。

emacsにはdiredという優れたファイラがあるのですが、
1画面ファイラのためコピー先はタイプして指定する必要があります。履歴や補完が使えるとはいえ、やっぱり使いづらいです。
そんな状態だったのですが、他の選択肢もなく(もしくは知らず)1画面の操作にも慣れDiredを愛用し、
2画面ファイラの操作感をすっかり忘れてたころ、[[https://github.com/kiwanami/emacs-window-manager][e2wm]] に出会ったのでした。
e2wmは去年ぐらいから常用してるのですが、この拡張はウィンドウの分割状態を
管理するもので、自分用のプラグインも簡単に作成できる仕組みになっています。

2画面ファイラに限らず、ほかの様々な作業環境のウィンドウの分割を
制御したいと思っていた自分には衝撃的でした。

この時から、再び2画面ファイラへの想いが再熱し、いろいろ調べてみました。
すると、diredはなんと標準で2画面をサポートしてること(dired-dwim-target変数)、
[[http://emacswiki.org/emacs/Sunrise_Commander][SunriseCommander ]]という出来のよさそうな2画面ファイラが存在すること、
vimには既に2画面ファイラが実装されていることなどがわかりました。

しかし、dired-dwim-targetでは画面分割がすぐに崩れてしまうし、
SunrizeCommanderでは独自にウィンドウ制御しているためe2wmとの共存が厳しいことから、
結局、e2wmの拡張パースペクティブとして自分でつくることにしました。

といっても、自分で書いたコードはほとんどなく、2画面UIの定義ぐらいです(中身はdiredなので)。
参考にしたのもtwoパースペクティブのパクリでほとんどコピペです。

#+begin_html
<script src="https://gist.github.com/2357888.js?file=e2wm-wfiler.el"></script>
#+end_html


導入するには下記を実行して
#+begin_src emacs-lisp
(install-elisp "https://raw.github.com/gist/2357888/e6fea3452290c7b73dbeb2fe6123211356594c66/e2wm-wfiler.el")
#+end_src
.emacsなどで以下のように定義します。
#+begin_src emacs-lisp
(require 'e2wm)
(require 'e2wm-config)
(require 'e2wm-wfiler)
#+end_src

ファイラの呼出は
#+begin_src sh
M-x e2wm:dp-wfiler
#+end_src
としてください。

デフォルトのキーバインドは以下になります。
| C-t | ウィンドウ移動                             |
| M-p | 一方のウィンドウのディレクトリを同じにする |
C-tにウィンドウ移動を割りあててるのは、るびきちさんの影響です。
M-pに「ディレクトリを揃える」を割り当てているのはxyzzyの影響です。[fn:1]
pは多分prink(揃える)の頭文字からだと思います。

キーバインドを変更したい場合は、下記のように設定してください。
#+begin_src emacs-lisp
(define-key e2wm:dp-wfiler-minor-mode-map (kbd "C-t") 'e2wm:dp-wfiler-move-buffers-command)
(define-key e2wm:dp-wfiler-minor-mode-map (kbd "M-p") 'e2wm:dp-wfiler-sync-buffers-command)
#+end_src

ちなみに自分の場合、ファイラは頻繁に使用したいのでC-c 4で起動できるようにしてあります。
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c 1") 'e2wm:dp-code)
  (global-set-key (kbd "C-c 2") 'e2wm:dp-two)
  (global-set-key (kbd "C-c 3") 'e2wm:dp-doc)
  (global-set-key (kbd "C-c 4") 'e2wm:dp-wfiler)
  (global-set-key (kbd "C-c 5") 'e2wm:dp-magit)
  (global-set-key (kbd "C-c 6") 'e2wm:dp-dashboard)
  (global-set-key (kbd "C-c 7") 'e2wm:dp-array)
#+end_src

画面レイアウトには、e2wmを使用してますが、2画面ファイラそのものは
標準のDiredの機能を使用しています。
具体的には、e2wm-wfiler.elで下記の設定をしていますので注意してください。
#+begin_src sh
(setq dired-dwim-target t)
#+end_src

最後に積み残しの機能は以下になります。
- e2wm標準のhistory機能と同様のものをDiredバッファ専用で実装する
- ファイルを開くときにパースペクティブを指定したい。
- ファイラに切り替えるとき、初めての場合は最後のバッファのディレクトリ、  2回目以降のときは、最後の状態を復元。
- 2画面ファイラパースペクティブのまま、ファイルを開く(サブに表示し、フォーカスは移動しない)。


ちなみにelispでモノを作ったのは今回初めてですが、なんとか動いてます。
まぁそれぐらい気楽に拡張を書けるということですかね。

*** おまけ
Windowsを使ってる人は下記を設定しておくと、zキーで関連づけアプリが起動できて便利です。
#+begin_src emacs-lisp
;;-----------------------------------------------------------------
;; diredでWindowsに関連付けられたアプリを起動する
;; http://k4zmblog.dtiblog.com/blog-entry-153.html
;;-----------------------------------------------------------------
(defun uenox-dired-winstart ()
  "Type '[uenox-dired-winstart]': win-start the current line's file."
  (interactive)
  (if (eq major-mode 'dired-mode)
      (let ((fname (dired-get-filename)))
        (w32-shell-execute "open" fname)
        (message "win-started %s" fname))))

;; dired のキー割り当て追加
(if (eq window-system 'w32)
    (add-hook 'dired-mode-hook
               (lambda ()
                 (define-key dired-mode-map "z" 'uenox-dired-winstart))))
#+end_src
下記を参考にしました。ありがとうございます。
- http://k4zmblog.dtiblog.com/blog-entry-153.html

*** 
[fn:1]xyzzyではS-pだったのですが、これだとdiredモード以外のバッファなどでコントーロールを奪われてしまうため
(ミニバッファなどで大文字Pが入力できなくなる)M-pにしてあります。同様の理由でC-f,C-bも使用していません。

** DONE Clojureで重複した要素を取り除く問題を解く           :clojure:problem:
   CLOSED: [2012-04-10 火 22:06]

とある集まりで、プログラミングの問題が出題された。
#+begin_src sh
問題
ある数列から重複する要素を取り除きなさい。
ただし、数列の順番は変更しないこと。
(例)
 3 5 6 5 4 1 5 4 -> 3 6 1
#+end_src
こんなのササッと数分でとけないとやばいのかな？
普段から鍛えてないので結構てこずりました。。。

で、できた答えが以下。
#+begin_src clojure
(defn remove-same-number
    "重複する要素を削除する。順番は維持。
ex. 3 5 6 5 4 1 5 4 -> 3 6 1"
    [coll]
  (letfn [(uniq? [x] (= (count (for [n coll :when (= n x)] n)) 1))] 
    (for [x coll :when (uniq? x)] x)))

;; user> (remove-same-number '(3 5 6 5 4 1 5 4))
;; (3 6 1)
#+end_src
uniq?関数で数列に指定した要素がいくつあるか数えて、
forでフィルタしてシーケンスを作っています。

まわりにclojurianいないし、ネットで手軽に声かけられる人もいないから
上記コードがよいのかどうかさっぱりわかりません。。。

腕に自信のあるClojurianのかた(いやなくても)、誰か添削してくれないかなぁ。
てか、標準ライブラリに同じことする関数がありそう。

** DONE Windows版のSwank-Clojureでclojure-jack-inが実行できない。 :clojure:dos:slime:
   CLOSED: [2012-04-06 金 22:53]

最近のclojure-swankには、emacsから直接swank-serverを起動するための「clojure-jack-in」とemacsコマンドがある。
これを使うと、わざわざ別の端末でswank-serverを起動せずとも、直接裏でサーバーが起動してくれるのでとっても便利である。
のはずなのだが、、、WindowsXPだと例によってうまく起動できないので(Linux版だと問題なし)、ちょっと修正しなくちゃいけない。
ここではその過程をメモしておく。

*** 結論

結論を示すと下記のパッチでうまくいく。
#+begin_src sh
$ diff -u $HOME/bin/lein.bat.orig $HOME/bin/lein.bat
--- /cygdrive/c/Users/mikio/bin/lein.bat.orig  2012-04-05 12:59:29.352024000 +0900
+++ /cygdrive/c/Users/mikio/bin/lein.bat       2012-04-06 13:32:27.537281600 +0900
@@ -23,7 +23,7 @@

 if "x%LEIN_HOME%" == "x" (
     if exist "%CD%\.lein" (
-        if /I NOT %CD%==%USERPROFILE% echo Running in bundled mode.
+        if /I NOT "%CD%"=="%USERPROFILE%" echo Running in bundled mode.
         set LEIN_HOME=%CD%\.lein
     ) else (
         set LEIN_HOME=%USERPROFILE%\.lein
#+end_src

*** 経過
まずlein.bat自体がうまく動くのかためす。
dos窓でlein.batを実行すると下記のエラーがでてしまう。   
#+begin_src sh
C:\Documents and Settings\mikio>lein
and の使い方が誤っています。
#+end_src
。。。エラーメッセージが不親切すぎて何していいかわかりません。
dosのバッチファイルを読むのは数年ぶりですがとりあえず

デバッグ情報を出すために「echo off」を解除する
#+begin_src sh
::@echo off

set JAVA_OPTS=-Dswank.encoding=utf-8-unix
#+end_src
すると下記で停止してることがわかった。
#+begin_src sh
C:\Documents and Settings\mikio>if "" NEQ "" cd ""
and の使い方が誤っています。
C:\Documents and Settings\mikio>        if /I NOT C:\Documents and Settings\mikio==C:\Documents and Settings\mikio echo Running in bundled mode.
#+end_src

IF文の条件式で与えられた変数が空白を含むために
条件式が文法エラーになっているようだ。
そこで、その条件式の変数部分をダブルクオーテーションで括ってみた。

この状態でlein.batを実行してみたところ通常どおり実行できた。
#+begin_src sh
C:\Documents and Settings\mikio>lein.bat
Leiningen is a tool for working with Clojure projects.

Several tasks are available:
classpath   Print the classpath of the current project.
clean       Remove compiled class files and jars from project.
compile     Compile Clojure source into .class files.
deploy      Build jar and deploy to remote repository.
deps        Download :dependencies and put them in :library-path.
help        Display a list of tasks or help for a given task.
install     Install current project or download specified project.
interactive Enter an interactive task shell. Aliased to "int".
jack-in     Jack in to a Clojure SLIME session from Emacs.
jar         Package up all the project's files into a jar file.
javac       Compile Java source files.
new         Create a new project skeleton.
noir        Create and manage noir projects.
plugin      Manage user-level plugins.
pom         Write a pom.xml file to disk for Maven interop.
repl        Start a repl session either with the current project or standalone.
retest      Run only the test namespaces which failed last time around.
run         Run the project's -main function.
search      Search remote maven repositories for matching jars.
swank       Launch swank server for Emacs to connect.
test        Run the project's tests.
test!       Run a project's tests after cleaning and fetching dependencies.
trampoline  Run a task without nesting the project's JVM inside Leiningen's.
uberjar     Package up the project files and all dependencies into a jar file.
upgrade     Upgrade Leiningen to the latest stable release.
version     Print version for Leiningen and the current JVM.

Run lein help $TASK for details.
See also: readme, tutorial, copying, sample, deploying and news.

C:\Documents and Settings\mikio>
#+end_src

この修正が完了した時点で「M-x clojure-jack-in」を実行してみたところ
無事SLIMEのREPLバッファが表示されたよ!

わざわざ別窓を開いてswank-serverを起動しなくて済むのでかなり快適になったよ!

** DONE ClojureのSLIMEのREPLバッファに色がつかない :clojure:hamari:emacs:slime:
   CLOSED: [2012-04-05 木 22:00]

emacs24にしたのが原因かわからないが、いつのまにかSLIMEのREPLバッファで
色付けがされなくなっていた。

この時、設定していたのは下記のコード。
#+begin_src clojure
(add-hook 'slime-repl-mode-hook (lambda () (clojure-mode-font-lock-setup)))
#+end_src

https://groups.google.com/forum/?fromgroups#!topic/clojure/jYShTPC_ppk

上記サイトによると手動でfont-lockを指定するとうまくいとこのこと。
#+begin_src clojure
M-x clojure-mode-font-lock-setup
M-x font-lock-mode
M-x font-lock-mode
#+end_src
自分も試したらうまくいった。

で、最終的にサイトの指南にあるように下記を設定した。
#+begin_src clojure
(add-hook 'slime-repl-mode-hook
               (lambda ()
                 (clojure-mode-font-lock-setup)
                 (font-lock-mode)
                 (font-lock-mode)))
#+end_src
これでREPLバッファにも綺麗に色付けされるようになった。

** DONE SKKはサジェストと相性がいい!                              :skk:emacs:
   CLOSED: [2012-04-09 月 18:01]

emacs以外でもSKKを導入してみて気づいたのですが、SKKはウェブアプリのサジェスト機能と非常に相性が良いです。
現在のウェブアプリでは、入力にフォーカスが当たると大抵自動的にIMEがONになって、日本語入力ができるようになります。
これはこれで便利なのですが、ウェブアプリ自身のサジェストと、IMEのサジェストが同時に表示されてしまうため、
非常に見にくくなります。

[[file:img/skk/skk01.png]]

一方、SKKの場合、デフォルトでは「かな」確定モードであるため
余計な表示がありません。直接ひらがなのみが入力されるのでシンプルです。

[[file:img/skk/skk02.png]]

大抵のサジェストでは、漢字に変換しなくても、アルファベットや「ひらがな」のみで
サジェストワードを表示してくれるので、SKKのようにデフォルトで「ひらがな」確定だと
余計なものが表示されずに、非常に見やすくなります。

ウェブアプリ以外の普通のアプリ(例えばエクセルとか)などでは、サジェストが無いぶん
使い勝手がGoogleIMEが劣るかも知れませんが、自分は普段ほとんど
Firefoxとemacsしか使いませんし、がっつり文章を書くときは
Emacsで書いてコピペする方法をとるので問題なしです。

ということで、SKKはデスクトップ用途でもおすすめですよ!

** DONE SKKを導入してみる(WindowsXP)                          :skk:windowsxp:
   CLOSED: [2012-03-09 月 18:23]

去年からemacs上の日本語入力にはDDSKKを使い続けているのですが、
emacsの外の世界ではgooglIME(or MOZC)を使用していました。
滅多に外の世界で活動しないため、別にこれで不自由はなかったのですが、
ふと最近のWindwosSKK界隈を調べてみると、今まで[[http://homepage3.nifty.com/monjya/skkime.jis.html][skkime]] 一択だったのに
クライアントが増えてます!。。。ということでいくつか検証してみて
最終的に下記の組み合わせを使用することにしました。快適!快適ー!

 - [[http://code.google.com/p/corvus-skk/][corvus-SKK(IME)]]
 - [[http://www.megadriver.info/~fumi/wceskkserv/][wceSKKServ(辞書サーバー)]]
 - [[http://d.hatena.ne.jp/hitode909/20110421/1303274561][google-ime-skk(辞書サーバー)]]

ということで以下に調べた内容をメモしておきます。

*** corvus-SKK
- 最近できたらしいWindows用のFEP
- 辞書が独自形式
 - 取り込みボタンを押したタイミングで辞書が独自形式に変換されるので、これは逆に長所になった。
 - emacs側のユーザー辞書を直接指定しても別ファイルになるので、クライアント単位で競合せずにすむ。
- サーバーがひとつしか使えない
 - wceSKKServであれば、複数の辞書を扱えるので問題なし
- トリガキーが「M-漢字キー」しかうけつけておらず、「漢字」キーのみでない
- 独自のサーバ(corvuserv)を使用しているが、まだ完成度が低そう。
- StickyShiftが使える!
- Windows XPのテキストサービスフレームワーク(TSF)が不安定なため、XPでの利用はあまり推奨されない。

**** 「;」によるStickyShiftを実現する方法
 - 設定画面で[位置] タブで下記の設定を施す。
#+begin_src sh
  開始：;
  代替：なし
  送り：なし
#+end_src


*** [[http://coexe.web.fc2.com/skkfep.html][SKK日本語入力FEP]]
 - 軽快な動作を目的とした比較的新しいWindows版SKK。
 - Windowsアプリを使いやすくするための独自機能が特徴。
 - [[http://coexe.web.fc2.com/programs.html#skkime][SKK-IME1.5改]] と同じ作者であり基本理念が引き継がれている。
 - WindowsXPのテキストサービスフレームワーク(TSF)が不安定なため、XPでの利用はあまり推奨されない。
 - WindowsXPで使用する場合は、SKK-IME1.5改を使用したほうが良い。

*** wceSKKServ
- wceSKKServというサーバーを使って、ddskkと辞書の共有を図る。
- wceSKKServで使用する辞書は、euc-jpしか受付ない模様。
- サーバにはユーザ辞書は指定できない。
- 従って、ddskkで育てた辞書をskkIMEでも利用するということはできない。
- どうしてもしたい場合は、コピーしたものを使う。
- 例えばスタートアップでユーザー辞書をコピーするとか。
- サーバを使うメリットとしては、以下がある。
 - linux環境において辞書を共用することでメモリの節約
 - 予めサーバーとして立ちあげておくことで、起動がスムーズになる
 - サーバー側に複数の辞書を登録することで、クライアント側では、
   そのサーバーをひとつ設定するだけで複数の辞書を指定したことになり、設定が楽になる。

*** google-ime-skk
最近は、GoogleIMEが流行っているので、SKKをこのまま使い続けていいのか若干気の迷いがありましたが、
Google-IME-SKKの存在を知ってその不安もなくなりました。なぜなら、SKKからGoogleの辞書が使えるからです。
この辞書のおかげで、ネットで話題の言葉とかも簡単に変換可能だし、
ローカルの辞書でヒットしなかった場合でも大抵googleIMEが拾ってくれます。

また、Linux上のGoogleIMEであるMOZCの場合、確かネットのデータは反映されないのですが、
このサーバを使えば、その問題も解決します。
スバラシス!

**** xp環境でのインストール

gemを入れてから下記でインストールする。
#+begin_src sh
dos> gem install google-ime-skk
dos> gem install json
#+end_src

下記のようなバッチファイルを作ってスタートアップに登録しておく。
「gskk.bat」
#+begin_src sh
google-ime-skk.bat
#+end_src

あとは下記に接続すればok。
#+begin_src sh
localhost:55100
#+end_src

コンソールが表示されるのが嫌という向きもあるだろうが
自分の場合は、あとでログが見れたほうが嬉しいことが多いので
そのままにしている。

また、バーチャルデスクトップ(WinDeskwide)を使っているので
不要なウィンドウは全部そっちに集めてスッキリできるので問題ない。

** DONE emacsで辞書を引けるようにしたがうまくいかない          :emacs:hamari:
   CLOSED: [2012-04-04 水 21:45]

普段、英語の辞書には、windows版の英辞郎(PDIC)を使用していたが
ふとしたことからemacs版の英和・和英辞書を使ってみたくなったので
チャレンジしてみた。環境はcygwinです。
*** sdic導入
elisp, info, 辞書の場所はユーザーローカルのDropboxに格納する。
#+begin_src sh
sh ./configure --with-lispdir=~/Dropbox/dotfiles/emacs/site-lisp/sdic --infodir=~/Dropbox/dotfiles/emacs/info/sdic --with-dictdir=~/Dropbox/dict/sdic
make
make install
make install-info
make dict
make install-dict
#+end_src
*** 検索に失敗する

検索しても、失敗するなと思っていたら辞書の作成に失敗していた。
#+begin_src sh
$ make dict
no -S -e gene.txt | /usr/bin/perl contrib/gene.perl > gene.sdic
/bin/sh: no: command not found
/usr/bin/perl contrib/edict.perl edict > jedict.sdic
#+end_src
「no」コマンドとはなんぞや？

ということで、Makefileの雛形のMakefile.inを見てみたら、nkfのことのようだ。
#+begin_src sh
gene.dic: contrib/gene.perl gene.txt
	@NKF@ -S -e gene.txt | @PERL@ contrib/gene.perl --compat > $@
#+end_src
さらにもう一度configureを実行してみたところ下記のように
ワーニングがでていた。
#+begin_src sh
onfigure: warning: nkf not found
#+end_src
なにわともあれ、nkfをいれないとだな。apt-cygで探したけど無かったので手動でインストールした。
#+begin_src sh
tar xvfz nkf-2.1.2.tar.gz
cd nkf-2.1.2/
make
make install
#+end_src
その後、./configreからやり直し。...だがnkfが今だに見つからないとでる。
#+begin_src sh
$ sh ./configure --with-lispdir=~/Dropbox/dotfiles/emacs/site-lisp/sdic --infodir=~/Dropbox/dotfiles/emacs/info/sdic --with-dictdir=~/Dropbox/dict/sdic
loading cache ./config.cache
checking for a BSD compatible install... (cached) /usr/bin/install -c
checking whether build environment is sane... yes
checking whether make sets ${MAKE}... (cached) yes
checking for working aclocal... found
checking for working autoconf... found
checking for working automake... found
checking for working autoheader... found
checking for working makeinfo... found
checking for emacs... (cached) /usr/bin/emacs
#+end_src
よく見ると、cacheを使っているようである。なので削除してリトライ。
#+begin_src sh
$ sh ./configure --with-lispdir=~/Dropbox/dotfiles/emacs/site-lisp/sdic --infodir=~/Dropbox/dotfiles/emacs/info/sdic --with-dictdir=~/Dropbox/dict/sdic
creating cache ./config.cache
checking for a BSD compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking whether make sets ${MAKE}... yes
checking for working aclocal... found
checking for working autoconf... found
checking for working automake... found
checking for working autoheader... found
checking for working makeinfo... found
checking for emacs... /usr/bin/emacs
checking where emacs files are in... /usr/local/share/emacs
checking where .elc files should go... ~/Dropbox/dotfiles/emacs/site-lisp/sdic
checking for nkf... /usr/local/bin/nkf
checking for perl... /usr/bin/perl
checking for gzip... /usr/bin/gzip
checking for bzip2... /usr/bin/bzip2
checking for cp... /usr/bin/cp
checking for sort... /usr/local/bin/sort
checking for EIWA Dictionary...         gene.sdic
checking for WAEI Dictionary...         jedict.sdic
updating cache ./config.cache
creating ./config.status
creating Makefile
creating lisp/Makefile
creating lisp/sdic.el
creating lisp/sample.emacs
creating install.el
#+end_src
やっと成功。。。あとはお決まりのコマンド。
#+begin_src sh
make clean
make
make install
make install-info
make dict
make install-dict
#+end_src
と思ったら「make dict」がうまくいかない。
#+begin_src sh
$ make dict
make: Nothing to be done for `dict'.
#+end_src
どうも、*.sdicは、「make clean」で削除されないようだ。
なので手動で削除してやり直し。
#+begin_src sh
$ rm *.sdic
$ make dict
/usr/local/bin/nkf -S -e gene.txt | /usr/bin/perl contrib/gene.perl > gene.sdic
/usr/bin/perl contrib/edict.perl edict > jedict.sdic
$ make install-dict
/bin/sh ./mkinstalldirs ~/Dropbox/dict/sdic
/usr/bin/install -c -m 644      gene.sdic ~/Dropbox/dict/sdic
/usr/bin/install -c -m 644      jedict.sdic ~/Dropbox/dict/sdic
#+end_src
M-x sdicで試したところ、英和の変換はうまくいった。
e2wmを使っているが、表示される場所がよろしくないので
なんとか設定を調整して、e2wmのサブウィンドウにしたいところ。
[[file:img/sdic/01.png]]


*** 和英がうまくいかない
英和はうまくいったが、和英がうまくいかない。
多分原因は、cygwinのgrepが日本語を検索できなからだと思う。
試しに下記のコマンドを試したところ
#+begin_src sh
grep 'キスマーク' jedict.sdic
：
<K>ヽ</K><K>くりかえし</K>repetition mark in katakana
<K>ヾ</K><K>くりかえし</K>voiced repetition mark in katakana
<K>ゝ</K><K>くりかえし</K>repetition mark in hiragana
<K>ゞ</K><K>くりかえし</K>voiced repetition mark in hiragana
<K>〃</K><K>おなじく</K>ditto mark
<K>仝</K><K>どうじょう</K>"as above" mark
<K>々</K>repetition of kanji (sometimes voiced)
<K>〆</K><K>しめ</K>end or closure mark
：
#+end_src
おおお全部ヒットしてしまっているよ。。。。
cygwinのコンソールからgrepしたときはヒットするのだが、
自分がメインで使用しているemacsはGUI版なので
裏でうごくものが、dosになっている。多分これが原因だろう。
てことで、shellをdosじゃなくてbashにしてみる。
と思ったが、eshellじゃなくて、shellはcygwinが動くように設定してあった。
で、shell-modeでgrepしてみると、
#+begin_src sh
$ grep 'キスマーク' jedict.sdic
grep 'LX}[N' jedict.sdic
grep: Unmatched [ or [^
#+end_src
こんな感じで化けてしまう。

 (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)

** DONE Playframeworkで静的ファイルの指定方法                 :playframework:
   CLOSED: [2012-04-17 火 09:51]

Playframeworkで静的ファイル(pngなど)を配置する場合,
#+BEGIN_SRC sh
{プロジェクトルート}/public/images
#+END_SRC
などに配置し、テンプレートからは、
#+BEGIN_SRC sh
<img src="@{'/public/images/logo.png'}">
#+END_SRC
のように対象ファイルを= @{`hoge`} = でかこむ。

** DONE playframeworkのModelにスーパークラスをつくる。        :playframework:
   CLOSED: [2012-04-17 火 08:28]

Modelのスーパークラスを作って、作成日と更新日をデフォルトで持てるようにした。

#+BEGIN_SRC c
import javax.persistence.MappedSuperclass;

@MappedSuperclass
public class BaseModel extends Model {
    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false)
    public Date createdAt;

    @Temporal(TemporalType.TIMESTAMP)
    public Date updatedAt;

    @PrePersist
    protected void onCreate() {
        this.createdAt = new Date();
        this.updatedAt = new Date();
    }

    @PreUpdate
    protected void onUpdate() {
        this.updatedAt = new Date();
    }
}
#+END_SRC

使用するときはこんな感じ。
#+BEGIN_SRC c
package models;
 :

@Entity
public class Editrss extends BaseModel {

    @Required
    public String title;
  :
  :
}

#+END_SRC
これにより自動的に、初めてレコードが作成されるときと更新したときにそれぞれ日時が挿入されるようになった。

** DONE Playframeworkで複数のカラムで条件を指定したい場合     :playframework:
   CLOSED: [2012-04-06 金 09:27]

findの引数にSQLのWHERE句を乗せる感じ。
#+BEGIN_SRC c
MyModel result = MyModel.find("id = ? and kind = ?", id, kind);
#+END_SRC

** DONE Playframeworkでクッキーの値を取得する方法             :playframework:
   CLOSED: [2012-04-06 金 09:27]

#+BEGIN_SRC c
 import play.mvc.*;
 Http.Cookie ckObject = Http.Request.current().cookies.get("key");
 if (ckObject != null) {
   System.out.println("value:" + ckObject.value);
 }
#+END_SRC
*** 参考
- http://stackoverflow.com/questions/6249387/how-do-i-read-the-value-of-a-cookie-in-the-play-framework-with-scala   

** DONE playframeworkの起動停止方法など                       :playframework:
   CLOSED: [2012-04-06 金 09:27]

起動
#+BEGIN_SRC sh
play start $APP_PATH --%production
#+END_SRC

停止
#+BEGIN_SRC sh
play stop $APP_PATH
#+END_SRC

ログ(標準出力)
#+BEGIN_SRC sh
$APP_PATH/logs/system.out
#+END_SRC

プロセスID(PID)の場所
#+BEGIN_SRC sh
$APP_PATH/server.pid
#+END_SRC

** DONE PlayFrameworkによるapplication.confからのデータの読み方 :playframework:
   CLOSED: [2012-04-06 金 09:25]

applicaiton.confに下記のように定義していたとしたら
#+begin_src sh
app.title = WeboTool
#+end_src
下記で読み込める。
#+BEGIN_SRC c
renderArgs.put("pageTitle", Play.configuration.getProperty("app.title"));
#+END_SRC
http://undersourcecode.blog62.fc2.com/blog-entry-116.html

** DONE Playとapacheとresinの共存                             :playframework:
   CLOSED: [2012-04-06 金 09:24]

*** 要件
Playを使うことにしたがapache+resinをもともと使用しているのでそこに組み込みたい。

*** 実現方法
最初、playのリクエストのみプロキシで振り分けるようにする予定だったが
caucho_moduleを組み込んでるとplayのリクエストすべがresinに送られてしま
うため、caoucho_moduleは削除し、resinへのリクエストもまたプロキシで流す
ことにした。

下記を参考にしたが、この設定だけでは足りず、proxy_http_moduleも追加する必要がある。
- http://playdocja.appspot.com/documentation/1.2.3/production
#+begin_src sh
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
 :
# resinへの振り分け
<VirtualHost *>
  ProxyPreserveHost On
  ServerName resin.hoge.jpjp
  ProxyPass / http://127.0.0.1:9000/
  ProxyPassReverse / http://127.0.0.1:9000/
</VirtualHost>

# play!への振り分け
<VirtualHost *>
  ProxyPreserveHost On
  ServerName play.hoge.jpjp
  ProxyPass / http://127.0.0.1:8080/
  ProxyPassReverse / http://127.0.0.1:8080/
</VirtualHost>
#+end_src

** DONE firefoxでwebglを有効にする方法                              :firefox:
   CLOSED: [2012-03-06 火 09:23]

会社のマシンのことだが、同じ環境にもかかわらずchromeでは有効になる
webglの機能がfirefoxでは機能しなかった。そこで下記の設定を実施した。

ロケーションバーで下記を入力する。
#+BEGIN_EXAMPLE
about:config
#+END_EXAMPLE
絞りこみで「webgl」と入力する。
#+BEGIN_EXAMPLE
webgl.force-enabledをtrueに変更する
#+END_EXAMPLE
下記のページで動作確認。
- http://webglsamples.googlecode.com/hg/aquarium/aquarium.html
Lキーで鮫からレーザが発射されるらしい。

** DONE windowsローカルから踏み台経由でtramp                          :emacs:
   CLOSED: [2012-03-06 火 09:23]

windowsでtrampでファイルを編集するには、cygwin付属のsshを使うよりplinkを使ったほうが良いらしい。
そこでtrampの設定を下記のようにデフォルト接続メソッドをplinkにしておく。

#+BEGIN_SRC emacs-lisp
(require 'tramp)

(setq tramp-default-method "plink")
(add-to-list 'tramp-default-proxies-alist
             '("dev01-host" "mikio_kun" "/plink:mik@humo.jp"))

#+END_SRC
ファイル編集だけなら割とサクサク動くのだが =anything-project= などを使
うと重くて使いものにならない。また、リモートのシェル上でrubyスクリプト
などを実行しようにもシバング =#!/usr/local/bin/ruby= がローカルのパスと違
うため実行できない。windowsからlinuxのリモートに接続するためにはファイ
ル編集のみに留めておいたほうがよさそうである。

** DONE tmux で複数ペインに同時入力                                    :tmux:
   CLOSED: [2012-03-06 火 09:09]

.tmux.confに下記の設定をしておくと、複数のペインで同時にコマンド入力ができる。
複数のサーバーで同じ作業をする時に便利かもしれない。
#+BEGIN_SRC sh
# 複数ペイン同時入力
bind a set-window-option synchronize-panes on
bind A set-window-option synchronize-panes off
#+END_SRC

** DONE CENTOSにtmuxインストールではまる                        :hamari:tmux:
   CLOSED: [2012-02-12 日]

まずは、yumでインストールしてみる。tmuxはyumにないので、リポジトリに追
加する。
#+BEGIN_SRC sh
$ sudo vi /etc/yum.repos.d/CentOS5.2i386-Base.repo

[dag]
name=Dag RPM Repository for Redhat EL5
baseurl=http://apt.sw.be/redhat/el$releasever/en/$basearch/dag
gpgcheck=1
enabled=0
gpgkey=http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
#+END_SRC
enable=1にすると常用する。常用は不安なので0にしておく

#+BEGIN_SRC sh
$ sudo yum --enablerepo=dag search tmux
$ sudo yum --enablerepo=dag install tmux
$ sudo yum install libevent-devel
#+END_SRC

NGだったのでソースから入れ直す(tmux1.4)
#+BEGIN_SRC sh
$ wget http://downloads.sourceforge.net/project/tmux/tmux/tmux-1.4/tmux-1.4.tar.gz?r=http%3A%2F%2Ftmux.sourceforge.net%2F&ts=1300762620&use_mirror=jaist
#+END_SRC

ncuressとかがないといってエラーがでるのでいれた。
#+BEGIN_SRC sh
$ sudo yum install ncurses-devel.i386
#+END_SRC

以下のエラー。どうもtmux 1.4ではダメっぽい
#+BEGIN_SRC sh
server-client.o: In function `server_client_msg_error':
server-client.c:(.text+0x1f1e): undefined reference to `evbuffer_add_vprintf'
server-client.o: In function `server_client_msg_print':
server-client.c:(.text+0x1f88): undefined reference to `evbuffer_add_vprintf'
server-client.o: In function `server_client_msg_info':
server-client.c:(.text+0x1ffc): undefined reference to `evbuffer_add_vprintf'
server.o: In function `server_start':
server.c:(.text+0x2ed): undefined reference to `event_reinit'
collect2: ld はステータス 1 で終了しました
make: *** [tmux] エラー 1
#+END_SRC

1.3で試す。やっぱり同じエラーがでた。
#+BEGIN_SRC sh
server.o: In function `server_start':
server.c:(.text+0x32a): undefined reference to `event_reinit'
collect2: ld はステータス 1 で終了しました
make: *** [tmux] エラー 1
#+END_SRC

1.2で試したら通った。しかし、起動したらコンソールがおかしなことになり使
えない。。。しかたがないのでlibeventもソースから入れることにする。

ところで下記のようにinstallを試みるとバージョンが表示される。
これはlibevent 1.1aということなんだろうか。
#+BEGIN_SRC sh

$ sudo yum install libevent
 :
Parsing package install arguments
Package libevent - 1.1a-3.2.1.i386 is already installed.
Nothing to do
#+END_SRC

ということでlibevent1.4を入れた。
ちなみに最新はlibevent2.0なのでtmuxがバージョンアップしたら引きづられるかも。
#+BEGIN_SRC sh
tar xvfz libevent-1.4.14b-stable.tar.gz
cd libevent-1.4.14b-stable
./configure
make
sudo make install
#+END_SRC

これでも駄目だった。試しにlibeventを使用しているmemcachedを起動してみた
ところ、libevent.soが見つからなくてこけてしまう。なので、libeventの場所
を指定してmemcachedを再コンパイルしてみる。
#+BEGIN_SRC sh
$ sudo ./configure --with-libevent=/usr/local/lib
$ sudo make && sudo make install
$ sudo /etc/init.d/memcached start
/usr/local/bin/memcached: error while loading shared libraries: libevent-1.4.so.2: cannot open shared object file: No such file or directory
#+END_SRC
libevnt-1.4.so.2自体はあるので、パスが通っていないのが原因。

下記で一時的に動かすことができるがこれは恒久的な対応ではないためシステ
ムに登録する必要がある。
#+BEGIN_SRC sh
$ sudo vi /etc/profile
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
$ . /etc/profile
#+END_SRC

具体的には以下のコマンドでOK
#+BEGIN_SRC sh
$ sudo vi /etc/ld.so.conf
# 末尾にライブラリを追加
/usr/local/lib

# ライブラリパスを反映
$ sudo /sbin/ldconfig
#+END_SRC

*** 参考
- http://www.atmarkit.co.jp/flinux/rensai/linuxtips/300sharelib.html

** DONE tmux セッションの保存方法                                      :tmux:
   CLOSED: [2012-02-12 日 09:07]

下記を参考に.bashrcにSSH_AUTH_SOCKを固定にする方法で解決した。
- http://www.gcd.org/blog/2006/09/100/

#+BEGIN_SRC sh
agent="$HOME/tmp/ssh-agent-$USER"
if [ -S "$SSH_AUTH_SOCK" ]; then
        case $SSH_AUTH_SOCK in
        /tmp/*/agent.[0-9]*)
                ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
        esac
elif [ -S $agent ]; then
        export SSH_AUTH_SOCK=$agent
else
        echo "no ssh-agent"
fi
#+END_SRC

testコマンドのSオプションは以下のとおり。
#+BEGIN_EXAMPLE
-S FILE
  FILE exists and is a socket
#+END_EXAMPLE

やっていることは、直接参照する$SSH_AUTH_SOCKは固定のパスにしてしまい、
ログインごとに変わるUNIXドメインソケットはシンボリックリンクで指し示すようにしている。

*** その他参考にしたもの
- http://hibari.2ch.net/test/read.cgi/unix/1268778432/

#+BEGIN_EXAMPLE
84 ：名無しさん＠お腹いっぱい。：2010/11/02(火) 15:34:12
    screenと違って、アタッチ時に環境変数SSH_AUTH_SOCKを新しい値に更新してくれるのは
    嬉しいんだけど、それが実際シェルに反映されるのは、新しいシェルを追加した時だけだよね？

    デタッチ前から動いてるシェルのSSH_AUTH_SOCKを自動的に更新する事って出来る？

87 ：名無しさん＠お腹いっぱい。：2010/11/21(日) 07:31:25
    >>84
    シェル側の適当なフックで、親プロセスの環境変数を調べるとか。

88 ：名無しさん＠お腹いっぱい。：2010/11/24(水) 16:56:11
    >>84
    こんなのしてる：
    sc() {
    　if [ -n "$TMUX" ]; then
    　　unset $(tmux show-env | sed -n 's/^-//p')
    　　eval export $(tmux show-env | sed -n 's/$/"/; s/=/="/p')
    　else
    　　tmux -u start \; attach \; $@;
    　fi
    }
    これでとにかくscって打てばアタッチするし、アタッチ済なら
    アタッチ前シェルの環境を取り込んでくる。 
#+END_EXAMPLE

show-envはshow-environmentのエイリアスで、-で始まる環境変数はシステムか
ら削除されたものらしい。
#+BEGIN_SRC sh
# "-"のついている（tmuxにより削除された環境変数）をクリア
unset $(tmux show-env | sed -n 's/^-//p')

# 環境変数の再定義
eval export $(tmux show-env | sed -n 's/$/"/; s/=/="/p')
#+END_SRC

** DONE adkのインストール                                           :android:
   CLOSED: [2012-02-11 土 09:04]

#+BEGIN_SRC sh
$ wget http://dl.google.com/android/android-sdk_r10-linux_x86.tgz
$ sudo tar xvfz android-sdk_r10-linux_x86.tgz -C /usr/local
$ sudo -s
# echo "export PATH=\${PATH}:/usr/local/android-sdk-linux_x86/tools" > /etc/profile.d/androidsdk.sh
#+END_SRC

*** PlatformAPIのインストール
- GUIを起動する
#+BEGIN_SRC sh
$ sudo /usr/local/android-sdk-linux_x86/tools/android
#+END_SRC

- 左ペインでAvailable packages を選択する。
- 右ペインでAndroid Repositoryをクリックする。
#+BEGIN_EXAMPLE
accept all
#+END_EXAMPLE
- インストール画終了したら右下のボタンを押下で完了。

** DONE Titanium Developerの導入                                    :android:
   CLOSED: [2012-02-11 土 09:02]

#+BEGIN_SRC sh
$ wget http://www.appcelerator.com/download-linux32
$ tar xfz download-linux32
#+END_SRC
解凍したフォルダでTitaniumDeveloperをダブルクリックしてインストーラーを
起動する。Installボタンをクリックしてインストール。

その後、競合するライブラリを削除しておく
#+BEGIN_SRC sh
$ cd ~/.titanium/runtime/linux/1.0.0/
$ rm libg*2.0.*
$ cd -
#+END_SRC

** DONE firefoxでgoogleReaderにサイト登録する                       :firefox:
   CLOSED: [2012-02-11 土 09:01]

Firefoxで今閲覧しているサイトを、登録ボタン一発でGoogleReadeに登録したい。
- [オプション]-[プログラム]-[Webフィード]
- 「GoogleReaderを使用」を選択する。
- アドレスバーの左側にあるサイトアイコンボタンをクリックする。
- 詳細を表示をクリックする。
- フィードを選択する。
- 登録したいリンクをクリックする。

** DONE スペックの調べかた                                            :linux:
   CLOSED: [2012-02-11 土 09:00]

#+begin_src sh
# コア数(実環境)
$ cat /proc/cpuinfo | grep 'physical id'|wc -l

# コア数(仮想環境)
$ cat /proc/cpuinfo | grep processor|wc -l

# メモリ
$ free

# ディスク
$ sudo /sbin/fdisk -l

# OS
$ cat /proc/version

# OSのバージョンは下記でもよい
$ cat /etc/redhat-release
CentOS release 5.2 (Final)
#+end_src

** DONE RubyにおけるURLのエンコードについて                            :ruby:
   CLOSED: [2012-02-11 土 09:00]

URI.escape URIに使用可能な文字以外をエスケープするのでスラッシュはエスケープしない。
CGI.escape URI全体をエスケープしたいときはこちらを使用する。

** DONE antで1クラスのみのjunit                                        :java:
   CLOSED: [2012-02-11 土 09:00]

下記のようなターゲットを作って
#+BEGIN_SRC xml
  <target name="unittest" depends="compile-test">
    <junit>
      <classpath refid="cpath" />
      <classpath>
        <path location="./target/test-classes" />
        <pathelement location="./target/webapp/WEB-INF/lib/${jar.name}" />
      </classpath>
      <formatter type="plain" usefile="false" />
      <sysproperty key="basedir" value="${basedir}"/>
      <test name="${testclass}" fork="yes"/>
    </junit>
  </target>
#+END_SRC
下記のように呼び出す。
#+BEGIN_SRC sh
$ ant unittest -Dtestclass='hoge.HogeTest'
#+END_SRC

** DONE mewでマスターキーがうまくいかない                      :emacs:hamari:
   CLOSED: [2012-01-19 木 08:14]

cygwin上でGPGがうまく動作しないのが原因。

*** fackecygpty.exeをためす。(うまくいかなかった)

どうやらcygwinで使うにはfakecygpty.exeなるものが必要らしい。
- http://d.hatena.ne.jp/kiwanami/20110221/1298293727

下記URLよりソースファイルをダウンロードしてcygwinのgccでコンパイルする
- http://www.meadowy.org/meadow/browser/trunk/nt/fakecygpty.c
#+begin_src sh
$ gcc -o fakecygpty.exe fakecygpty.c
$ cp fakecygpty.exe ~/bin
#+end_src

*** gnupgにcygwin用のパッチをあてる(解決)
下記からソースを取得する。
- http://www.gnupg.org/download/index.en.html

#+begin_src sh
~/src
tar xvfz gnupg-1.4.11.tar.gz
#+end_src

パッチを取得する。
- http://u.hoso.net/2009/11/ntemacs-gnupg-patch.html
パッチを適用する。
#+begin_src sh
cd ~/src
patch -p 0 < gnupg-1.4.11_ttyio.patch
#+end_src


もともと入れていたgpgを削除した。
#+begin_src sh
$ apt-cyg remove gnupg
Removing gnupg
Package gnupg removed
#+end_src

ビルド
#+begin_src sh
$ cd ~/src
$ cd gnupg-1.4.11
$ ./configure
$ make
$ make install
#+end_src
/usr/local/binにできる。


gnupack用のemacsだとパスが通ってないのでconfig.iniに下記を追加した。
#+begin_src sh
PATH           = %PATH%;%CYGWIN_DIR%\usr\local\bin
#+end_src

以上で解決した。
   
** DONE mewで送信できるようにする                              :emacs:hamari:
   CLOSED: [2012-01-18 水 08:58]

会社でmewを使おうと思い、popサーバーとsmtpサーバーの設定をする。
その結果、受信は成功するも送信は失敗するという状態になった。
#+begin_src sh
Cannot connect to the SMTP server
#+end_src
原因を調べても全くわからなかったが、下記サイトを見てやっと原因がわかった。
- http://d.hatena.ne.jp/peppoco/20110406/1302106751
McFeeがemacsをアクセスブロックしているらしい。試しにログを見てみると下記のとおり。
[タスクトレイ 右クリック] -> [管理機能] -> [VirusScan Enterprize] -> [アクセス保護 右クリック] -> [ログの表示]
#+begin_src sh
2012/01/04	15:03:12	ポート ブロック ルールによりブロックされました 	C:\Users\mikio\opt\emacs-23.2\bin\emacs.exe	ウイルス対策標準保護:大量メール配信型ワームにメールを送信させない	10.0.192.16:25
2012/01/04	17:08:46	ポート ブロック ルールによりブロックされました 	C:\Users\mikio\opt\emacs-23.2\bin\emacs.exe	ウイルス対策標準保護:大量メール配信型ワームにメールを送信させない	10.0.192.16:25
#+end_src


解除する手順は下記のとおり。
#+begin_src sh
  * [スタート]＞[プログラム]＞[McAfee]＞[VirusScan コンソール]を選択
  * [アクセス保護]を選択
  * 右クリックから「プロパティ」を選択
  * [アクセス保護]タブの「ウイルス対策標準保護」から除外するプロセスに emacs.exe を追加
#+end_src
でもこれは会社ではMcfeeの設定をいじれないので実施できない。
しかたがないので、emacs.exeをリネームして逃げることにした。
emacs.exe -> thunder_emacs.exe

ただこれをやってしまうと、runemacs.exeで呼び出せなくなる。
(DOS窓が表示されてしまう)
これについては、仮想画面にDOS窓を押し込むことで見難さを解消する。

** DONE "su -" と "su" のちがい                                       :linux:
   CLOSED: [2012-01-18 水 09:21]

su は現在のHOME環境を引き継ぐ
su -は引き継がない。
※ - は環境を否定する(打ち消し線)という意味で覚えると良いかも。

** DONE $(ドル)丸括弧（カッコ）                                       :linux:
   CLOSED: [2012-01-18 水 08:57]

kshやbashの場合、「$(コマンド)」（$＋単一の丸括弧）はバッククォート指定「`コマンド`」と同じ。
$()が使えるシェルなら、バッククォートよりも$()を使うべき。
（バッククォートは古い形式であり、ネストできないし、開始と終了もまぎらわしい）

** DONE lessとは                                             :tips:
   CLOSED: [2012-01-18 水 08:16]

jekyllや [[http://renard.github.com/o-blog/][o-blog]] を使っていたら、lessというものがでてきた。どうもcssの代わりになるもののようだが、なにものかわからなった。

簡単にいうとlessとは、変数の使えるcssのようだ。less.jsを使用して、cssを適用していくようである。
- http://ascii.jp/elem/000/000/668/668205/

また、less.jsを使いたくない場合、.lessを.cssに変換するコンパイラもあるらしい。
** DONE Clojureでゲームプログラミングその1 実験編                   :clojure:
   CLOSED: [2011-11-09 水 19:29]

*** はじめに

LispでGAMEつくろうかなと。
最初CommonLispでつくろうかなと思ったけども、現時点でCommonLispとClojure(+Java)を比較したときに
後者のほうが詳しいかなということで、まずはClojureでつくってみて、落ち着いたらCommonLispでもつくってみようかなと。

とりあえず、下記の流れで、画像を表示して動かすところまでチャレンジしてみる。
- ウィンドウ表示
- 画像表示
- メインループの実現
- 画像移動

もちろん前回インストールしたSLIMEとLeiningenを使って作業しますよ。
ちなみにClojureで「もの」を作るのは初めてなので、ホント手探りです。
しかもClojureでGameプログラミングの情報ってほとんどないんだよな。さて。

*** ウィンドウ表示
ClojureでのGUIはさっぱりわからんけども、とりあえずJavaのサンプルとかを頼りにウィンドウを表示してみる。
#+begin_src Clojure
(import (javax.swing JFrame))
(def frame (JFrame. "Clojure SampleGame")) 
(doto frame
(.setSize 640 480)
  (.setVisible true))
#+end_src
でた。簡単すぎる！結構感動します。
[[file:img/clojure-game01/01.png]]

次は画像を表示してみる。

*** 画像表示

まずは、画像ファイルの読み込みだ。下記のコードをclojureで動かしてみる。
#+begin_src clojure
java.awt.image.BufferedImage bimage;
image = javax.imageio.ImageIO.read(new java.io.File("hoge.png"));
#+end_src
下記の画像を表示してみる。これは昔作ったゲームで使用したものでアニメーションパターンもはいってる。
[[file:img/clojure-game01/gai.png]]

画像ファイルはプロジェクト直下においてある（REPLを起動したディレクトリ)。
外部ファイルはプロジェクトルートからの相対パスでOKのようである。
#+begin_src clojure
(import (java.awt.image BufferedImage))
(import (javax.imageio ImageIO))
(import (java.io File))
(def image (ImageIO/read (File. "gai.png"))) 
#+end_src
とりあえずうまく読み込めたっぽいので、ウィンドウに表示してみる。
#+begin_src clojure
(import (java.awt Graphics))
(def graphics (.. frame (getGraphics)))
(doto graphics
  (.drawImage image 0 0 frame))
#+end_src
でた！
[[file:img/clojure-game01/02.png]]

線もかけたよ。
#+begin_src clojure
(.. graphics (drawLine 0 0 640 480))
#+end_src

[[file:img/clojure-game01/03.png]]


ところでこれまでの画像表示はタイトルバーにめり込んでしまっている。
これは描画命令の座標原点が、ウィンドウそのもの左上を原点としているためである。
これを回避するには、Graphics#translateを呼び出す。

**** 位置調整
ずれの原因であるタイトルバーや枠お情報は、java.awt.Insetsとういクラスに格納されている。
これはJframe#getInsetsメソッドで取得でいるので、束縛しておく。
#+begin_src clojure
(def insets (.. frame getInsets)) 
#+end_src

確認。それっぽい値が入っている。
#+begin_src clojure
user> insets
#<Insets java.awt.Insets[top=24,left=1,bottom=5,right=1]>
#+end_src

では、このinsetsを使って描画用原点をずらしてみる。
#+begin_src clojure
(.. frame (setVisible true))
(.. graphics (translate (.. insets left) (.. insets top)))
(.. graphics (clearRect 0 0 640 480))
(.. graphics (drawImage image 0 0 frame))
#+end_src
[[file:img/clojure-game01/04.png]] 

これで左上原点が、ずれていい具合に表示された。

insentsを利用したついでに説明。
実はウィンドウサイズで640x480を指定しているけれども、
タイトルバーや枠のサイズがあるため、描画領域は640x480よりもちょっと小さい。
なので、例えば640x480ちょうどのサイズの画像を表示しようとしても少し切れてしまったりする。
ということで、insentsを利用して描画領域が純粋に640x480似なるように調整する。
#+begin_src clojure
(doto frame
    (.setSize (+ 640 (.. insets left) (.. insets right)) (+ 480 (.. insets top) (.. insets bottom)))
    (.setVisible true))
#+end_src
以上で描画領域の細かい調整が完了した。

**** 画像の一部を表示したい
ところで、現状だとアニメパターンがすべて表示されていてみっともないので
一部だけを表示したい。
この要件を満たすには、Graphics#DrawImageで下記のように引数を指定すれば良い。
#+begin_src clojure
(.drawImage
 	image   ;; 描画画像
	0 0     ;; 転送先の左上座標
	32 32   ;; 転送先の右下座標
	0 0     ;; 画像元の左上座標
	32 32   ;; 画像元の右下座標
 	frame)  ;; 描画対象
#+end_src

#+begin_src cojure
(import java.awt.Color)
(def clear-color (Color. 0 0 127))

(let [g (.. frame (getGraphics))]
  (doto g
    (.translate (.. insets left) (.. insets top))
    (.setColor clear-color)
    (.fillRect 0 0 640 480)
    (.drawImage image
                0 0 32 32
                0 0 32 32
                frame)
    (.dispose)))
#+end_src
[[file:img/clojure-game01/05.png]]


なんども描画してると、前の画像が残って確認しづらいので
描画前にクリアカラーで塗りつぶしている。
ついでにグラフィックオブジェクトもその都度破棄するようにした。

つぎはゲームのかなめ、メインループを実現してみる。
*** メインループの実現
メインループの実現方法にはにはいろいろあけれども
とりあえず動かすことが目的なので、
実装が簡単そうなjava.util.TimerTaskを使用してみる。

Clojureで継承が必要なJavaクラスを使うには、proxyを使う。
以下のようにTimerTaskを継承したクラスをつくる。
#+begin_src clojure
(import (java.util Timer TimerTask))
(import (java.util TimerTask))
(def mainloop
  (proxy [TimerTask] []
    (run []
      (println "呼びだされた"))
    )) 
#+end_src

テストしてみる。
#+begin_src clojure
user> (.. mainloop run) 
呼びだされた
nil
#+end_src
うまくいっているようである。

続いてTimeクラスにmainloopを渡してみる。これがはまった。
#+begin_src clojure
user> (.. (Timer.) schedule mainloop 0 500)

Malformed member expression
  [Thrown class java.lang.IllegalArgumentException]

Restarts:
 0: [QUIT] Quit to the SLIME top level

Backtrace:
  0: clojure.lang.Compiler$HostExpr$Parser.parse(Compiler.java:825)
  1: clojure.lang.Compiler.analyzeSeq(Compiler.java:5369)

#+end_src
「Malformed member expression」の原因がわからなくてかなりはまった。
ぐぐった結果、javaのlong型を引数として渡すときは、long関数を呼び出す必要があることがわかった。
#+begin_src clojure
user> (.. (Timer.) schedule mainloop (long 0) (long 500))
No matching field found: schedule for class java.util.Timer
  [Thrown class java.lang.IllegalArgumentException]

Restarts:
 0: [QUIT] Quit to the SLIME top level

Backtrace:
  0: clojure.lang.Reflector.getInstanceField(Reflector.java:245)
  1: clojure.lang.Reflector.invokeNoArgInstanceMember(Reflector.java:267)
#+end_src
とここでまたエラー。でまたぐぐった結果、メソッドの呼び出し方が間違っていたorz。
scheduleをカッコでくくらないと駄目らしい。
#+begin_src clojure
user> (.. (Timer.) (schedule mainloop (long 0) (long 500)))
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
nil
#+end_src
ということでやっとTimerクラスにTimerタスクで作ったメインループを渡すことができた。ふぅ。
次は画像を動かしてみる。

*** 画像の移動
いよいよ画像に魂を与えるw。その為には状態を管理しなければならない。座標だ。
Clojureはデフォルトでは値を更新できない。これを変更するためには特別な定義が必要。
スレッドを使う予定は今のところ無いので、扱いの簡単そうなatomを使用してみる。
#+begin_src clojure
;; プレイヤー定義
(def player (atom {:pos [0 0]}))
#+end_src

こんな感じで参照できる。
#+begin_src clojure
user> (@player :pos)
[0 0]
user> 
#+end_src

x座標は配列の0番目
#+begin_src clojure
user> (nth (@player :pos) 0) 
0
#+end_src

y座標は配列の1番目
#+begin_src clojure
user> (nth (@player :pos) 1) 
0
#+end_src

playerの座標を更新してみる。
#+begin_src clojure
user> player
#<Atom@2a134eca: {:pos [0 0]}>

;; 変更
user> (swap! player assoc :pos [0 1])
{:pos [0 1]}

;; たしかに更新された
user> player
#<Atom@2a134eca: {:pos [0 1]}>
#+end_src

x座標を更新させる
#+begin_src clojure
user> (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1])
{:pos [1 1]}
user> (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1])
{:pos [2 1]}
user> (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1])
{:pos [3 1]}
user> (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1])
{:pos [4 1]}
#+end_src

ではここまでの移動処理を組み込む。
#+begin_src clojure
(def mainloop
  (proxy [TimerTask] []
    (run []
      (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1]) ;; 座標更新
      (if (< 640 (nth (@player :pos) 0))
             (swap! player assoc :pos [0 0]))

      (let [g (.. frame (getGraphics))
            player-x (nth (@player :pos) 0)
            player-y (nth (@player :pos) 1)]
        
        (doto g
          (.translate (.. insets left) (.. insets top))
          (.setColor clear-color)
          (.fillRect 0 0 640 480)
          (.drawImage image
                      player-x player-y
                      (+ player-x 32) (+ player-y 32)
                      0 0 32 32
                      frame)
          (.dispose))))))
#+end_src

定義したメインループを20ms間隔で呼び出す。
#+begin_src clojure
(.. (Timer.) (schedule mainloop (long 0) (long 20)))
#+end_src

#+begin_html
<iframe width="425" height="349" src="http://www.youtube.com/embed/T4LLkAqETLQ?hl=ja&fs=1" frameborder="0" allowfullscreen></iframe>
#+end_html

画面がちらつきというか、画像が点滅していて話にならない。
次はこのチラツキを抑えるために java.awt.image.BufferStrategyを使ってみる。 

*** ちらつき防止対策
下記のようにJFrame#setIgnoreRepaint, JFrame#createBufferStrategyを呼び出しバッファの準備をする。
この時注意すべきは、JFrame#createBufferStrategyはJFrame#setVisibleのあとに呼び出さなければならないこと。
#+begin_src clojure
(doto frame
    (.setSize (+ 640 (.. insets left) (.. insets right)) (+ 480 (.. insets top) (.. insets bottom)))
    (.setVisible true)
    (.setIgnoreRepaint true) ;; ウィンドウの再描画を無効に(BufferStrategyを使うので)
    (.createBufferStrategy 2) ;;  setVisibleメソッドのあとで呼ばないと実行時エラーになる
    )
;; バッファ作成
(def buffer (.. frame (getBufferStrategy)))
#+end_src

bufferを使って以下のように呼び出し。TimerTaskクラスオブジェクトは都度生成できるように関数化しておいた。
#+begin_src clojure
(defn create-mainloop
  []
  (proxy [TimerTask] []
    (run []
      (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1]) ;; 座標更新
      (if (< 640 (nth (@player :pos) 0))
             (swap! player assoc :pos [0 0]))

      (if (not (.. buffer (contentsLost)))
        (let [g (.. buffer (getDrawGraphics))
              player-x (nth (@player :pos) 0)
              player-y (nth (@player :pos) 1)]
          (doto g
            (.translate (.. insets left) (.. insets top))
            (.setColor clear-color)
            (.fillRect 0 0 640 480)
            (.translate (.. insets left) (.. insets top))
            (.drawImage image
                        player-x player-y
                        (+ player-x 32) (+ player-y 32)
                        0 0 32 32
                        frame)
            (.dispose))
          (.. buffer (show))
          )))))
#+end_src
#+begin_html
<iframe width="425" height="349" src="http://www.youtube.com/embed/3mO4EUh9cl0?hl=ja&fs=1" frameborder="0" allowfullscreen></iframe>
#+end_html



最終的なコード。
#+begin_src clojure
(ns hello-cube.core)

(import (javax.swing JFrame))
(import (java.util Timer TimerTask))
(import (java.awt Graphics Color))
(import (java.awt.image BufferedImage))
(import (javax.imageio ImageIO))
(import (java.io File))

(def clear-color (Color. 0 0 127))
(def frame (JFrame. "Clojure Sample Game")) 
(def image (ImageIO/read (File. "gai.png"))) ;; 画像読み込み
(def player (atom {:pos [0 0]}))

;; 枠を考慮してサイズ指定
(doto frame
    (.setVisible true)
    (.setIgnoreRepaint true) ;; ウィンドウの再描画を無効に(BufferStrategyを使うので)
    (.createBufferStrategy 2) ;;  setVisibleメソッドのあとで呼ばないと実行時エラーになる
    )

;; バッファ作成
(def buffer (.. frame (getBufferStrategy)))
(def insets (.. frame getInsets))  ;; ウィンドウを表示してから出ないと値が入らない。

(doto frame
    (.setSize (+ 640 (.. insets left) (.. insets right)) (+ 480 (.. insets top) (.. insets bottom))))


(defn create-mainloop
  []
  (proxy [TimerTask] []
    (run []
      (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1]) ;; 座標更新
      (if (< 640 (nth (@player :pos) 0))
             (swap! player assoc :pos [0 0]))

      (if (not (.. buffer (contentsLost)))
        (let [g (.. buffer (getDrawGraphics))
              player-x (nth (@player :pos) 0)
              player-y (nth (@player :pos) 1)]
          (doto g
            (.translate (.. insets left) (.. insets top))
            (.setColor clear-color)
            (.fillRect 0 0 640 480)
            (.translate (.. insets left) (.. insets top))
            (.drawImage image
                        player-x player-y
                        (+ player-x 32) (+ player-y 32)
                        0 0 32 32
                        frame)
            (.dispose))
          (.. buffer (show))
          )))))

(def timer (Timer.))
(.. timer (schedule (create-mainloop) (long 0) (long 20)))
#+end_src

*** 所感
ほとんどJavaのメソッドしか使ってないけどもSLIMEの良さは体感できた。
コードが即時反映されて画像が動くのは楽しい。
理想はSLIME上からGameObjectをリアルタイムに操作することだけど、これを実現するにはatomでは無理かも。
あとはスレッドとSLIMEの関係がよくわかってない。TimerTaskを使いにくく感じたのでメインループは別の方法で実現したい。

次回はもうちょっとコードのリファクタリングを施しつつ、
アニメーションとキーボード操作をできるようにしてみる。

*** 参考書籍
#+begin_html
<ul class="thumbnails">
<li class="span2">
<a href="http://www.amazon.co.jp/gp/product/4274067890/ref=as_li_tf_il?ie=UTF8&amp;tag=ocha04-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=4274067890"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=4274067890&amp;MarketPlace=JP&amp;ID=AsinImage&amp;WS=1&amp;tag=ocha04-22&amp;ServiceVersion=20070822"></a><img width="1" height="1" border="0" style="border:none !important; margin:0px !important;" alt="" src="http://www.assoc-amazon.jp/e/ir?t=ocha04-22&amp;l=as2&amp;o=9&amp;a=4274067890">
</li>
<li class="span2">
<a href="http://www.amazon.co.jp/gp/product/4899772319/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;tag=ocha04-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=4899772319"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=4899772319&amp;MarketPlace=JP&amp;ID=AsinImage&amp;WS=1&amp;tag=ocha04-22&amp;ServiceVersion=20070822"></a><img width="1" height="1" border="0" style="border:none !important; margin:0px !important;" alt="" src="http://www.assoc-amazon.jp/e/ir?t=ocha04-22&amp;l=as2&amp;o=9&amp;a=4899772319">
</li>
</ul>
#+end_html


** DONE Emacs + SLIME + Leiningen でClojure開発環境のインストール :emacs:clojure:
   CLOSED: [2011-06-23 木 21:45]

*** はじめに
この記事は、自分がClojureで開発環境を準備するために調べたことをまとめています。

- 対象読者
 - Clojureに興味あるけど始め方がわからんという人。
 - 素のREPLでClojureしてるけど使いにくいと感じてる人。
 - 普段Emacs使ってるけど、SLIME?なにそれ？って人。

- 推定環境
 - Java6
 - emacs23
 - lein
 - slime

OSは、Ubuntu10.04とwindows7, windowsxpで動作確認しています。

Clojureのインストールは、ビルドツールのLeiningenを使えばとっても簡単です。
Leiningenとは、Clojure用のビルドツールで、JavaでいうMavenみたいなものです。
プロジェクトのフォルダのひな形や、コンパイル、ライブラリの管理をしてくれます。

普通に考えると、Clojure本体をインストールして、ライブラリのクラスパスを通して、
起動コマンドを設定してなど、いろいろと手間をかけてやっと動くようになるもんですが、
Leiningenは、leinというシェルスクリプトをパスの通った場所におくだけで、インストールが完了しちゃいます。
あとは、指定のコマンドを叩くだけで、leinスクリプト自体がLeiningen本体はもちろんClojure本体もダウンロードしてくれます
（Java本体だけは予め入れておく必要がありますが）。

ちなみに読み方は「ライニンゲン」だそうです。自分はいつも「れい人間」と読んでますｗ。
- http://d.hatena.ne.jp/masa_edw/20100508/1273284275

  
*** Leiningenのインストール
まずはJavaの最新版をインストールしちゃいましょう
(現時点ではJavaSE7はいろいろ不安定なのでJava6をお勧めします)。
- http://java.com/ja/download/manual.jsp

続いて下記サイトからLeiningenのアーカイブを取ってきます。
- https://github.com/technomancy/leiningen

直リンは以下。
- https://github.com/downloads/technomancy/leiningen/leiningen-1.5.2-win.zip


解凍したらできたフォルダをPATHに通します。
自分の場合は%HOME%\binというディレクトリにleinフォルダの中身(windwosの場合は、lein.batとwget.exe、linuxの場合は、lein)をコピーしました。
#+begin_src sh
$ cd %HOME%
$ mkdir bin
#+end_src

Windwosの環境変数だとこんな感じ。
#+begin_src sh
JAVA_HOME=C:\Program Files\Java\jdk1.6.0_24
PATH=%PATH%;%HOME%\bin;%JAVA_HOME%\bin;
#+end_src

linuxの場合は実行権を付与しておきます。
#+begin_src sh
$ chmod +x lein 
#+end_src

パスが通ってるのを確認したら以下でインストール開始。
#+begin_src sh
$ lein self-install
#+end_src
これで最新版のClojureも含めてLeiningenがインストールされます。

#+begin_src sh
$ lein
Leiningen is a build tool for Clojure.
 :
 :
#+end_src

replを起動してインストールされたことを確認します。
#+begin_src sh
$ lein repl
#+end_src
C-cで終了です。

**** 簡単な使い方。
プロジェクト作成
#+begin_src sh
$ cd ~/dev
$ lein new myproject
$ cd myproject
#+end_src

依存関係の解決
#+begin_src sh
$ lein deps
#+end_src

プロジェクトのパッケージング
#+begin_src sh
$ lein jar
#+end_src


**** Leiningenの次は
Leiningenがあれば、replも起動できるし、あとはテキストエディタさえあれば開発ができます。
極端な話、メモ帳とDOS窓、Linuxだったら端末とviさえあれば開発できるということです。

とはいえ、今時メモ帳で開発なんてありえません。メモ帳や(素の)viではカッコの対応がすぐ崩れてしまいます。
vimや高性能エディタを使えばそれなりに快適な環境が構築できるかもしれませんが、ほとんどLispで書かれているEmacsにはかないません。[fn:1]
この際カッコでできたEmacsを使っちゃいましょうw。

てことで、Emacs用のIDEであるSLIMEという統合開発環境をインストールします。

*** SLIMEとは

Emacsには有名な（というかLispのデファクトスタンダードである）SLIMEという開発環境があります。[fn:2]
#+begin_src sh
SLIME is the Superior Lisp Interaction Mode for Emacs. 
#+end_src
直訳すると「SLIMEはEmacs向けの優れたlisp対話モードです」ですね。

SLIMEの特徴は以下に詳しいですが、
- http://lispuser.net/emacs/lisphacking.html#sec-2.1
簡単にまとめると
- デバッガやシンボルの補完
- 関数の引数表示やドキュメントへの簡単アクセス
- 処理系ごとに違うREPLの差を吸収したUIの提供
などがあります。

ほかにClojureでSLIMEをつかうメリットとして、スクリプト起動で待たされることがないということがあります。
ClojureはJVMベース故に起動がとても重いので、他のスクリプト言語のようにサクッと起動してちゃちゃっと処理するのが苦手ですが、
SLIMEで開発すればそのようなことはなく、即実行ができるので快適に使えると思います。Linuxなどでいう端末みたいな役割を果たすということですかね。
このように便利なSLIMEですから、多くのLisperはカッコが好きというよりもSLIMEの操作性の虜になってるのではないかっなって思います。

私は最初、LISPの処理系であればなんでもSLIMEが使えるものと勝手に勘違いしていたのですが、
SLIMEはもともとCommonLisp用に開発されたもので、当初はCommonLisp以外の環境はサポートされていなかったようです。
例えばGaucheは、もともとSLIMEに対応していなくて、2009年に最初のバージョンができたようです。意外ですね。

ClojureでSLIMEを利用するには以下のインストールが必要です。[fn:3]

- SLIME(SLIME本体、SLIME-REPL)
- SWANKサーバー(swank-clojure)
- Clojure-mode

SWANKサーバーとは、SLIMEとLisp処理系を橋渡しするサーバーです。
このSWANKサーバのおかげでClojureでもSLIMEを利用できるわけです。

これらのモジュールは、それぞれ手動でインストールしても良いのですが、
SLIMEとClojure-modeに関しては、最近Emacs界隈で有名なMarmaladeを利用すると簡単です。
MarmaladeはEmacsように開発されたパッケージシステムで簡単にEmacs用ソフトをインストールできます。
次はMarmaladeのインストールを説明します。

*** Marmaladeのインストール

ほとんど下記にある説明のとおりですが
- http://sheephead.homelinux.org/2011/06/17/6724/

Marmaladeとは次期Emacs24でサポートされているパッケージ管理サイトで
Emacs24からは標準で利用できるらしいです。

インストール方法も上記サイトからのパクリですが

下記を実行して
#+begin_src emacs-lisp
(install-elisp "http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el")
#+end_src

下記を.emacsに設定すればインストール完了です。
#+begin_src elisp
(require 'package)

;;リポジトリにMarmaladeを追加
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))

;;インストールするディレクトリを指定
(setq package-user-dir (concat user-emacs-directory "vendor/elpa"))

;;インストールしたパッケージにロードパスを通してロードする
(package-initialize)
#+end_src

これでパッケージを簡単にインストールできるようになりました。

*** SLIMEのインストール
Marmaladeからインストールします。
#+begin_src sh
M-x package-install
#+end_src
下記をiで選択し、xで実行してください。
- slime
- slime-repl
- clojure-mode
SLIME自身は、SLIME本体とSLIME-REPLという2部構成になっているっぽいです。
また、Clojure-modeはSLIMEと直接関係ありませんが、ついでにインストールしておきます。

設定は以下になります。
#+begin_src emacs-lisp
(require 'slime)
(setq slime-net-coding-system 'utf-8-unix
      slime-protocol-version 'ignore)
(slime-setup '(slime-repl))

(require 'clojure-mode)
(add-hook 'slime-repl-mode-hook (lambda () (clojure-mode-font-lock-setup)))
#+end_src
自分の場合、下記のようにslime-fancy, slime-bannerを指定すると動きませんでした。
#+begin_src emacs-lisp
(slime-setup '(slime-repl slime-fancy slime-banner))
#+end_src
続いてSWANKサーバーをインストールします。

*** swank-clojureのインストール
Clojure用のswankサーバーは、Leiningenのプラグインとしてインストールします。
#+begin_src sh
$ lein plugin install swank-clojure 1.3.3
#+end_src

下記でswankサーバーを起動できます。
#+begin_src sh
$ cd ~/dev/project
$ lein swank
#+end_src
この方法では、Projectディレクトリに移動してから起動しますが、
こうすることにより、必要なクラスパスが設定された状態でSWANKサーバーが起動されます。

下記は、プロジェクトを指定しない起動方法です。
#+begin_src sh
$ ~/.lein/bin/swank-clojure
#+end_src
この場合、クラスパスの指定がないので、clojure.coreの関数ぐらいしか使えません。

**** 参考
https://github.com/technomancy/swank-clojure


*** SLIMEの使い方
ここまでで、Leiningen, SLIME, SWANK-Clojure, Clojure-modeをインストールしてきました。
最後にこれらの使い方をまとめます。

**** REPLサーバ起動
依存するクラスライブラリが設定された状態で起動します。
#+begin_src sh
$ cd myproject
$ lein swank
#+end_src

**** 接続
SWNAKサーバーを起動した状態で、
#+begin_src sh
M-x slime-connect
localhost:4005
#+end_src
とします。

**** 操作方法
| C-c C-c              | カーソル位置のコードのコンパイル                                     |
| C-c C-d C-d          | ドキュメント表示                                                     |
| C-c C-z              | REPLバッファの表示                                                   |
| C-c C-k              | ファイル全体のコンパイル                                             |
| M-.                  | 定義にジャンプ                                                       |
| M-,                  | 元の定義に戻る                                                       |
| M-r                  | 正規表現で履歴検索                                                   |
| C-c C-l              | 編集したバッファの再読込                                             |
| ,quit                | 現在のswankを終了                                                    |
| M-x slime-connectins | 表示されたプロセスを選んでC-kでclojureプロセスが綺麗に消えてくれる。 |
|                      | 足りない括弧を補完して閉じる                                         |
| C-c M-o              | REPLバッファのクリア                                                 |
 

**** 参考URL
SLIMEの操作方法については、下記が非常に参考になりました。
- http://modern-cl.blogspot.com/2011/07/5-slime.html
このサイトでも解説されていますが、ACモードやPopwinも入れたほうが格段に操作方法がよくなります。

*** windowsで日本語を扱う場合
Windowsからlein swankで起動したswankサーバと連携する場合
SLIME-REPL上で日本語を評価すると、サーバーが停止してしまいます。
これを回避するには、lein.batの先頭で下記を追記しておきます。
#+begin_src sh
set JAVA_OPTS=-Dswank.encoding=utf-8-unix
#+end_src

**** 参考URL
http://rd.clojure-users.org/entry/view/52001



*** 参考書籍
#+begin_html
<ul class="thumbnails">
<li class="span2">
<a href="http://www.amazon.co.jp/gp/product/4274067890/ref=as_li_tf_il?ie=UTF8&amp;tag=ocha04-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=4274067890"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=4274067890&amp;MarketPlace=JP&amp;ID=AsinImage&amp;WS=1&amp;tag=ocha04-22&amp;ServiceVersion=20070822"></a><img width="1" height="1" border="0" style="border:none !important; margin:0px !important;" alt="" src="http://www.assoc-amazon.jp/e/ir?t=ocha04-22&amp;l=as2&amp;o=9&amp;a=4274067890">
</li>
</ul>
#+end_html

*** 
[fn:1]こんなこというとVimmerから非難されてしまいますがｗ。
[fn:2]SLIMEは、最近ではvimやeclipseからも利用できるようです。普及すればEmacsにこだわる必要はないかもですね。ライトユーザにはEclipseはよさそうです。
[fn:3]ちなみに普段emacsを使ってない人は、[[http://clojure.bighugh.com][ClojureBox]]をインストールするのが一番手っ取り早いです。
これは、Emacs+SLIME+CLojure、開発環境一式をすべてまるごとインストールしてくれる夢の様なプロダクトです。
Emacsはそれ自体の設定が大変煩雑なので、面倒が嫌いな人はこれをインストールすればOKかと思います。

** DONE LVMではまった                                                :hamari:
   CLOSED: [2010-07-26 月 19:25]

*** はじめに
日経Linux2010年６月号の特集を真似てCENTOSをLVMのミラーで構築したのはいいが
ある日ディスクサイズをみたらもうディスクフルになってる！
#+begin_src sh
[miki@localhost ~]$ df -h
Filesystem          サイズ  使用  残り 使用% マウント位置
/dev/md0              3.9G  2.3G  1.5G  61% /
/dev/mapper/vg00-home
                      3.9G  3.7G     0 100% /home
/dev/mapper/vg00-var  3.9G  3.7G  836K 100% /var
/dev/mapper/vg00-mysql
                      3.9G  137M  3.6G   4% /var/lib/mysql
tmpfs                1006M     0 1006M   0% /dev/shm
#+end_src
ディスクは１６０GB確保したはずなのになぜ？
dfの結果をよく見ると、合計で１６Gしかない。。。なぜだ？
ちなみにRAID1のディスクミラーをつかって160GBのディスク２台で運用している。

*** LVM
LVMよくわからないのでググる。
下記を見る限り、LVMは作成されていて、容量が足りないわけだから
既存のLVを増やさばいいということがわかった。
#+begin_src sh
[miki@localhost ~]$ df -h
Filesystem          サイズ  使用  残り 使用% マウント位置
/dev/md0              3.9G  2.3G  1.5G  61% /
/dev/mapper/vg00-home
                      3.9G  3.7G     0 100% /home
/dev/mapper/vg00-var  3.9G  3.7G  836K 100% /var
/dev/mapper/vg00-mysql
                      3.9G  137M  3.6G   4% /var/lib/mysql
tmpfs                1006M     0 1006M   0% /dev/shm
#+end_src

pgdisplayが見つからない。
#+begin_src sh
[miki@localhost ~]$ which pvdisplay
/usr/bin/which: no pvdisplay in (/usr/kerberos/bin:/usr/local/jdk1.6.0_24//bin:/usr/local/bin:/bin:/usr/bin:/home/miki/bin)
#+end_src

もしかして個別にインストールが必要なのかとか、rootじゃないと使えないコマンドなのかとかで
わざわざVGAの小型モニタかってrootで直接作業したけど見つからず＾＾。

その後、下記コマンドで見つかった。
#+begin_src sh
[miki@localhost ~]$ whereis pvdisplay
pvdisplay: /usr/sbin/pvdisplay /usr/share/man/man8/pvdisplay.8.gz
#+end_src
アホ過ぎる。。。

#+begin_src sh
[miki@localhost ~]$ sudo /usr/sbin/pvdisplay
  --- Physical volume ---
  PV Name               /dev/md1
  VG Name               vg00
  PV Size               290.10 GB / not usable 5.00 MB
  Allocatable           yes
  PE Size (KByte)       32768
  Total PE              9283
  Free PE               8835
  Allocated PE          448
  PV UUID               p6XFrn-nSDe-mcgf-VcVm-o5ME-VWzW-1RoLh3
#+end_src
物理ボリュームが290GBあるということか。


PV(PhisicalVolume): 物理ディスク
VG(VlumeGroup)    : 物理ディスクを束ねた物(PVをまとめて大きな論理ハードディスクとみなす）

LV(LogicalVolume) : 論理ディスク


論理ボリュームの/homeのディスクサイズを増やす
#+begin_src sh
$ sudo /usr/sbin/lvextend -L +80G /dev/vg00/home
#+end_src
増やしたらFilesysteを拡張する。本来はunmountする必要があるが、ext3はオンラインで拡張できるらいしい。
#+begin_src sh
$ sudo /sbin/resize2fs /dev/vg00/home
#+end_src

続いてvar下を増やす。
#+begin_src sh
sudo /usr/sbin/lvextend -L +30G /dev/vg00/var
sudo /sbin/resize2fs /dev/vg00/var
#+end_src

さらにmysql下も増やす。
#+begin_src sh
sudo /usr/sbin/lvextend -L +100G /dev/vg00/mysql
sudo /sbin/resize2fs /dev/vg00/var
#+end_src


これでとりあえずひと通り増やせた。
/var配下は共有ディレクトリをふくんでるので今後、さらに増やす必要があるかも。
逆にmysqlはwikipediaのデータを置かない限り100GBもいらないかもな。

** DONE DropboxでGit                                                :dropbox:
   CLOSED: [2011-04-03 日 20:09]

リポジトリ用ディレクトリをDropbox上に作成する。
#+begin_src sh
$ cd ~/Dropbox
$ mkdir git-repos
$ cd git-repos
#+end_src

プロジェクトごとにリポジトリを作成する。
#+begin_src sh
$ mkdir mikio-lab.git
$ cd mikio-lab.git
$ git --bare init --shared
#+end_src
bare: 作業ファイルをつくらないリポジトリを指定する
shared: リポジトリを共有ディレクトリにする。

リポジトリのclone例
cygwinだと、/cygdriveからのフルパスでないとうまくcloneできない。
#+begin_src sh
$ git clone /cygdrive/c/Users/mikio/Dropbox/git-repos/mikio-lab.git/
#+end_src

色々編集して、addしてcommitしたらpushする。
次回以降は、git pushのみで良いらしい
#+begin_src sh
$ git remote add origin ~/$DROPBOX/repository/test.git # これはなぜか失敗する
$ git push origin master
#+end_src

試しに別ディレクトリでcloneしてみる。
#+begin_src sh
$ git clone /cygdrive/c/Users/mikio/Dropbox/git-repos/mikio-lab.git/ mikio-lab
#+end_src

** DONE 一瞬だけclojureやめようかと思った理由                       :clojure:
   CLOSED: [2011-10-04 水 19:28]

結局CLojureやってます。

- OracleJAVAの先行きが怪しい。最近ではMACに入ってないというし。
 - →10/19 そうでもないかも。TwitterがJCPへ加入した。OpenJDKもある。

- SBCLの起動がやたら早い。インストールが簡単
 - →起動が遅い問題はSLIMEで使うから気にしてはいけない。

- 起動がやたら重いし、処理系のインストールもそれほど大変でない今、JVMによるポータビリティの優位性って薄れてないか？
 - →未解決

- lisperといえばCommonLispってイメージだし、clojure使いってなんか亜種なイメージ。
 - → 海外では結構な人気だし、Clojureをある程度使いこなせるようになってからCommonLispやれば良い。

- 日本語の情報が少ない。
 - →未解決

** DONE clojureとCommonLispの比較                              :clojure:lisp:
   CLOSED: [2011-09-09 月 18:57]

Clojureの起動が遅いことにイライラして、やっぱClojure勉強するよりCommonnLisp勉強すべきじゃね？
ってことで調べた比較表。

| 比較内容         | Clojure                 | CommonLisp                            |
| 起動             | 遅い                    | 早い                                  |
| 実行ファイル     | 小さい                  | 大きい                                |
| 配布のしやすさ   | 面倒                    | 面倒（多分）                          |
| ライブラリ       | 充実&簡単に利用できる   | QuickLispが定番になりつつある         |
| スタイル         | 関数的                  | 手続き的                              |
| プロジェクト管理 | leinを使えば簡単        | CL-PROJECT(QuickLisp, ASDF)で簡単かも |
| 書籍充実度       | あんまりない            | 充実                                  |
| ホスティング環境 | GAE, Herokuなど結構ある | 自宅サーバ,VPS,GAE(ABCL)              |
| ウェブサーバー   | jetty                   | CLACK?                                |
| 全文検索         | lucine                  | ？？？                                |
| gameライブラリ   | jogl?                   | sdl                                   |

Clojureは、関数型だからやりたいことやるのにもいろいろ引っ掛かりそうだが
CommonLispでは代入オッケーの言語だからやりやすそう。

** DONE SchemeとCommonLispとClojure                                    :lisp:
   CLOSED: [2011-09-04 日 19:28]

引き続き調査中。
   
 - SLIMEはもともとCommonLisp用のもの。
 - gosh(scheme)はもともとSLIMEに対応していなかった。
 - 2009年に最初のバージョンができたようである。意外。

 - schemeは関数型。名前空間は関数と変数で同じ空間をもつ。
 - また、変数は動的スコープであり、ローカル変数がグローバル変数を上書きする？
 - clojureも同様。

 - common Lispは手続的かも。名前空間は関数と変数で区別される。
 - また、変数は動的スコープであり、ローカル変数がグローバル変数を上書きしない。

以上から、
 - メインはclojure(雑用)
 - 再帰の勉強にscheme(SICP, Scheme手習いなど)
 - サブとしてCommonLispを使っていこう(趣味)
でも一番実用に役立つのはEmacsLispだよな。きっと。

** DONE CommonLisp(SBCL)ってどう？                                     :lisp:
   CLOSED: [2011-08-30 水 19:28]

ComonLispのことが気になりだしたので、ちょっとだけ調べてみた。

- 実行ファイルがめちゃ大きいらしい。３０MB超え。ひえぇええー
- CommonLispを使用したウェブサービスのリリース方法がない。
 - clojureだったらHelokuとかつかえる。
- 日本語の情報が豊富
- GUIが弱い。Swingのようにオブジェクト指向で作られたライブラリならよいが
　TKとか使ってるのは時代遅れでは？

** DONE 見出しテスト
   CLOSED: [2009-02-13 水 00:47]

*** 見出し1
あああ
**** 見出し2
あああ
***** 見出し3
あああ
****** 見出し4
あああ
******* 見出し5
あああ
******** 見出し6
あああ

* blog
** Cygwin(Windows7)にag(the_silver_searcher)をインストールする
** Windows7でemacsのアイコンが2重に表示されるのを防ぐ
Windows7には、タスクバーにアイコンを登録して、Win+数字キーで起動できる
便利な機能がありますが、これが、Windows版emacsだとうまくいきません。

runemacs.exeを起動してタスクバーに登録しても、起動時に、Dos窓が開いて
アイコンが2つ表示されてしまいます。
これでは不便なのでなんとかします。

この問題については、下記で解説されてるので一読をおすすめします。
http://dnerkx.blogspot.jp/2009/12/emacs-ntemacs-231-windows-7-part2.html

ただしこのサイトで公開されているツールはもうないようなので
下記から代替ツールをダウンロードして適当なところに配置します。
https://code.google.com/p/win7appid/

runemacs.exeのショートカットを作成して、先程ダウンロードしたWin7AppId1.1.exeと
同じ場所に配置します。

さきほどダウンロードしたWin7AppId1.exeを、
登録したタスクバーアイコンを指定してコマンドプロンプトから実行します。
#+BEGIN_SRC sh
Dos> Win7AppId1.1.exe runemacs.lnk GNU.Emacs
#+END_SRC
runemacs.lnkが更新されるので、右クリックして「タスクバーに表示する」を
選択すれば準備オッケーです。

これで、タスクバーのアイコンをランチャーとして登録し、
かつ余計なDos窓が開くこともなくなります。

** apt-cygがうまくいかなくなった。その2
- 2013/08にリポジトリパスの変更があった
- それに伴い、apt-cygが動かなくなった。
- さらに2013/10時点で、リポジトリ内のアーカイブ内のフォーマットの変更もあった模様
- tar.bz2から、tar.xzなどに変更になった模様。詳細は不明。
- インストールできるパッケージとできないパッケージが発生。
- 上記変更点をサポートするapt-cygは以下(本家はメンテされていない。。。)
 - https://github.com/zship/apt-cyg
*** 参考
- http://wiki.livedoor.jp/kou1okada/d/apt-cyg

** apt-cygがうまくいかなくなった。
- 2013/08にcygwinのリポジトリのパスに変更があった。
いろいろ対応方法が出まわっているが、自分は下記の方法でうまくいった。
- http://qiita.com/DQNEO/items/f49d5a534eee6c3352a8
本家の(svn版) =apt-cyg= を改良する。
#+BEGIN_SRC sh
--- apt-cyg.orig        2013-08-06 03:24:45.062574000 +0900
+++ apt-cyg     2013-08-06 03:22:53.877214600 +0900
@@ -95,14 +95,14 @@
   then
     touch setup.ini
     mv setup.ini setup.ini-save
-    wget -N $mirror/setup.bz2
+    wget -N $mirror/x86_64/setup.bz2
     if test -e setup.bz2 && test $? -eq 0
     then
       bunzip2 setup.bz2
       mv setup setup.ini
       echo Updated setup.ini
     else
-      wget -N $mirror/setup.ini
+      wget -N $mirror/x86_64/setup.ini
       if test -e setup.ini && test $? -eq 0
       then
         echo Updated setup.ini
#+END_SRC
その後、下記のとおりupdate
#+BEGIN_SRC sh
$ apt-cyg -m http://ftp.jaist.ac.jp/pub/cygwin update
#+END_SRC
apt-cyg内に直接 =x86= を足しているので、リポジトリの指定は、cygwinまでのパスで良い。

** 文字列からdateフォーマットへ変換する方法
#+BEGIN_SRC sh
bsh % import java.text.SimpleDateFormat
bsh % SimpleDateFormat df = new SimpleDateFormat("yyyy年MM月dd日 hh時mm分");
bsh % System.out.println("now:" + df.parse("2013年11月21日 17時58分"));
#+END_SRC
** chromeのクッキー表示について
F12で表示する、chromeのクッキー表示だが、
存続クッキーの表示は、GMTで表示される。GMTは、イギリスロンドンの世界標準時刻のことであり、
日本時間より9時間表示が遅い。
従って、Chromeのクッキー表示に、15:00 GMTと表示されていたら、それは日本時間の24:00のことである。
(15 + 9 = 24)

** xpにapacheを入れる
- IIS5.1がサービスとして起動しており、こいつが、80番ポートを塞いでいたので、使用できず。
- コンパネのWindowsコンポーネントからIISを削除した。
- apache2.2をインストール(最新版の2.4はWindows版が見当たらなかった)
- 設定ファイルはデフォルトで下記にインストールされた
c:/Program Files/Apache Software Foundation/Apache2.2/conf/

** evilがうまく動かない
*** 原因(一応解決)
下記にEUC-JP環境では、矢印キーが効かないとの記述があった。
- http://hiromasaya.web.fc2.com/Cygwin/emacs_wnn.html
もしかしたら、F*キー、ESCキーの動作がおかしいのもemacsのバグかもしれない。

下記を設定して、UTF-8環境にしたらまともに動いた。
export LANG=ja_JP.UTF-8

EUC-JP環境では、ESC, F1などがまともに動作しないので、evilをあきらめるか、vimを使用するしかない。
   
** evilのすすめ
- evilとは、vimの操作性を備えたelisp実行環境である。
- vimの効率的なテキスト編集能力と、lisp子孫の機能拡張言語を備えた第3のエディタである。

- vimでは基本編集機能以外のコマンドやキーバインドは覚えない。
 - hjkl, y,p, cw 
 - EXコマンドは覚えない。M-xで代用
 - ファイラはDiredを使う
- 拡張機能は原則emacsのものを使用する。
- elispはまがりなりにもlispの子孫。
- プロセス通信が非同期
- 画像が表示できる。
- vimは呪文をとなえるように編集ができる。それが気持ちよさにつながる。
- モード切り替えは慣れればなんの苦痛もない。
- 小指への負担がない。
- 日本語編集にも強いvimとして使用できる。
  - skkが簡単に使える。
  - ちょっと工夫すれば、モード間のskkの状態遷移がスムーズにできる。よって日本語入力がvimなのに快適!

** cygwinでapache起動
/usr/sbin/httpd2    

ドキュメントルート
/srv/www/htdocs

設定ファイル
/etc/apache2/httpd.conf 

** vim でgtagsを使えるようにする。
- globalをの最新をインストールする。
- 下記のようにプラグインを設定する。
#+BEGIN_SRC sh
mkdir -p ~/.vim/plugin/
cp src/global-6.2.9/gtags.vim ~/.vim/plugin/
vi .vimrc
#+END_SRC
.vimrcに下記を追加。
#+BEGIN_SRC vim
map <C-g> :Gtags
map <C-h> :Gtags -f %<CR>
map <C-j> :GtagsCursor<CR>
map <C-n> :cn<CR>
map <C-p> :cp<CR>
#+END_SRC
C-g 検索
C-h 関数一覧
C-j 定義元へジャンプ
C-b 戻る
C-i 進む

** yumのコマンドが実行できない                                   :hamari:yum:

下記の記事をトレースしました。
- http://www.drk7.jp/MT/archives/001856.html

 =yum list= を実行したら下記のエラーが発生。
#+BEGIN_SRC sh
$ yum list
Loaded plugins: fastestmirror
Error: database disk image is malformed
#+END_SRC
 
これは、rpmのデータベースが壊れたのが原因らしい。
そこでロックファイルを削除。
#+BEGIN_SRC sh
sudo rm -f /var/lib/rpm/__*
sudo rpm --rebuilddb -v -v
#+END_SRC

これで直った!

** Edit with EmacsでC-xC-sすると文字化けする                   :emacs:hamari:

GoogleChromeの便利プラグインedit with emacsを最近使い始めたのですが、
C-xC-sでブラウザのテキストエリアに反映させるといくつか問題点が発生しました。
- emacsバッファ内の全角文字が、モジコードになってしまいます。
- ubutuだとC-xC-sで改行コードがはずれて一行になってしまう。

** GnusをやめてMewに出戻ろうと思ったけど結局Thunderbirdになった

しばらくThunderbirdを使用してからMewを少し利用して、1年以上Gnusでメール運用してましたが、結局Thunderbirdにもどりました。
下記が理由です。
- gnusは、メールのフェッチが同期方式なので、フェッチ中にEmacsが動作しなくなる
- 同期式なのでGrowlなどの通知が使えない
- もともとメールではなくニュースリーダなので、メール操作がしずらい
  Mew以外にもmu4eが気になるのですが、Windwowsには対応していないようなので見送りです。
  
と思ったが、Mewのインストールもうまくいかないので、
Thunderbirdに戻り、メール作成をEmacsと連携することにした。

"C:\Documents and Settings\m-oono\apps\emacs-24.3\bin\emacsclientw.exe" -a "C:\Documents and Settings\m-oono\apps\emacs-24.3\bin\runemacs.exe"
- emacsclientw.exeを設定したが、「対象のコンピュータによって拒否されました」とダイアログが表示されて利用できない。

emacs
もともとgmailはキーボード指向で、ショートカットも充実しているので
慣れれば快適に操作できます。

** cpmpojre with ritz-nrepl
#+BEGIN_SRC sh
$ cd work
$ lein new compojure hellowebapp
#+END_SRC
hiccupとreplで起動するためのツールを追加
#+BEGIN_SRC clojure
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [compojure "1.1.5"]
+                 [hiccup "1.0.0"]]
  {:dev {:dependencies [[ring-mock "0.1.3"]
+                        [ring-serve "0.1.1"]
+                        [ring/ring-devel "1.1.0"]
                         ]}}
#+END_SRC

nreplを =M-x nrepl-jack-in= で起動する。

続いてサーバーを起動する。
#+BEGIN_SRC clojure
user> (use 'hellowebapp.handler)
user> (require 'ring.util.serve)
user> (ring.util.serve/serve-headless app)
Started web server on port 3000
#+END_SRC

これでブラウザでアクセスして確認。
http://localhost:3000

unitテストはこんな感じ。
#+BEGIN_SRC clojure
user> (use 'clojure.test)
user> (require 'hellowebapp.test.handler)
user> (run-tests 'hellowebapp.test.handler)
#+END_SRC

** WindowsXP上でnreplとritzを動かす。
- [ ] 終了方法(M-x nrepl-quit)では、デバッガのjavaプロセスが終了しない。
- [ ] (+) を評価したらreplがおかしくなった。
- [ ] clojure-completeのoffの方法がよくわからん。こっちを有効にしてauto-completeをoffにしたほうが良いのかな？
- [ ] replがやたら重い。auto-completeが原因かも
- [ ] project.cljなどを書き換えた際の、replの再起動方法。
M-x nrepl-ritz-reset-repl

** simple-screen と tabbar のすすめ
- emacs のすごい便利なのにあまり使われていない「tabar」拡張
- vimのすごい便利なのにあまり使われていない「タブページ」機能
http://qiita.com/wadako111/items/755e753677dd72d8036d

** termcapとterminfo
- 端末ごとの差異を吸収するためのデータベース
- 端末は、端末内のカーソル移動などさまざまな動作を、文字列を受け取ることで実現する。
- この文字列のことを制御シーケンスという。
- 端末の種類は、TERM環境変数に設定する。
- termcap/terminfoは、このTERM変数の値をキーにして、制御コードが格納されている。
- 端末で動作するプログラムは、TERMとtermcap/terminfoを調べて、必要な制御シーケンスをつかってプログラムを制御する。
- termcapはテキストベース記述されいるため遅い。古いプログラム用のためだけに保持されている。非推奨。
- terminfoはバイナリ形式のため速い。ソースはテキストで記述されているが、コンパイルする必要がある。現在はこちらがメイン。

termcapは下記にある。
#+BEGIN_SRC sh
/etc/termcap  
#+END_SRC

terminfoは下記にある。ただしバイナリなので直接中身はみれない。
#+BEGIN_SRC sh
/usr/share/terminfo
もしくは
/usr/share/lib/terminfo
#+END_SRC

terminfoのデータをテキスト表示するには以下(xtermの例)。
#+BEGIN_SRC sh
$ infocmp xterm
#+END_SRC

terminfoを反映させる方法(ユーザーのみ適用)
#+BEGIN_SRC sh
$ infocmp xterm > xterm.ti
# xterm.tiを編集
$ tic -o ~/.terminfo xterm.ti
#+END_SRC

*** ncurses
ncursesは、TUIを提供するためのライブラリ。TUIとは、BIOSみたいな画面とか、tmuxとかscreenとかみたいに
CUI環境でウィンドウインターフェイスを提供するもの。ncursesは、内部で、termcap/terminfoを呼びだすらしい。
emacsやvimなど端末上で動作するフルスクリーンアプリで使用されるもの。

** minttyで端末を256色表示する方法
- minttyを256対応に設定する。
右クリック - [Options] - [Terminal] - [Type]で「xterm-256color」を選択する。
- .bashrcのTERM環境変数に「xterm-256color」を設定する
#+BEGIN_SRC sh
export TERM=xterm-256color
#+END_SRC
- tmuxを使用する場合
  .tmux.confに下記を設定する。
#+BEGIN_SRC sh
set-option -g default-terminal xterm-256color
#+END_SRC
tmuxで重要なのは、起動時に =-2= オプションを指定すること。
#+BEGIN_SRC sh
$ tmux -2
#+END_SRC
これをしないと、256色にならずに8色になる。

参考
- https://sites.google.com/site/codehen/environment/tmux
  

** emacsで変種したファイルをvimで編集して保存すると、diffで改行の差分がでてしまう

例えば、emacsで編集したファイルを何も変更せずに保存したとき、
vimの仕様で最後に改行コードが付加される
(これは正しいテキストファイルの定義を満たすための仕様らしい)。

この時、見た目に変更がない場合でもdiffを取ると下記のように最後に
改行があるため変更差分が表示されてしまう。
#+BEGIN_SRC sh
-hoge
\ No newline at end of file
+hoge
#+END_SRC
※hogeと1行だけ書かれたテキストファイル。

これを回避するには、vimで下記のようにコマンドを実行すれば良い。
#+BEGIN_SRC sh
:set bin noeol
:w
#+END_SRC

補足
ひとつのファイルをemacsとvimの両方で編集する環境の場合、emacsの設定で
ファイルの末尾に改行を付与する設定にしておいたほうが混乱が少ない。
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC


参考
- https://github.com/vim-jp/issues/issues/152

** 
Windows上でのWTMはしばらく「Python Windows Tiler」を使用していました。
ずっとこれで満足していたのですが、タスクバーがうまく表示できないので
時間の表示ができないのと、一度起動すると、タスクマネージャーなどで
強制的にプロセスを削除しないとうまく終了できないなどの不満がありました。
この辺の不具合は普段使っている分にはそれほど不便ではないためだましだまし
使用していたのですが、ふと時間が空いたので以前試して挫折した「bug.n」を
使用してみることにしました。

** CLIでDropbox

** el式の文字列にシングルクオートを使う
   下記のような判定分
#+BEGIN_SRC sh
<c:if test="${foo == 'hoge's'}">
   ほげー
</c:if>
#+END_SRC
上記だと当然エラーになる。なので、下記のようにエスケープしてみる。
#+BEGIN_SRC sh
<c:if test="${foo == 'hoge\'s'}">
   ほげー
</c:if>
#+END_SRC
でもなぜか駄目だった。下記のようにしたらうまくいった。
#+BEGIN_SRC sh
<c:if test="${foo == 'hoge&#39;s'}">
   ほげー
</c:if>
#+END_SRC
** Linux Mint 15 がVirtualBoxで起動しない。

Linux Mint 15 を VirtualBox 4.2.14にインストールしようとしたところ
(isoメディアをマウントして起動)途中でフリーズしてしまっていた。

下記の設定をすることにより、フリーズがなくなり起動できた。
- システム → マザーボード → チップセット → 「ICH9」を選択
- システム → プロセッサー → 拡張機能 → 「PAE/NXを有効化」をチェック

** IE6でのデバッグ                                            :javascript:ie:
*** cookieの書き換え
適当な野良アプリをダウンロードして使う方法があるが、どれもいまいち使いづらい。
なので、アドレスバーに直接javascriptを入力してクッキーを操作する。

#+BEGIN_SRC javascript
javascript:(function(){
  var p,c,i;
  var p=prompt("クッキーの設定",document.cookie);
  if(p==null)return;
  var c=p.split(';');
  for (i=0;i < c.length;i++) {
    document.cookie=c[i]+"; max-age=" + (3600 * 24 * 90) +";";
  }}
)();
#+END_SRC
このブックマークレットによりプロンプトが表示されるので、値を書き換えてOKボタンを押下すれば良い。

*** javascriptの簡単な復習
var c=document.cookie;
この時、取得されるクッキーは、
#+BEGIN_SRC javascript
a=1; b=2; c=3;
#+END_SRC
のように複数のクッキーが「;」デリミタによってひとつの文字列として取得される。

対して、クッキーを設定するときは、
#+BEGIN_SRC javascript
document.cookie="a=1";
document.cookie="b=1";
document.cookie="c=1";
#+END_SRC
のようにひとつずつdocument.cookieに設定しいかなくてはならない。
この時、有効期間や、パスを設定たければ、下記のような形で指定する。
#+BEGIN_SRC javascript
var e = new Date();
e.setTime(e.getTime()+(90*1000*60*60*24));
document.cookie= "a=1; expires="+ e.toString() + ";";})();
#+END_SRC


表示のみの場合は、以下でOK(alertだとコピペできないのでpromptで表示している)。
#+BEGIN_SRC javascript
javascript:prompt("",document.cookie);
#+END_SRC

参考
- http://d.hatena.ne.jp/stts/20090313

しかし、一番確実なのは、IEのエクスポート/インポート機能を使う方法。
 - http://d.hatena.ne.jp/ku__ra__ge/20081028/p2

*** javascriptのデバッグ方法
- Debugbarのものはいまいちなのでインストールしないこと。
- Microsft純正のものがある。
 - 二つ実行ファイルがあるが、下記ファイルをダウンロードする。
 - scd10jp.exe : Windows XP、Windows 2000、または Windows NT 4.0
- 事前準備
 - [インターネットオプション] -> [詳細設定] -> [ブラウズ] -> [スクリプトのデバッグを使用しない]のチェックを外す。

** tmux操作中に操作できなくなった

コンソール端末(tmux)上で作業してると、度々操作できなくなることがある。
フリーズしてるわけではなく(tmux自身のプリフィックスは受けつけてくれる)、
端末の状態が一時停止してるような状態だ。

いつも抜けだすのが面倒でその度、端末を再起動とかして
その場しのぎしてたが、 いいかげんきちんと調べてみた。

- http://www.itmedia.co.jp/help/tips/linux/l0612.html

上記サイトによると、コンソールの標準キーバインドとして下記が割りあてられているとのこと。
- C-s : 端末の停止
- C-q : 端末の再開
C-s は、Windowsでは保存だし、emacsではインクリメンタルサーチだし、
C-q は、tmuxのプリフィックスキーとして使用してるし、
emacsではコントールコード入力だし(以外と使う)、いずれも使用頻度高い。
なんでこんな重要なキーによりによって停止とか割り当てるんだ。どんなトラップだよ!って感じです。

これでtmux上で操作不能になったら、落ちついて =C-q C-q= で再開できるようになりました。

ちなみに =~/.bashrc= に下記を追加することで、 =C-s= を無効にしつつ、
 =C-s= でコマンド履歴のインクリメンタル検索が使用できるので一石二鳥です。
#+BEGIN_SRC sh
stty stop undef
#+END_SRC

** helmのファイル一覧でパスを表示する

helmをアップデートしたら、ファイルの一覧がファイル名のみになってしまい、
パス部分が表示されなくなってしまった。
デフォルトの挙動が変更されたようである。

自分の場合、helm-git.elを使用しているが、
同じリポジトリに同名ファイルが複数あるため、
ファイル名だけになると、どのディレクトリのファイルかがわからなくなってしまう。
これでは困るので調査したところ、ファイル表示部分は、helm本体の =helm-files.el=
の機能を流用しており、下記のカスタム変数を定義すればよさそうである。
#+BEGIN_SRC emacs-lisp
(defcustom helm-ff-transformer-show-only-basename t
  "Show only basename of candidates in `helm-find-files'.
This can be toggled at anytime from `helm-find-files' with \
\\<helm-find-files-map>\\[helm-ff-run-toggle-basename]."
  :type 'boolean
  :group 'helm-files)
#+END_SRC

.emacsに下記の定義をすることで無事解決できた。
#+BEGIN_SRC emacs-lisp
(setq helm-ff-transformer-show-only-basename nil)
#+END_SRC
** RSSの種類まとめ

#+BEGIN_EXAMPLE
RSS 0.9 (RDF site summary)  ------------------ RSS 1.0 (RDF系列)
  |
  +- RSS 0.91 (ritch site summary) ------------- RSS 2.0 (1.0とは別もの)
ATOM
#+END_EXAMPLE
  
RSSにはRSS1.0系列とRSS2.0系列があり、1.0はRDFというものがベースとなっており
国内では、1.0が普及しているとのこと。
またATOMはRSSとはまた別系統であり、gmailなどで普及しているらしい。
一般てきにRSSリーダはこれらのフォーマットを全てサポートしており
ユーザが気にすることはない。

ソースをみたときのぱっと見の見分けかた
| RSS1.0 | rdfというタグが含まれている |
| RSS2.0 | rssで始まる。               |
| ATOM   | feedというタグで始まる      |

*** 参考
- http://ja.wikipedia.org/wiki/RSS
- http://d.hatena.ne.jp/akagami_ext/20081209/p3

** vimperetorの使用感

- 勝手にIMEon
- いつのまにかFirefox標準の検索窓が表示されている
- 履歴が使用順にソートされていない
- コマンドラインで、C-a すると以降、emacsキーバインドが使用できなくなる
- タブでソース表示
- 設定ファイルの即時ロード

** chromeが立ちあがらなくなった。
 
- Chromeは、Windowsユーザ単位でインストールする必要がある。
  c:/Users/mikio/Local Settings/Application Data/Google\Chrome\chrome.exe
- 代替インストールというGoogle謹製のインストーラを使用すると、PC1台で1インストールできる。
- その場合、下記にインストールされる
  c:/Program Files/Google:
*** テキストサービスをoffにするといいらしい
chrome.exeのプロパティでオフにすると起動したとい事例あり。
*** 完全アンインストールする
- http://support.google.com/chrome/bin/answer.py?hl=ja&answer=111899
- remove.regをダウンロード
- =Win+r regedit= でレジストリエディタを起動する。
- メニュー→エクスポートでバックアップ。
- remove.regをダブルクリック
- 下記ディレクトリを手動で削除
  c:/Users/mikio/Local Settings/Application Data/Google\Chrome\

** cygwin上でgit statusすると変更してないのにmodified表示されてしまう :cygwin:git:hamari:

cygwin上のgitでは、パーミッションで変更差分が表示されてしまうので、
下記のコマンドで、パーミッションの変更を無視する設定にしておく。
 =--global= はなぜか効かなかったので、その都度ローカルに設定する必要あるようだ。

#+BEGIN_SRC sh
git config core.filemode false
#+END_SRC

- 参考
 - http://d.hatena.ne.jp/naga_sawa/20101220/1292806729

** cpmpojre with ritz-nrepl
#+BEGIN_SRC sh
$ cd work
$ lein new compojure hellowebapp
#+END_SRC
hiccupとreplで起動するためのツールを追加
#+BEGIN_SRC clojure
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [compojure "1.1.5"]
+                 [hiccup "1.0.0"]]
  {:dev {:dependencies [[ring-mock "0.1.3"]
+                        [ring-serve "0.1.1"]
+                        [ring/ring-devel "1.1.0"]
                         ]}}
#+END_SRC

nreplを =M-x nrepl-jack-in= で起動する。

続いてサーバーを起動する。
#+BEGIN_SRC clojure
user> (use 'hellowebapp.handler)
user> (require 'ring.util.serve)
user> (ring.util.serve/serve-headless app)
Started web server on port 3000
#+END_SRC

これでブラウザでアクセスして確認。
http://localhost:3000

unitテストはこんな感じ。
#+BEGIN_SRC clojure
user> (use 'clojure.test)
user> (require 'hellowebapp.test.handler)
user> (run-tests 'hellowebapp.test.handler)
#+END_SRC

** WindowsXP上でnreplとritzを動かす。
- [ ] 終了方法(M-x nrepl-quit)では、デバッガのjavaプロセスが終了しない。
- [ ] (+) を評価したらreplがおかしくなった。
- [ ] clojure-completeのoffの方法がよくわからん。こっちを有効にしてauto-completeをoffにしたほうが良いのかな？
- [ ] project.cljなどを書き換えた際の、replの再起動方法。


WindowsXP上でritz(デバッガ)はすんなり動きませんでした。
苦労しましたが、動かすための方法を書きます。
環境変数を設定
#+BEGIN_SRC sh
TMP=c:\tmp
TEMP=c:\tmp
#+END_SRC
*** Mavenの機能でソースジャンプを可能にする
#+BEGIN_SRC sh
lein pom # pom.xmlを作成
mvn dependency:sources # ソースを取得
#+END_SRC

*** はまり経過
以下、この結論に達するまでの経過です。
#+BEGIN_SRC sh
[mikio@30-85964 ~/dev/cljtest]$ lein ritz-nrepl --log-level trace
debug/launch-vm {:classpath "C:\\\\Users\\\\mikio\\\\dev\\\\cljtest\\\\test;C:\\\\Users\\\\mikio\\\\dev\\\\cljtest\\\\src;C:\\\\Users\\\\mikio\\\\dev\\\\cljtest\\\\dev-resources;C:\\\\Users\\\\
mikio\\\\dev\\\\cljtest\\\\resources;C:\\\\Users\\\\mikio\\\\dev\\\\cljtest\\\\target\\\\classes;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\org\\\\tcrawley\\\\dynapath\\\\0.2.1\\\\dynapath-0.
2.1.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\useful\\\\useful\\\\0.8.3-alpha8\\\\useful-0.8.3-alpha8.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\classlojure\\\\classlojure\\\\0.6.6\
\\\classlojure-0.6.6.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\ritz\\\\ritz-nrepl-middleware\\\\0.7.0\\\\ritz-nrepl-middleware-0.7.0.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\org\\
\\clojure\\\\tools.macro\\\\0.1.1\\\\tools.macro-0.1.1.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\org\\\\clojure\\\\clojure\\\\1.5.1\\\\clojure-1.5.1.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\rep
ository\\\\ritz\\\\ritz-debugger\\\\0.7.0\\\\ritz-debugger-0.7.0.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\org\\\\clojure\\\\tools.nrepl\\\\0.2.2\\\\tools.nrepl-0.2.2.jar;C:\\\\Users\\\\m-
oono\\\\.m2\\\\repository\\\\ritz\\\\ritz-nrepl\\\\0.7.0\\\\ritz-nrepl-0.7.0.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\ritz\\\\ritz-repl-utils\\\\0.7.0\\\\ritz-repl-utils-0.7.0.jar;C:\\\\U
sers\\\\mikio\\\\.m2\\\\repository\\\\org\\\\clojure\\\\clojure\\\\1.5.1\\\\clojure-1.5.1-sources.jar;C:\\\\Program Files\\\\Java\\\\jdk1.7.0_13\\\\lib\\\\tools.jar;C:\\\\Program Files\\\\Java\\\
\jdk1.7.0_13\\\\lib\\\\sa-jdi.jar", :main (clojure.core/deref (clojure.core/promise))}
launch-vm C:\\Users\\mikio\\dev\\cljtest\\test;C:\\Users\\mikio\\dev\\cljtest\\src;C:\\Users\\mikio\\dev\\cljtest\\dev-resources;C:\\Users\\mikio\\dev\\cljtest\\resources;C:\\Users\\mikio\\de
v\\cljtest\\target\\classes;C:\\Users\\mikio\\.m2\\repository\\org\\tcrawley\\dynapath\\0.2.1\\dynapath-0.2.1.jar;C:\\Users\\mikio\\.m2\\repository\\useful\\useful\\0.8.3-alpha8\\useful-0.8.3-al
pha8.jar;C:\\Users\\mikio\\.m2\\repository\\classlojure\\classlojure\\0.6.6\\classlojure-0.6.6.jar;C:\\Users\\mikio\\.m2\\repository\\ritz\\ritz-nrepl-middleware\\0.7.0\\ritz-nrepl-middleware-0.
7.0.jar;C:\\Users\\mikio\\.m2\\repository\\org\\clojure\\tools.macro\\0.1.1\\tools.macro-0.1.1.jar;C:\\Users\\mikio\\.m2\\repository\\org\\clojure\\clojure\\1.5.1\\clojure-1.5.1.jar;C:\\Users\\m
-oono\\.m2\\repository\\ritz\\ritz-debugger\\0.7.0\\ritz-debugger-0.7.0.jar;C:\\Users\\mikio\\.m2\\repository\\org\\clojure\\tools.nrepl\\0.2.2\\tools.nrepl-0.2.2.jar;C:\\Users\\mikio\\.m2\\repo
sitory\\ritz\\ritz-nrepl\\0.7.0\\ritz-nrepl-0.7.0.jar;C:\\Users\\mikio\\.m2\\repository\\ritz\\ritz-repl-utils\\0.7.0\\ritz-repl-utils-0.7.0.jar;C:\\Users\\mikio\\.m2\\repository\\org\\clojure\\
clojure\\1.5.1\\clojure-1.5.1-sources.jar;C:\\Program Files\\Java\\jdk1.7.0_13\\lib\\tools.jar;C:\\Program Files\\Java\\jdk1.7.0_13\\lib\\sa-jdi.jar
@(clojure.core/promise)

launch-vm options {:classpath "C:\\\\Users\\\\mikio\\\\dev\\\\cljtest\\\\test;C:\\\\Users\\\\mikio\\\\dev\\\\cljtest\\\\src;C:\\\\Users\\\\mikio\\\\dev\\\\cljtest\\\\dev-resources;C:\\\\Users\\
\\mikio\\\\dev\\\\cljtest\\\\resources;C:\\\\Users\\\\mikio\\\\dev\\\\cljtest\\\\target\\\\classes;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\org\\\\tcrawley\\\\dynapath\\\\0.2.1\\\\dynapath-
0.2.1.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\useful\\\\useful\\\\0.8.3-alpha8\\\\useful-0.8.3-alpha8.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\classlojure\\\\classlojure\\\\0.6.
6\\\\classlojure-0.6.6.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\ritz\\\\ritz-nrepl-middleware\\\\0.7.0\\\\ritz-nrepl-middleware-0.7.0.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\org
\\\\clojure\\\\tools.macro\\\\0.1.1\\\\tools.macro-0.1.1.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\org\\\\clojure\\\\clojure\\\\1.5.1\\\\clojure-1.5.1.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\r
epository\\\\ritz\\\\ritz-debugger\\\\0.7.0\\\\ritz-debugger-0.7.0.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\org\\\\clojure\\\\tools.nrepl\\\\0.2.2\\\\tools.nrepl-0.2.2.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\ritz\\\\ritz-nrepl\\\\0.7.0\\\\ritz-nrepl-0.7.0.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\ritz\\\\ritz-repl-utils\\\\0.7.0\\\\ritz-repl-utils-0.7.0.jar;C:\\\\Users\\\\mikio\\\\.m2\\\\repository\\\\org\\\\clojure\\\\clojure\\\\1.5.1\\\\clojure-1.5.1-sources.jar;C:\\\\Program Files\\\\Java\\\\jdk1.7.0_13\\\\lib\\\\tools.jar;C:\\\\Program Files\\\\Java\\\\jdk1.7.0_13\\\\lib\\\\sa-jdi.jar", :main (clojure.core/deref (clojure.core/promise))}
jdi/launch  -cp 'C:\\Users\\mikio\\dev\\cljtest\\test;C:\\Users\\mikio\\dev\\cljtest\\src;C:\\Users\\mikio\\dev\\cljtest\\dev-resources;C:\\Users\\mikio\\dev\\cljtest\\resources;C:\\Users\\mikio\\dev\\cljtest\\target\\classes;C:\\Users\\mikio\\.m2\\repository\\org\\tcrawley\\dynapath\\0.2.1\\dynapath-0.2.1.jar;C:\\Users\\mikio\\.m2\\repository\\useful\\useful\\0.8.3-alpha8\\useful-0.8.3-alpha8.jar;C:\\Users\\mikio\\.m2\\repository\\classlojure\\classlojure\\0.6.6\\classlojure-0.6.6.jar;C:\\Users\\mikio\\.m2\\repository\\ritz\\ritz-nrepl-middleware\\0.7.0\\ritz-nrepl-middleware-0.7.0.jar;C:\\Users\\mikio\\.m2\\repository\\org\\clojure\\tools.macro\\0.1.1\\tools.macro-0.1.1.jar;C:\\Users\\mikio\\.m2\\repository\\org\\clojure\\clojure\\1.5.1\\clojure-1.5.1.jar;C:\\Users\\mikio\\.m2\\repository\\ritz\\ritz-debugger\\0.7.0\\ritz-debugger-0.7.0.jar;C:\\Users\\mikio\\.m2\\repository\\org\\clojure\\tools.nrepl\\0.2.2\\tools.nrepl-0.2.2.jar;C:\\Users\\mikio\\.m2\\repository\\ritz\\ritz-nrepl\\0.7.0\\ritz-nrepl-0.7.0.jar;C:\\Users\\mikio\\.m2\\repository\\ritz\\ritz-repl-utils\\0.7.0\\ritz-repl-utils-0.7.0.jar;C:\\Users\\mikio\\.m2\\repository\\org\\clojure\\clojure\\1.5.1\\clojure-1.5.1-sources.jar;C:\\Program Files\\Java\\jdk1.7.0_13\\lib\\tools.jar;C:\\Program Files\\Java\\jdk1.7.0_13\\lib\\sa-jdi.jar' clojure.main -i C:\Users\mikio\Local Settings\Temp\ritz-init4332233377704652474.clj
jdi/launch options
vm-stream-daemons
request-exception-for-acquire-thread
Added exception event request
Resumed vm
Acquiring thread...
jdi-vm/handle-acquire-event: event VMStartEvent in thread main
Ignoring event VMStartEvent in thread main
jdi-vm/handle-acquire-event: event ExceptionEvent@clojure.main$main:443 in thread main
jdi-vm/handle-acquire-event: unexpected exception instance of java.io.FileNotFoundException(id=1489) [["serialVersionUID" #<LongValueImpl -897856973823710492>] ["serialVersionUID" #<LongValueImpl 7818375828146090155>] ["serialVersionUID" #<LongValueImpl -3387516993124229948>] ["serialVersionUID" #<LongValueImpl -3042686055658047285>] ["detailMessage" #<StringReferenceImpl "C:\Users\mikio\Local (指定されたファイルが見つかりません。)">] ["UNASSIGNED_STACK" #<ArrayReferenceImpl instance of java.lang.StackTraceElement[0] (id=1495)>] ["cause" #<ObjectReferenceImpl instance of java.io.FileNotFoundException(id=1489)>] ["stackTrace" #<ArrayReferenceImpl instance of java.lang.StackTraceElement[0] (id=1495)>] ["SUPPRESSED_SENTINEL" #<ObjectReferenceImpl instance of java.util.Collections$UnmodifiableRandomAccessList(id=1496)>] ["suppressedExceptions" #<ObjectReferenceImpl instance of java.util.Collections$UnmodifiableRandomAccessList(id=1496)>] ["NULL_CAUSE_MESSAGE" #<StringReferenceImpl "Cannot suppress a null exception.">] ["SELF_SUPPRESSION_MESSAGE" #<StringReferenceImpl "Self-suppression not permitted">] ["CAUSE_CAPTION" #<StringReferenceImpl "Caused by: ">] ["SUPPRESSED_CAPTION" #<StringReferenceImpl "Suppressed: ">] ["EMPTY_THROWABLE_ARRAY" #<ArrayReferenceImpl instance of java.lang.Throwable[0] (id=1501)>] ["$assertionsDisabled" #<BooleanValueImpl true>]]
jdi-vm/handle-acquire-event: event VMDeathEvent
jdi-vm/handle-acquire-event: unexpected VM shutdown
Acquired thread null
vm-out: exit
vm-err: exit
Exception in thread "main" com.sun.jdi.VMDisconnectedException
        at com.sun.tools.jdi.TargetVM.waitForReply(TargetVM.java:304)
        at com.sun.tools.jdi.VirtualMachineImpl.waitForTargetReply(VirtualMachineImpl.java:1036)
        at com.sun.tools.jdi.PacketStream.waitForReply(PacketStream.java:69)
        at com.sun.tools.jdi.JDWP$EventRequest$Clear.waitForReply(JDWP.java:6830)
        at com.sun.tools.jdi.JDWP$EventRequest$Clear.process(JDWP.java:6806)
        at com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.clear(EventRequestManagerImpl.java:212)
        at com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.setEnabled(EventRequestManagerImpl.java:164)
        at com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.disable(EventRequestManagerImpl.java:155)
        at ritz.jpda.jdi$discard_event_request.invoke(jdi.clj:506)
        at ritz.jpda.jdi_vm$acquire_thread.invoke(jdi_vm.clj:155)
        at ritz.jpda.jdi_vm$launch_vm.invoke(jdi_vm.clj:180)
        at ritz.jpda.debug$launch_vm.invoke(debug.clj:59)
        at ritz.nrepl$start_jpda_server.invoke(nrepl.clj:259)
        at user$eval5051.invoke(NO_SOURCE_FILE:1)
        at clojure.lang.Compiler.eval(Compiler.java:6511)
        at clojure.lang.Compiler.eval(Compiler.java:6500)
        at clojure.lang.Compiler.eval(Compiler.java:6501)
        at clojure.lang.Compiler.eval(Compiler.java:6477)
        at clojure.core$eval.invoke(core.clj:2797)
        at clojure.main$eval_opt.invoke(main.clj:297)
        at clojure.main$initialize.invoke(main.clj:316)
        at clojure.main$null_opt.invoke(main.clj:349)
        at clojure.main$main.doInvoke(main.clj:427)
        at clojure.lang.RestFn.invoke(RestFn.java:421)
        at clojure.lang.Var.invoke(Var.java:419)
        at clojure.lang.AFn.applyToHelper(AFn.java:163)
        at clojure.lang.Var.applyTo(Var.java:532)
        at clojure.main.main(main.java:37)
#+END_SRC
ritz-nreplをデバッグログ付きで出力してみた。
すると下記の行でファイル名の指定のところでエラーがでている
#+BEGIN_SRC sh
jdi/launch  -cp ...略...;C:\\Program Files\\Java\\jdk1.7.0_13\\lib\\tools.jar;C:\\Program Files\\Java\\jdk1.7.0_13\\lib\\sa-jdi.jar'
 clojure.main -i C:\Users\mikio\Local Settings\Temp\ritz-init4332233377704652474.clj
#+END_SRC
ファイル名にスペースを含むのが原因のようだ。
#+BEGIN_SRC sh
.jdi-vm/handle-acquire-event: unexpected exception instance of java.io.FileNotFoundException(id=1489) ..略... "C:\Users\mikio\Local (指定されたファイルが見つかりません。)">] ...略
#+END_SRC

そこで環境変数のTMP,TEMPを下記のように変更した。
#+BEGIN_SRC sh
TMP=c:\tmp
TEMP=c:\tmp
#+END_SRC
これで無事起動できた。
emacs上からは、 =M-x nrepl-ritz-jack-in= で起動できる。
ちなみにこの時実行されるjavaプロセスは3つ。
#+BEGIN_SRC sh
emacs
 + java(lein)
   + java(アプリ)
     + java(デバッガ)
#+END_SRC
しかし今度は、nreplは起動したものの、文字入力の度に補完機能が走り
下記のエラーが表示されるようになった。
#+BEGIN_SRC sh
java.io.FileNotFoundException: Could not locate complete/core__init.class or complete/core.clj on classpath: 
 at clojure.lang.RT.load (RT.java:443)
    clojure.lang.RT.load (RT.java:411)
    clojure.core$load$fn__5018.invoke (core.clj:5530)
    clojure.core$load.doInvoke (core.clj:5529)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    clojure.core$load_one.invoke (core.clj:5336)
    clojure.core$load_lib$fn__4967.invoke (core.clj:5375)
    clojure.core$load_lib.doInvoke (core.clj:5374)
    clojure.lang.RestFn.applyTo (RestFn.java:142)
    clojure.core$apply.invoke (core.clj:619)
    clojure.core$load_libs.doInvoke (core.clj:5413)
    clojure.lang.RestFn.applyTo (RestFn.java:137)
    clojure.core$apply.invoke (core.clj:619)
    clojure.core$require.doInvoke (core.clj:5496)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    user$eval4412.invoke (SOURCE_FORM_60:-1)
    clojure.lang.Compiler.eval (Compiler.java:6619)
    clojure.lang.Compiler.eval (Compiler.java:6582)
    clojure.core$eval.invoke (core.clj:2852)
    ritz.repl_utils.compile$eval_region.invoke (compile.clj:55)
    ritz.nrepl.middleware.tracking_eval$evaluate$fn__1727.invoke (tracking_eval.clj:51)
    clojure.lang.AFn.applyToHelper (AFn.java:159)
    clojure.lang.AFn.applyTo (AFn.java:151)
    clojure.core$apply.invoke (core.clj:617)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1788)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    ritz.nrepl.middleware.tracking_eval$evaluate.invoke (tracking_eval.clj:48)
    ritz.nrepl.middleware.tracking_eval$eval_reply$fn__1741.invoke (tracking_eval.clj:89)
    clojure.core$comp$fn__4154.invoke (core.clj:2330)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__630.invoke (interruptible_eval.clj:138)
    clojure.lang.AFn.run (AFn.java:24)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1145)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:615)
    java.lang.Thread.run (Thread.java:722)
#+END_SRC

これは、 =~/.lein/profiles.clj= に下記を追加することで解消された。
#+BEGIN_SRC clojure
  [clojure-complete "0.2.3"]
#+END_SRC

** AndroidでClojure計画
AndroidでClojureアプリ(ゲーム)を動かしたい。 下記の順番で取り組む。
- その1. playN(libgdx)を、Java(Desktop)で動かす。
- その2. playN(libgdx)を、Java(Android)で動かす。
- その3. neko,lein-doroidでclojureコードの検証
- その4. playN(libgdx)を、Clojure(Desktop)で動かす。
- その5. playN(libgdx)を、Clojure(Android)で動かす。
経過は随時この記事に追記していく。

** TODO JDEE(CEDETリポジトリ版1.1)                                   :hamari:

*** CEDET
まずは、JDEEが依存しているパッケージCEDETを導入します。

CEDETは、SourceForgeでホストされており、その最新のソースコードのスナッ
プショットがとれることになってます。しかし、実際にはスナップショット
(*.tar.gz)だと最新が取得できません。展開するとわかるのですが、ファイル
自体は最新の日付にもかかわらず、中身を見るとディレクトリ構成などが全然
違ったりします(どちらもVersionは1.1なのに!)。ということで、最新のソース
は、Sourceforgeから直接もってくるか、ミラーサイトのgithubから取得する必
要があります。


- http://cedet.bzr.sourceforge.net/bzr/cedet/
- https://github.com/emacsmirror/cedet

bzrは慣れてないので、githubから準備します。
#+BEGIN_SRC sh
$ cd ~/site-lisp/
$ git clone https://github.com/emacsmirror/cedet.git
#+END_SRC

Make環境がある場合は、普通にmakeして下さい。一発目は生成ファイルの順番
の関係で失敗することがあるので、そんな時はもう一度makeして下さい。
#+BEGIN_SRC sh
$ cd cedet
$ make
#+END_SRC

Windowsな人やMake環境がない場合は、下記のようにemacs本体を使用してビル
ドしてください。詳細は、cedet-build.el本体のヘッダにコメントとして記述
されています。
#+BEGIN_SRC sh
$ cd cedet
$ C:/Users/mikio/apps/emacs-24.2/bin/runemacs.exe -Q -l cedet-build.el -f cedet-build
#+END_SRC

Makeには結構時間がかかります。ちなみにCEDETに入っているパッケージは以下
になります。この中で必要なのは、多分EIEIOとSemanticだけだと思います。
#+BEGIN_EXAMPLE
   EIEIO -    CLOS layer for Emacs Lisp
   Semantic - Parser Infrastructure for Emacs
   Speedbar - Everything browser
   EDE -      File manager/ Makefile generator
   SRecode -  Template manager/ code generator
   COGRE -    Connected Graph Editor
#+END_EXAMPLE

*** CEDET 導入hamari
jde-modeがONのときに下記エラーが発生。うまくいかない。
File mode specification error: (wrong-number-of-arguments #[(toggle name) "	\236\211\203

と、ここまでやって、JDEをインストールするんじゃなくて、CEDET1.1 だけでいいんじゃないかという気がしてきた。
なぜなら、CEDETだけでメソッド補完ができるから。

jdeを使用しない場合、足りない機能は以下になる。
- [ ] bean shell
- [ ] ant build
- [ ] jdb
- [ ] クラスのインポート
- [ ] flymake
結構欲しい機能が多いな。
build.xmlを解析して自動的にクラスパス追加とかあったらいいかも。。。

JDEはもう全然サポートされてないので、まだCEDETのほうが可能性があるかも。
この足りない機能は,clojureとかをつかってナントカデキナイカナ。

下記でメソッド補完
M-x semantic-ia-complete-symbol-menu

補完するためには、import文が必要のようだ。java.lang.Stringのメソッドを補完するためには
import java.lang.String;
をしてないと駄目みたい。
これは許容できない仕様だな。やっぱりjdeeで頑張るしかないようだ。

*** JDEE2.4.1パッケージの修正
**** =semantic-add-minor-mode= の修正
まず(jde-mode)で呼び出しにこけるのをなんとかする。
jde-bug.elの下記呼び出しでこける。
(semantic-add-minor-mode 'jde-bug-minor-mode " JDEbug" jde-bug-mode-map)
ググったらちょうど同じ問題がメーリングリストにのっていた。
- http://www.mail-archive.com/jdee-users@lists.sourceforge.net/msg00642.html

 =semantic-add-minor-mode= 関数の引数が3から2になったのが原因。
とりあえず、3つ目の引数は捨てるパッチをあてた。
**** import文の自動インポートが効かない。
C-c C-v z しても何もおこらない。

** TODO JDEEはまり過程                                               :hamari:

**** cedet
     cedetは、emacs23以降では標準でインストールされているが
     バージョンが古いためjdeeが動かない。
     とういことで1.0.1をダウンロードして使用する。

     .emacsの冒頭で下記のようにcedet.elを読み込まないと、同梱版の古いバージョンが
     有効になってしまうため、なによりもまず、下記を実行する必要がある。
     #+begin_src sh
(load-file "~/Dropbox/site-lisp/cedet-1.0.1/common/cedet.el")
     #+end_src
     新しいバージョンがインストールできたかどうかはM-x cedet-versionで確認できる。
     #+begin_src sh
CEDET Version:	1.0.1
  			Requested	File		Loaded
  Package		Version		Version		Version
  ----------------------------------------------------------
  cedet:		1.0.1		ok		ok
  eieio:		1.3		ok		ok
  semantic:		2.0		ok		ok
  srecode:		1.0		ok		Not Loaded
  ede:			1.0.1		ok		ok
  speedbar:		1.0.3		ok		ok
  cogre:		1.0		ok		Not Loaded
  cedet-contrib:	1.0		ok		Not Loaded



C-h f cedet-version RET
  for details on output format.
     #+end_src

**** cedet1.1のインストール
     1.1では、eieioのシンボルがないとかで、動かない。

     やはり、jdeのバージョンが古いため、新しいcedetを使用するのは
     きついかもしれない。

     ということでcedet1.1の採用はボツ。

**** ビルド(C-c C-v C-b)が実行できない。
     prj.elは下記のとおり設定してある。
- http://epian-wiki.appspot.com/wiki/Emacs/JDEE#i1C861AE907CB2F41F9C71F925BC21092
  #+begin_src sh
(jde-set-variables
 '(jde-build-function '(jde-ant-build))
    :
  #+end_src
  そしてC-c C-v C-bを実行すると下記エラー。
  #+begin_src sh
jde-build: Wrong type argument: commandp, (jde-ant-build)
  #+end_src
  どうやらjde-ant-buildの渡しかたが駄目だったようだ。
  下記のようにカッコを外したらうまくいった。
  #+begin_src sh
(jde-set-variables
 '(jde-build-function 'jde-ant-build)
    :
  #+end_src

**** ドキュメント参照(C-c C-v C-w)ができない。
     下記のようにプロジェクトファイルを修正したら、参照できるようになった。
     #+begin_src emacs-lisp
(jde-set-variables
 '(jde-jdk '("1.6"))
 '(jde-jdk-registry '(("1.6" . "~/opt/jdk1.6.0_24/")))
 '(jde-jdk-doc-url "http://java.sun.com/javase/ja/6/docs/ja/api/")
 '(jde-help-use-frames nil)
 '(jde-help-docsets '(("w3m-browse-url" "file://c:/Users/mikio/opt/java6-apidocs/ja/api" "1.6"))))
     #+end_src
     jde-help-docsetsの引数指定が間違っていた模様。

**** jikesでFly-Makeを有効にする(断念)。
     下記でjde-flymakeをインスールする。
     #+begin_src sh
M-x auto-install-from-emacwiki
     #+end_src
     jikesというIBM製のコンパイラをインストールする。ダウンロードしてパスを通すだけ。
     #+begin_src sh
$ jikes
use: jikes [options] [@files] file.java...
For more help, try -help or -version.
     #+end_src

     .emacsに下記を追加する。
     #+begin_src sh
    (require 'jde-flymake)
    (push '(".+\\.java$" flymake-jde-jikes-java-init flymake-simple-java-cleanup flymake-get-real-file-name) flymake-allowed-file-name-masks)
    ;;(push '("\\.java$" flymake-jde-jikes-java-init) flymake-allowed-file-name-masks)
     #+end_src

     javaファイルを読み込んで(flymake-mode)を実行すると
     (flymake-jde-jikes-java-init)の引数がおかしいと怒られる。
     #+begin_src sh
flymake-start-syntax-check: Wrong number of arguments: (lambda (source-file-name) "Returns the jikes command line for a directly checked source file, use create-temp-f for creating temp copy" "Currently uses the directory of the prj.el file as the execution directory for" "jikes (root of the source tree). Another option would be to use the package as determined by" "jde-package and go up the directory tree the appropriate number of levels (segments in the package name" (let* ((jikes-args nil) (prjfile-name (jde-find-project-file (file-name-directory source-file-name)))) (if prjfile-name (let* ((temp-source-file-name (flymake-init-create-temp-buffer-copy buffer (quote flymake-create-temp-with-folder-structure)))) (setq jikes-args (flymake-get-jikes-args temp-source-file-name (file-name-directory prjfile-name)))) (error "JDE project file not found")) (if jikes-args (list jde-flymake-jikes-app-name jikes-args) nil))), 0
Quit
     #+end_src
     ...どうやらjde-flymake.elが古くてうまくうごかないらしい

     (flymake-jde-jikes-java-init)を書きかえた結果、(flymake-mode)は通るようになった。
     そのかわり今度は下記のエラー。
     #+begin_src sh
Flymake mode enabled
Flymake: Configuration error has occurred while running (jikes -nowrite +E +D +P +Pno-naming-convention -deprecation -source 1.4 -bootclasspath c:/Users/mikio/opt/jdk1.6.0_24/jre/lib/rt.jar -classpath c:/Users/mikio/dev/ochagl/target/classes;c:/Users/mikio/dev/ochagl/target/test-classes -sourcepath c:/Users/mikio/dev/ochagl/src/main/java;c:/Users/mikio/dev/ochagl/src/test/java c:/Users/mikio/dev/ochagl/src/main/java/com/googlecode/ochagl/graphics/jogl/TextureLoaderJogl_flymake.java). Flymake will be switched OFF
     #+end_src
     jikesのオプションがおかしいとのこと。

     こんなコマンドが発行されている。
     #+begin_src sh
jikes -nowrite +E +D +P +Pno-naming-convention -deprecation -source 1.4 -bootclasspath
 c:/Users/mikio/opt/jdk1.6.0_24/jre/lib/rt.jar
 -classpath c:/Users/mikio/dev/ochagl/target/classes;c:/Users/mikio/dev/ochagl/target/test-classes
 -sourcepath c:/Users/mikio/dev/ochagl/src/main/java;c:/Users/mikio/dev/ochagl/src/test/java
 c:/Users/mikio/dev/ochagl/src/main/java/com/googlecode/ochagl/graphics/jogl/TextureLoaderJogl_flymake.java
     #+end_src

     ここで問題発生jikesは1.4までしかサポートしていない!
     javacで代替コマンドつくるしかないな。。。

     とりあえず下記でウイゴイタ。がコンパイルエラーが発生した。
     #+begin_src sh
jikes -nowrite +E +D +P +Pno-naming-convention -deprecation -source 1.4 -bootclasspath "c:\Users\mikio\opt\jdk1.6.0_24\jre\lib\rt.jar" -classpath "c:\Users\mikio\dev\ochagl\target\classes;c:\Users\mikio\dev\ochagl\target\test-classes" -sourcepath "c:\Users\mikio\dev\ochagl\src\main\java;c:\Users\mikio\dev\ochagl\src\test\java"  c:\Users\mikio\dev\ochagl\src\main\java\com\googlecode\ochagl\graphics\jogl\TextureLoaderJogl.java
     #+end_src

**** Flymakeができるように
- jikesコンパイラはサポートがjava1.4までなので使えない。
- あたりまえだが、javacへのパスが通ってないと無理なので今いちど確認を。
- https://github.com/kozo2/emacswiki.org/blob/master/jde-flymake.el
- jde-flymake.elを大分改良しないと使えるようにならない。
- javacのエラーメッセージが文字化けするので下記の設定を追加した。
  #+begin_src sh
  -J-Dfile.encoding=UTF-8 
  #+end_src
- エラーメッセージは下記のように設定すれば、C-cdで表示できる。
  #+begin_src sh
  (global-set-key "\C-cd" 'flymake-display-err-menu-for-current-line)
  #+end_src

- 最初、jdeeのGUIのポップアップでエラーメッセージが表示されてしまって
  いたので、下記を参考にツールチップ形式に変更した。
 - http://d.hatena.ne.jp/syohex/20111102/1320250444
**** flymakeは別記事にする。
     githubからフォークして変更をコミットしちゃう。
     記事はフォーク版を参考にする。
**** TODO jdbの使用
**** TODO flymakeするときにカレントのファイルを別名にするので、javacでクラス名とファイル名が違うと表示
**** TODO prj.elにおいてjarの設定方法がわからない。ひとつずつ追加するしかないのかな？
**** antによるビルド(C-c C-v C-b)したときに、出力バッファがスクロールしない。
**** flymakeのエラーが自動的に表示されない
- 自動的に表示されるものではなく、自分で表示させないとならない。
**** flymakeのエラーにジャンプする方法がわからない。
     #+begin_src sh
(defun my-flymake-mode-fook ()
  (progn
    (global-set-key (kbd "M-g M-n") 'flymake-goto-next-error)
    (global-set-key (kbd "M-g M-p") 'flymake-goto-prev-error)
    ))
(add-hook 'flymake-mode-hook 'my-flymake-mode-fook)
     #+end_src
**** antしたときのエラーメッセージが文字化けする。
     下記のように環境変数を設定すれば解決する。
     #+begin_src sh
export ANT_OPTS="-Dfile.encoding=UTF-8"
     #+end_src

**** メソッド補完時に下記のエラーが発生する。
#+BEGIN_SRC sh
  Error: // Error: // Uncaught Exception: Method Invocation this.interpreter.eval : at Line: 73 : in file: /bsh/commands/eval.bsh : this .interpreter .eval ( expression , this .caller .namespace ) 

Called from method: eval : at Line: 6 : in file: <unknown file> : eval ( "_jdeCustEvalFn();" ) 
Target exception: java.lang.UnsupportedClassVersionError: jde/util/JdeUtilities : Unsupported major.minor version 51.0

java.lang.UnsupportedClassVersionError: jde/util/JdeUtilities : Unsupported major.minor version 51.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)
	at java.net.URLClassLoader.access$000(URLClassLoader.java:58)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
#+END_SRC
     jdkを新しくしたために、コンパイル時とjavaバージョンと実行時のjavaバージョンが違ってしまったため。
#+BEGIN_SRC sh
コンパイル時 ： 1.？？
実行時 ： 1.？？
#+END_SRC
コンパイル時のバージョンと実行時のバージョンを覚えていないのでとにかく
コンパイルし直すことにした。でもういちど再チャレンジ。。。。失敗。同じ
バージョンなのになぜ？って暗中模索のなか、「JDEE bsh」バッファをみると
起動しているjavaのバージョンが1.6系だった。
#+BEGIN_SRC sh
cd c:/Users/mikio/dev/ochagl/src/main/java/rigidbody/
c:/Users/mikio/opt/jdk1.6.0_24/bin/javaw.exe -classpath c:/Users/mikio/Dropbox/site-lisp/jdee/dist/jdee-2.4.1/java/lib/bsh.jar;c:/Users/mikio/Dropbox/site-lisp/jdee/dist/jdee-2.4.1/java/bsh-commands;c:/Users/mikio/Dropbox/site-lisp/jdee/dist/jdee-2.4.1/java/lib/checkstyle-all.jar;c:/Users/mikio/Dropbox/site-lisp/jdee/dist/jdee-2.4.1/java/lib/jakarta-regexp.jar;c:/Users/mikio/Dropbox/site-lisp/jdee/dist/jdee-2.4.1/java/lib/jde.jar;c:/Users/mikio/opt/jdk1.7.0_04/lib/tools.jar;c:/Users/mikio/dev/ochagl/libs/gluegen-rt.jar;c:/Users/mikio/dev/ochagl/libs/jogl.jar;c:/Users/mikio/dev/ochagl/libs/junit-3.8.2.jar;c:/Users/mikio/dev/ochagl/target/classes;c:/Users/mikio/dev/ochagl/target/test-classes bsh.Interpreter
#+END_SRC
これだ!ってことでさっそく変更したいところだけ、beanshell用のjavaってど
こで指定するんだ？
prj.elをみると下記のように設定している。
#+BEGIN_SRC sh
 '(jde-jdk '("1.7"))
 '(jde-jdk-registry '(
                    ("1.6" . "~/opt/jdk1.6.0_24/")
					("1.7" . "~/opt/jdk1.7.0_04/"))
                    )
#+END_SRC
java1.7を指定してるはずなのになぜ？まさかとは思うがjde-jdk-registryへ渡
している順番が原因？ってことで下記のように変更してみた。

#+BEGIN_SRC sh
 '(jde-jdk '("1.7"))
 '(jde-jdk-registry '(
                      ("1.7" . "~/opt/jdk1.7.0_04/")
                      ("1.6" . "~/opt/jdk1.6.0_24/"))
                    )
#+END_SRC

でメソッド補完。したらエラーの内容が変わった。
#+BEGIN_SRC sh
jde-import-get-imports: Invalid function: semantic-brute-find-tag-by-class
#+END_SRC

まったく見当がつかないので、とりあえずelib1.0を入れてみる。
- http://jdee.sourceforge.net/
#+BEGIN_SRC sh
wget http://downloads.sourceforge.net/project/jdee/jdee/Dependencies/elib.tar.gz?r=http%3A%2F%2Fjdee.sourceforge.net%2Frootpage.html&ts=1338971448&use_mirror=jaist
#+END_SRC

いれてload-path通しただけでは駄目だったのでjdeeのbuild.propertiesの.dirを
指定して再コンパイルしてみた。
#+BEGIN_SRC sh
cedet.dir=c:/Users/mikio/Dropbox/site-lisp/cedet-1.0.1
elib.dir=c:/Users/mikio/Dropbox/site-lisp/elib-1.0
#+END_SRC
そしたらやっと起動したよ。これで導入方法が確定かな？。同様の方法で1.1も
いけるかもしれない。

** TODO JDEEでFly-Makeを有効にする。                                 :hamari:

   下記でjde-flymakeをインスールする。
   #+begin_src sh
M-x auto-install-from-emacwiki
   #+end_src

   ソースを修正して、oracle製のjavacに対応する。
   =jde-flymake.el=の=flymake-get-jikes-args=関数を修正する。
   #+BEGIN_SRC sh
      (list
-       "-nowrite"
-       "+E"
-       "+D"
-       "+P"
-       "+Pno-naming-convention"
-       "-deprecation" 
-       "-source" jde-flymake-option-jikes-source 
+       "-J-Dfile.encoding=UTF-8"
+       "-bootclasspath" rt-jar 
+       "-classpath" proj-classpath
+       "-sourcepath" proj-sourcepath
       source-file-name))))
   #+END_SRC

   .emacsに下記を追加する。
   #+begin_src sh
    (require 'jde-flymake)
    (setq jde-flymake-jikes-app-name "javac")
    (push '(".+\\.java$"
            flymake-jde-jikes-java-init
            flymake-simple-java-cleanup
            flymake-get-real-file-name)
          flymake-allowed-file-name-masks)

  ;; エラーメッセージの表示
  (global-set-key "\C-cd" 'flymake-display-err-menu-for-current-line)
   #+end_src

   =.java=ファイルを開いた状態で=M-x flymake-mode=でインクリメンタルコンパイルた働くはず。
   ただし、prj.elによてって=jde-global-classpath=に正しくクラスパスが設定されてなければならない。

- githubリポジトリ
 - https://github.com/kozo2/emacswiki.org/blob/master/jde-flymake.el
- jikesコンパイラはサポートがjava1.4までなので使えない。
- jde-flymake.elを改良しないと使えるようにならない。
- 最初、jdeeのGUIのポップアップでエラーメッセージが表示されてしまって
  いたので、下記を参考にツールチップ形式に変更した。
 - http://d.hatena.ne.jp/syohex/20111102/1320250444

** TODO clojureでnrepl使用時のパスがおかしい                        :clojure:

例えば、core.cljに定義されている関数へ飛ぶために =M-.= すると、
#+BEGIN_SRC sh
c:/C:/Users/mikio/dev/misaki/src/misaki/core.clj
#+END_SRC
のようなパスを拾ってしまい、正しく定義場所へジャンプできない。

nrepl.elでは、 =M-.= するとカーソルのシンボルを拾って
下記のclojureコードを実行する。
#+BEGIN_SRC clojure
((clojure.core/juxt
    (comp clojure.core/str clojure.java.io/resource :file)
    (comp clojure.core/str clojure.java.io/file :file) :line)
    (clojure.core/meta (clojure.core/resolve '%s)))
#+END_SRC
これでそのシンボルのファイルパスや、定義されている行番号などの情報を得る。

でそこで問題になるのが、windowsで実装したときのfileパス。
以下のように =file:/C:/....= となってしまう。
#+BEGIN_SRC clojure
user> (clojure.java.io/resource (:file (clojure.core/meta #'try-times)))
 #<URL file:/C:/Users/mikio/dev/cljtest/src/cljtest/util.clj>
#+END_SRC

nrepl.elの308行目付近の正規表現を下記のように修正したらうまくいった。
#+BEGIN_SRC clojure
+  (cond ((string-match "^file:/\\(.+\\)" resource)
-  (cond ((string-match "^file:\\(.+\\)" resource)
#+END_SRC

** TODO clojureでデバッガが使いたい                                 :clojure:

組み合わせ
#+BEGIN_EXAMPLE
nrepl.el
;;Version: 0.1.6

nrepl-ritz.el
;; Version: 0.6.0
;; Package-Requires: ((nrepl "0.1.5"))

$ java -version
java version "1.7.0_09"
Java(TM) SE Runtime Environment (build 1.7.0_09-b05)
Java HotSpot(TM) Client VM (build 23.5-b02, mixed mode, sharing)

$ mvn --version
Apache Maven 3.0.4 (r1232337; 2012-01-17 17:44:56+0900)
Maven home: c:\Documents and Settings\mikio\opt\apache-maven-3.0.4\bin\..
Java version: 1.7.0_09, vendor: Oracle Corporation
Java home: C:\Program Files\Java\jdk1.7.0_09\jre
Default locale: ja_JP, platform encoding: MS932
OS name: "windows xp", version: "5.1", arch: "x86", family: "windows"

#+END_EXAMPLE

~/.lein/profiles.clj
#+BEGIN_SRC clojure
{:user {:plugins [ [lein-difftest "1.3.7"]
                   [lein-marginalia "0.7.0"]
                   [lein-pprint "1.1.1"]
                   [lein-swank "1.4.4"]
                   [lein-ritz "0.4.2"]
                   ]}
 :dependencies [[ritz/ritz-nrepl-middleware "0.6.0"]
                [ritz/ritz-debugger "0.6.0"]
                [ritz/ritz-repl-utils "0.6.0"]]
 :repl-options {:nrepl-middleware
                [ritz.nrepl.middleware.javadoc/wrap-javadoc
                 ritz.nrepl.middleware.simple-complete/wrap-simple-complete]}
 :hooks
 [ritz.add-sources]
 }
#+END_SRC

下記のエラーが発生。
#+BEGIN_SRC sh
Starting nREPL ritz server...
error in process sentinel: if: Could not start nREPL server: Warning: profile :jpda not found.
Exception in thread "main" java.lang.RuntimeException: java.lang.ClassNotFoundException: com.sun.jdi.VirtualMachine
	at clojure.lang.Util.runtimeException(Util.java:165)
	at clojure.lang.Compiler.eval(Compiler.java:6476)
	at clojure.lang.Compiler.eval(Compiler.java:6455)
	at clojure.lang.Compiler.load(Compiler.java:6902)
	at clojure.lang.RT.loadResourceScript(RT.java:357)
	at clojure.lang.RT.loadResourceScript(RT.java:348)
	at clojure.lang.RT.load(RT.java:427)
	at clojure.lang.RT.load(RT.java:398)
	at clojure.core$load$fn__4610.invoke(core.clj:5386)
	at clojure.core$load.doInvoke(core.clj:5385)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at clojure.core$load_one.invoke(core.clj:5200)
	at clojure.core$load_lib.doInvoke(core.clj:5237)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invoke(core.clj:602)
	at clojure.core$load_libs.doInvoke(core.clj:5271)
	at clojure.lang.RestFn.applyTo(RestFn.java:137)
	at clojure.core$apply.invoke(core.clj:602)
	at clojure.core$require.doInvoke(core.clj:5352)
	at clojure.lang.RestFn.invoke(RestFn.java:1096)
	at ritz.jpda.debug$eval1090$loading__4505__auto____1091.invoke(debug.clj:1)
#+END_SRC

** TODO emacs(windowsXP)で画像が表示できない。                            :hamari:

diredなどで画像フィアルを選択しても下記のエラーが表示がされて表示できな
い。
#+BEGIN_SRC sh
Cannot display image: (Invalid image specification)
#+END_SRC

下記をみると、画像表示関連の =*.dll= へのパスが通っていないのが原因のようだ。
- http://sourceforge.jp/forum/forum.php?thread_id=28791&forum_id=22824

最近、eshellでコマンドが実行できなくなっていたり、Cygwin版のemacsが起動
しなかったりコンソール関連のコマンドが上手く動かないので、そこに原因が
ありそう。


ImageMagick自体はきちんと動いている。
#+BEGIN_SRC sh
$ convert --version
Version: ImageMagick 6.7.6-3 2012-04-01 Q16 http://www.imagemagick.org
Copyright: Copyright (C) 1999-2012 ImageMagick Studio LLC
Features: OpenMP
#+END_SRC

emacsからは認識できるか？
#+BEGIN_SRC emacs-lisp
(executable-find "convert")
"c:/cygwin/bin/convert.exe"
#+END_SRC
できている。

** TODO jogl                                                                :jogl:

   下記よりnattiveファイルをダウンロード。
- http://jogamp.org/deployment/archive/master/jogl-old-1.1.1/
- gluegen-rt-natives-windows-i586.jar 
  .jarを展開して.dllを取り出し、./libs/winに配置する。
  antのjavaタスクにおいて下記のようにjava.library.pathを指定する。
  #+BEGIN_SRC sh
	<target name="run" >
		<java classname="${execute.class}" fork="true">
			<classpath refid="base.path" />
			<sysproperty key="java.library.path" value="c:\\Users\\mikio\\dev\\ochagl\\libs\\win\\"/>
		</java>
	</target>
  #+END_SRC

** TODO yasnipppetの作りかた                                     :emacs:yasnippet:

 =M-x yas/new-snippet-with-content= を実行
- nameのところにdefine-keyと入力してTAB
- keyのところにdefkeyと入力してTAB
- スニペット中のテキストの一部分を穴埋めしたい場合は、それらをリージョン化して =C-c C-n= する。
- C-c C-t でテストする。
- テストバッファは、 =C-x k= で削除
- C-c C-c で登録する。

** TODO edbiの導入                                                         :emacs:

kiwanami氏のedbiを導入することにした。edbiは、emacsからsqlを操作するためのツール。
phpadminのようなツールのemacs版。
- http://d.hatena.ne.jp/kiwanami/20120305/1330939440
*** perlモジュールの導入
- edbiを導入するには、perlのDBIを入れる必要がある。
- perlでモジュールを導入するには、CPANという巨大なアーカイブサイトを利用する。
- CPANからモジュールをインストールするには、 =CPAN::sell= というモジュールを利用する。
- ただし、 =CPAN::shell= は、sudoが必要だったりメモリが多く必要だったりで推奨できない。
- 代替案として、高速で省メモリなcpanmというものがある。現在はこれが主流?らしい。
てことでcpanmを使ってDBIを導入する。
**** cpanmの導入
cpanmについては、以下が詳しい。
- http://www.omakase.org/perl/cpanm.html
#+BEGIN_SRC sh
$ mkdir bin && cd ~/bin
$ wget --no-check-certificate http://xrl.us/cpanm
$ chmod +x cpanm
#+END_SRC

**** local::libの導入
ユーザ環境だけにモジュールをインストールしたいので、
#+BEGIN_SRC sh
$ cpanm --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)
$ cpanm local::lib # ローカルにインストールするためのモジュール
#+END_SRC

**** perlbrewの導入
うまくいかないので、perlbrewを使ってインストールすることにした。
perlbrewはperl自身のバージョンを管理するシステム。これを使うと、ローカルに環境を構築できるらしい。

ちなみに公式サイトやその他紹介記事の下記のコマンドだと、途中でエラーになってこける。
#+BEGIN_SRC sh

curl -kL http://xrl.us/perlbrewinstall | bash
#+END_SRC
-kオプションはSSLのエラーを無視する。
urlにあるスクリプトをbashに喰わして実行する。

その後、下記を実行
#+BEGIN_SRC sh
echo "source $HOME/perl5/perlbrew/etc/bashrc" >> ~/.bashrc
source ~/.bashrc
#+END_SRC
で、ここでエラー。
#+BEGIN_SRC sh
$ source ~/.bashrc
manpath: オプションが違います -- q
manpath, version 1.6d
:
:
#+END_SRC
 =$HOME/perl5/perlbrew/etc/bashrc= の中身を見てみると、下記の =qx(manpath -q)= でエラーが出ている模様。
#+BEGIN_SRC sh
export MANPATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,qx(manpath -q);')"
#+END_SRC

qxとはperlの関数で、シェルのコマンドを実行するもの。
- http://itpro.nikkeibp.co.jp/article/Reference/20080930/315733/

qオプションは、警告を表示しないオプション。
http://manpages.ubuntu.com/manpages/gutsy/ja/man1/manpath.1.html

今回のシステムの =manpath= には、このオプションがないようだ。
代替コマンドもないようなので、下記のとおり、オプション指定を外した。
#+BEGIN_SRC sh
-export MANPATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,qx(manpath -q);')"
+export MANPATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,qx(manpath);')"
#+END_SRC

これで、もう一度実行。
#+BEGIN_SRC sh
$ source ~/.bashrc
#+END_SRC

下記コマンドで利用可能なperlがわかる。
#+BEGIN_SRC sh
$ perlbrew available
#+END_SRC
 
あとはお好みで任意のperlをインストールすればオッケー。
#+BEGIN_SRC sh
$ perlbrew install perl-5.17.3
#+END_SRC
と思ったら、エラーがでた。
#+BEGIN_SRC sh
$ perlbrew install perl-5.17.3
Fetching perl-5.17.3 as /home/at-mikio/perl5/perlbrew/dists/perl-5.17.3.tar.bz2
Installing /home/at-mikio/perl5/perlbrew/build/perl-5.17.3 into ~/perl5/perlbrew/perls/perl-5.17.3

This could take a while. You can run the following command on another shell to track the status:

  tail -f ~/perl5/perlbrew/build.log

Installing /home/at-mikio/perl5/perlbrew/build/perl-5.17.3 failed. See /home/at-mikio/perl5/perlbrew/build.log to see why.
You might want to try upgrading patchperl before trying again:

  perlbrew install-patchperl

If you want to force install the distribution, try:

  perlbrew --force install perl-5.17.3
#+END_SRC
てことなので =install-patchperl= を実行。
#+BEGIN_SRC sh
$ perlbrew install-patchperl
#+END_SRC
再チャレンジ。
#+BEGIN_SRC sh
$ perlbrew install perl-5.17.3
$ perlbrew switch perl-5.17.3
#+END_SRC
成功した。
#+BEGIN_SRC sh
$ perl --version

This is perl 5, version 17, subversion 3 (v5.17.3) built for x86_64-linux

Copyright 1987-2012, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using "man perl" or "perldoc perl".  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
#+END_SRC

**** DBIの導入
#+BEGIN_SRC sh
$ cpanm RPC::EPC::Service DBI DBD::mysql
#+END_SRC
DBIだけ成功した。どうやらperlのバージョン(v5.8)が古かったのが原因だったようだ。
のこり。
#+BEGIN_SRC sh
$ cpanm I DBD::mysql
#+END_SRC
cpanmはソース(c言語)からインストールするのだが、 =*.h= がなくて失敗しているらしい。
これには、
#+BEGIN_SRC sh
$ sudo yum install mysql-devel
#+END_SRC
する必要があるので、いろいろ面倒になってくる。
ということで、ここで断念することにした。
ちなみに、cygwinではうまくいった。ただしどこにインストールされたかは調べていない。
少くとも、 =~/pelr5/*= ではないらしい。

** TODO perlモジュールの導入                                                :perl:

- edbiを導入するには、perlのDBIを入れる必要がある。
- perlでモジュールを導入するには、CPANという巨大なアーカイブサイトを利用する。
- CPANからモジュールをインストールするには、CPAN::sellというモジュールを利用する。
- ただし、CPAN::shellは、sudoが必要だったりメモリが多く必要だったりで推奨できない。
- 代替案として、高速で省メモリなcpanmというものがある。現在はこれが主流?らしい。
てことでcpanmを使ってDBIを導入する。
*** cpanmの導入
cpanmについては、以下が詳しい。
- http://www.omakase.org/perl/cpanm.html
#+BEGIN_SRC sh
$ mkdir bin && cd ~/bin
$ wget --no-check-certificate http://xrl.us/cpanm
$ chmod +x cpanm
#+END_SRC

*** local::libの導入
ユーザ環境だけにモジュールをインストールしたいので、
#+BEGIN_SRC sh
$ cpanm --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)
$ cpanm local::lib # ローカルにインストールするためのモジュール
#+END_SRC

*** perlbrewの導入
うまくいかないので、perlbrewを使ってインストールすることにした。
perlbrewはperl自身のバージョンを管理するシステム。これを使うと、ローカルに環境を構築できるらしい。

ちなみに公式サイトやその他紹介記事の下記のコマンドだと、途中でエラーになってこける。
#+BEGIN_SRC sh

curl -kL http://xrl.us/perlbrewinstall | bash
#+END_SRC
-kオプションはSSLのエラーを無視する。
urlにあるスクリプトをbashに喰わして実行する。

その後、下記を実行
#+BEGIN_SRC sh
echo "source $HOME/perl5/perlbrew/etc/bashrc" >> ~/.bashrc
source ~/.bashrc
#+END_SRC
で、ここでエラー。
#+BEGIN_SRC sh
$ source ~/.bashrc
manpath: オプションが違います -- q
manpath, version 1.6d
:
:
#+END_SRC
= $HOME/perl5/perlbrew/etc/bashrc =の中身を見てみると、下記の = qx(manpath -q) = でエラーが出ている模様。
#+BEGIN_SRC sh
export MANPATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,qx(manpath -q);')"
#+END_SRC

qxとはperlの関数で、シェルのコマンドを実行するもの。
- http://itpro.nikkeibp.co.jp/article/Reference/20080930/315733/

qオプションは、警告を表示しないオプション。
http://manpages.ubuntu.com/manpages/gutsy/ja/man1/manpath.1.html

今回のシステムの = manpath = には、このオプションがないようだ。
代替コマンドもないようなので、下記のとおり、オプション指定を外した。
#+BEGIN_SRC sh
-export MANPATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,qx(manpath -q);')"
+export MANPATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,qx(manpath);')"
#+END_SRC

これで、もう一度実行。
#+BEGIN_SRC sh
$ source ~/.bashrc
#+END_SRC

下記コマンドで利用可能なperlがわかる。
#+BEGIN_SRC sh
$ perlbrew available
#+END_SRC
 
あとはお好みで任意のperlをインストールすればオッケー。
#+BEGIN_SRC sh
$ perlbrew install perl-5.17.3
#+END_SRC
と思ったら、エラーがでた。
#+BEGIN_SRC sh
$ perlbrew install perl-5.17.3
Fetching perl-5.17.3 as /home/at-mikio/perl5/perlbrew/dists/perl-5.17.3.tar.bz2
Installing /home/at-mikio/perl5/perlbrew/build/perl-5.17.3 into ~/perl5/perlbrew/perls/perl-5.17.3

This could take a while. You can run the following command on another shell to track the status:

  tail -f ~/perl5/perlbrew/build.log

Installing /home/at-mikio/perl5/perlbrew/build/perl-5.17.3 failed. See /home/at-mikio/perl5/perlbrew/build.log to see why.
You might want to try upgrading patchperl before trying again:

  perlbrew install-patchperl

If you want to force install the distribution, try:

  perlbrew --force install perl-5.17.3
#+END_SRC
てことなので = install-patchperl = を実行。
#+BEGIN_SRC sh
$ perlbrew install-patchperl
#+END_SRC
再チャレンジ。
#+BEGIN_SRC sh
$ perlbrew install perl-5.17.3
$ perlbrew switch perl-5.17.3
#+END_SRC
成功した。
#+BEGIN_SRC sh
$ perl --version

This is perl 5, version 17, subversion 3 (v5.17.3) built for x86_64-linux

Copyright 1987-2012, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using "man perl" or "perldoc perl".  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
#+END_SRC

*** DBIの導入
#+BEGIN_SRC sh
$ cpanm RPC::EPC::Service DBI DBD::mysql
#+END_SRC
DBIだけ成功した。どうやらperlのバージョン(v5.8)が古かったのが原因だったようだ。
のこり。
#+BEGIN_SRC sh
$ cpanm I DBD::mysql
#+END_SRC
cpanmはソース(c言語)からインストールするのだが、= *.h = がなくて失敗しているらしい。
これには、
#+BEGIN_SRC sh
$ sudo yum install mysql-devel
#+END_SRC
する必要があるので、いろいろ面倒になってくる。
ということで、ここで断念することにした。
ちなみに、cygwinではうまくいった。ただしどこにインストールされたかは調べていない。
少くとも、= ~/pelr5/* = ではないらしい。

** TODO evil-mode                                                     :emacs:evil:

*** org-modeとskkでzで始まるコマンドが被る。
*** C-jがparedit-modeにシャドウィングされている。
   
[M] motion State(0,^,$などの選択範囲)
[O] Operate State(y,dなどのコマンド)
[N] Normal State
[I] Insert State
[R] Replace State
[E] Emacs State

*** キーバインド
**** SLIME
C-c C-c(,c)
現在ポイントしてるトップレベルフォームをコンパイル

C-c C-k(,k)
現在開いているファイルをすべてコンパイル

C-c C-z(,z)
現在開いているファイルに接続されているREPLを表示する。

困った時
M-x slime-restart-inferior-lisp
- C-g的な存在。
- 現在接続しているサーバーを再起動してクリーンな状態に戻すコマンドです。


    M-.: Jump to the definition of a var
    M-TAB or C-c TAB: Autocomplete symbol at point
    C-x C-e: Eval the form under the point
    C-c C-k: Compile the current buffer
    C-c C-l: Load current buffer and force required namespaces to reload
    C-M-x: Compile the whole top-level form under the point.
    C-c S-i: Inspect a value
    C-c C-m: Macroexpand the call under the point
    C-c C-d C-d: Look up documentation for a var
    C-c C-z: Switch from a Clojure buffer to the repl buffer
    C-c M-p: Switch the repl namespace to match the current buffer
    C-c C-w c: List all callers of a given function

   - escape問題
   - 日本語
- anything
- auto-complete
- org-mode
- eshell
- janue
- w3m
- tag-jump
- slime
- Twittering-mode  
- dired
- diredからの名前編集
- grepからの名前編集
- tabbar
- moccure-grep
- minimum
- gnus
- jdee
- yasnippet

** TODO emacsで文字化けしたファイルを開いた場合。                          :emacs:

(* 検証が必要 *)
- = M-x RET r = と入力する。これは、ファイルを読み込みなおす。=r= は =revert= の意味。
- = M-x RET f = は、ファイルを保存する。

** TODO multi-termでw3mを動かす。

w3mはemacs内で動くテキストブラウザですが、ちょっと重いです。テキストブ
ラウザのくせに、はっきりいってfirefoxやchromよりも重いです。しかし、
cygwin上で動かしたw3mはちょっぱやです! てことは、emacsでも、ansi-term経
由で動かせば、w3mも早いんじゃないか？というのが動機です。

下記を参考に、cygwinをmulti-termで動かすことを目標にします。
- http://sakito.jp/emacs/emacsshell.html#windows-shell

*** fakecygpty
$ wget -O fakecygpty.c http://www.meadowy.org/meadow/browser/trunk/nt/fakecygpty.c?format=txt
$ gcc -o fakecygpty.exe fakecygpty.c
$ cp fakecygpty.exe f_zsh.exe
$ cp fakecygpty.exe f_bash.exe
$ cp fakecygpty.exe f_ssh.exe
cp f_* ~/bin

;; Shell 名の設定
(setq shell-file-name (skt:shell))
(setenv "SHELL" shell-file-name)
(setq explicit-shell-file-name shell-file-name)

** TODO evil-modeでvimの操作性とemacsの拡張性を両方手に入れる!        :emacs:evil:

そこそこ経験のあるemacserは大抵の場合、viの操作をマスターしています。
hjklはもちろん、yy,dd,u,cw,yw,dw,などなど。簡単な設定ファイルの編集や、
ページャの操作などです。そこでいつも思いす。viはなんて操作しやすいのだ
ろう。{count}{operater}{motion}の操作ですばやく作業できるコマンド体系に
あこがれます。そのたびにvimへ宗旨替えしようかと思うのです。しかし、沢山
の魅力的な拡張がその気持をなだめます。
eshell,gnus,skk,anythign,autocomplete,navi2ch,twittering-mode,などなど。
そしてなによりemacsは拡張がlispで書けるのです。そこが一番の魅力かもしれません。
ということで、いつもvimの操作でemacsが使えたらなぁとぼんやり考えるようになりました。
昔、viper-modeなるものを使ったことがあったけど、使いづらかったので止めたのでした。
で、最近の事情はということで調べてみると、vimpulseからevilというものがあって
こいつのvim再現度がかなり高いということで試してみたら、なるほど噂どおり、 ▼タケェ
   
C-c C-c
C-g
C-p, C-n
C-u コマンド 反対の意味
C-c メージャーモードでのプレフィックス

C-a, C-e
M-f, M-b
C-k
C-y
C-f, C-b

** TODO 試験環境などでディレクトリを共有したい場合の運用方法       :linux:command:

この場合の要件は以下。
- 試験環境のデプロイなど用に共有で作業できるディレクトリがほしい
- 特定のグループ(例えばdev)に属するユーザであれば自由に試験環境にデプロ
  イできる

で、この要件を満たすためには以下の作業が必要になる。
- 共有ディレクトリの決定(/usr/local/wwwなど)
- グループ名の決定(dev)
- sgidの設定
- デフォルトパーミッション変更(644 -> 664)
- デプロイツールなどの作成(rysync, chgrp)
たとえば、mikioユーザ、mikioグループ、devグループでプライマリがmikioグ
ループの場合新規のファイルはmikioグループで作られてしまう。

これを共通のdevグループに属するディレクトリにコピーする場合、mikioユー
ザはdevグループにも所属してるのでコピーはできるが新規の場合mikioグルー
プになるため他の人がコピーできなくなってしまう。これを防ぐには、手動で
chgrpすれば良い。
#+BEGIN_SRC sh
chgrp -R dev /usr/local/www
#+END_SRC

このとき、新規作成したファイルのパーミッションは、664であって欲しい。
でないと、別ユーザが書き込めない。

rsyncのオプションは"crz"を使用する。
#+BEGIN_SRC sh
 -c, --checksum              常にチェックサムを行う
 -z, --compress              受信ファイルを圧縮compress file data
 -r, --recursive             ディレクトリで再帰的に実行する

 -p, --perms                 パーミッションを維持する
 -g, --group                 グループを維持する
 -o, --owner                 オーナーを維持する (root のみ)
#+END_SRC
注意点としては、p,gがないのでパーミッションの維持もグループの維持もしな
い。gはオーナが違う場合、root権限が必要になるので注意。oは今回のように
グループで資源管理する場合には必要なし。

*** グループの変更方法
#+BEGIN_SRC sh
# 補助グループにユーザを追加する場合は以下
/usr/sbin/usermod -G グループ名 ユーザ名

# 初期グループにユーザを追加する場合は以下
/usr/sbin/usermod -g グループ名 ユーザ名
#+END_SRC

*** プライマリグループについて
ファイルを新規作成したときは、プライマリグループのグループ名になる。デ
フォルトの状態でプライマリグループはユーザ名と同一である。これを変更す
るにはusermodを使用する。ただしプライマリグループを変更するのは通常のセ
オリーから反するので注意。

注意点として、ログインしているユーザ（つまり自分自身）は変更できない。
#+BEGIN_SRC sh
/usr/sbin/usermod -g グループ名 ユーザ名
#+END_SRC

** TODO Javaデータの読み書き                                                :java:

**** はじめに

Javaでなんらかのデータを読み書きするとき（たとえばテキストファイルの読み書きや、画像データの読み書き、
ネットワークデータのやり取りなどなど）はストリーム系のクラス群(java.io.*)を使用する必要がある。
ここではそれらの基本的なコードをまとめてみる。


**** ストリームの種類
ストリームには大別すると２種類あって、バイトと文字がある。

- バイトストリーム
 - InputStream
 - OutputStream
- 文字ストリーム
 - Reader
 - Writer

これらのクラスはストーリムを扱うトップレベルのスーパークラスであり一番重要である。

***** ファイルの読み書き
文字ストリームとバイトストリームには、それぞれにファイルから読み込むためのクラスがある。

- バイトストリーム
 - FileInputStream
 - FileOutputStream
- 文字ストリーム
 - FileReader
 - FileWriter

***** バイトストリームから文字ストリームへの変換
文字ストリームの読み書きをするときは、元データはネットワークでバイトデータだったり、
ファイルであっても文字コードを指定する必要があったりする。
そうすると元データはバイトストリームとして扱ったほうが都合がよい。
そのため、普通はバイトストリームとしてデータを読み込み、その後、ReaderやWirterに変換して処理する。
- IpuntStreamReader
- OutputStreamWriter

***** バッファリング
データの読み書きは前述のように大抵ファイルかネットワークでこれらはメモリより全然遅い。
前述のクラスは、１バイト単位、１文字単位で読み込むことになり効率が悪い。
そこで、ほとんどのケースでバッファリングクラスを介して前述のクラスを使用する。

- バイトストリーム
 - BufferdInputStream
 - BufferdOutputStream
- 文字ストリーム
 - BufferdIReader
 - BufferdIWriter

**** サンプル
***** バイトストリームのサンプル
引数のファイルを標準出力に表示する。
ただし、データをバイナリとして扱う。
以下にソースを示す。
#+BEGIN_SRC c
import java.io.*;
class BufferedByteStreamSample {
    public static void main(String[] args)
    {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new BufferedInputStream(new FileInputStream(args[0]));
            out = new BufferedOutputStream(System.out);
            int b;
            while ((b = in.read()) != -1) {
                out.write(b);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException e) {
            }
        }
    }
}
#+END_SRC

コンパイルと実行。
#+BEGIN_SRC sh
$ javac BufferedByteStreamSample.java 
$ java BufferedByteStreamSample BufferedByteStreamSample.java 
 :
#+END_SRC

ストリーム系クラスは、インスタンス生成時にどんどんくるむ。これをデコレータパターンという。
注意すべきは、ストリームをクローズするときは、その一番外側のクラスだけをクローズすればよいということ。
closeが失敗するのはディスクフルの書き込み失敗ぐらいで、読み込みじにクローズが失敗することは殆どない。
基本的に必ずfinally句に書くようにすれば良い。

***** 文字ストリームのサンプル
引数のファイルを標準出力に表示する。
ただし、データを文字として扱う。
このサンプルでは、元となるデータがテキストファイルなのでFileInputStreamを使用しているが
そのソースが何かによってInputStreamを継承した何らかの別のクラスになる。
以下にソースを示す。
#+BEGIN_SRC c
import java.io.*;
class BufferedCharStreamSample {
    public static void main(String[] args)
    {
        Reader in = null;
        Writer out = null;
        try {
            in = new BufferedReader(new InputStreamReader(new FileInputStream(args[0])));
            out = new BufferedWriter(new OutputStreamWriter(System.out));
            int b;
            while ((b = in.read()) != -1) {
                out.write(b);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException e) {
            }
        }
    }
}
#+END_SRC

コンパイルと実行。
#+BEGIN_SRC sh
$ javac BufferedCharStreamSample.java 
$ java BufferedCharStreamSample BufferedByteStreamSample.java 
 :
#+END_SRC

** TODO Thunderbirdからmewに移行                             :mew:thuderbird:

windwos(cygwin)環境のthunderbirdからmewへメール環境を移行するには下記の手順を踏む。
- thunderbirdのデータをmbox形式でエクスポートする。
- 出力したmbox形式のデータを保存したフォルダをローカルメールボックスとしてmewで取り込む。
このとき、mboxをmh形式に変換するため、incm.exeという外部プログラムが必要になる。  
またwindows環境だとmewl.exeがcygwinでコンパイルしたものでないと
incm.exeをフォークできないので注意する。
http://www.mew.org/pipermail/mew-win32/2003-February/003315.html

*** thunderbirdのデータをmbox形式でエクスポートする。
「ImportExportTools」というAddOnを使用して、mbox形式で出力する。
エクスポートしたデータは、mewで取り込むと取り込んだ分だけサイズが小さくなる。
つまりデータが移動されるかたちになる。

*** incm.exe, mewl.exeの取得
mh形式への変換にincm.exeというプログラムが必要だが、
これがw32用のzipファイルをダウンロードしただけでは取得できない。
普通に実行プログラムがあると思ったのに入ってない。
しかたがないので、unix用のソースを持ってきてコンパイルして手に入れることにした。

#+BEGIN_SRC sh
$ cd src/mew-6.4rc1/
$ ./configure
$ make
$ cp bin/incm.exe ~/bin/
$ cp bin/mew*.exe ~/bin/
#+END_SRC

*** mewでローカルメールボックスとして受信する。
thunderbirdで出力したmbox形式のデータをローカルメールボックスとして受信する。
下記の設定を施す。
#+BEGIN_SRC sh
(setq mew-mailbox-type 'mbox)
(setq mew-mbox-command "c:/Users/mikio/bin/incm.exe")
(setq mew-mbox-command-arg "-u -m C:/Users/mikio/mbox-data/inbox")
#+END_SRC
inboxはディレクトリではなくmbox形式のファイル名であることに注意。

** TODO mewに全文検索エンジンを導入する。                         :emacs:mew:
   
- googleDesktopはサポート終了していた。
- WindowsDesktopも同様(vista移行OS標準でサポートされるため)。
- てことでhyperestraierという舌がもつれそうなエンジンを使用することにする。
http://fallabs.com/hyperestraier/
http://www.mew.org/ja/feature/est.html
winの場合はwindows用のバイナリを展開してパスを通すだけ。

と思ったがいざkMしてみると以下のメッセージがでて動かない。
'mewest' does not exist
調べた結果これはシェルスクリプトということがわかった。
ソースフォルダからmewestをパスの通ったところにコピーするも以下のエラー
mew-est-index-folder: Searching for program: no such file or directory, mewest

mewestはシェルスクリプトであるため、Windowsではそのままでは動かない。
cygwinを導入していることを前提として下記の設定が必要である。
#+BEGIN_SRC sh
;; 検索エンジンにhyperestraierを指定
(setq mew-search-method 'est)
;; for windows
(setq mew-prog-est "estcmd.exe")
(setq mew-prog-est-update "sh mewest")
#+END_SRC

とりあえず最初の一発目のインデックス作成にはeshellで下記のコマンドを実施した。
#+BEGIN_SRC sh
$ sh mewest
#+END_SRC

** TODO emacsのorg-mode使いはみんなo-blogを使ってブログ書くといいと思う。 :emacs:
** TODO gnusを導入してみる                                             :gnus:

コマンドライン上でSSL通信を利用するために、gnutlsを導入してみる。
#+BEGIN_SRC sh
$ apt-cyg install gnutls
$ gnutls-cli
No hostname specified
#+END_SRC
って出力されればとりあえずオッケー。

** TODO eshell x tramp 最高                                     :emacs:tramp:

windows -> linuxのリモート開発はあきらめたけども
putty -> linux -> linux のtrampは割りと軽くて快適だった。
eshellを複数立ち上げてそれぞれtrampで接続すれば
screenやtmuxの代りになる!
今まで関連するホスト全てにemacsの設定ファイル配布したりして
管理が面倒だったけど、trampによるアクセスがあるおかげで
emacsのインストールもelispの管理も1台だけで済む。
これはかなりメリットがあると思う。

あとは、ファイル編集以外のコマンド実行などが
どこまで有効かというところが気になるところ。

#+begin_src sh
/ssh:hoe~:
#+end_src

** TODO clojure-lanterna を試す。                                   :clojure:

本家のページにチュートリアルがります。
- http://sjl.bitbucket.org/clojure-lanterna/

replに入力するだけの簡単チュートリアルなのですぐ終ります。原文を読むの
が一番ですが、作業記録ということで内容を載せます(翻訳ではないので注意)。

ちなみに最初のページにハーローワールドのコードが載ってますが、著者もあ
まり意味がないと言ってますし、やらなくていいと思います。

*** インストール

まずプロジェクトを作ります。
#+BEGIN_SRC sh
$ lein new clj-lanterna-test
#+END_SRC

 =project.clj= を編集します。なぜか =0.9.3= だと駄目で、 =0.9.2= にしたら成功
しました。まあありがちですね。
#+BEGIN_SRC clojure
[clojure-lanterna "0.9.2"]
#+END_SRC

jarを取得します。
#+BEGIN_SRC sh
$ lein deps
#+END_SRC

*** Terminal
以降では、[[http://sjl.bitbucket.org/clojure-lanterna/terminals/][Terminal]] を試してみます。

 =M-x nrepl-jack-in= でnreplを起動します。

- http://sjl.bitbucket.org/clojure-lanterna/terminals/

#+BEGIN_SRC clojure
user> (require '[lanterna.terminal :as t])
nil
user> (def term (t/get-terminal :swing))
#'user/term
user> (t/start term)
nil
#+END_SRC
 =(t/start term)= でlanternaによる疑似ターミナルが表示されます。
[[file:img/laterna/lanterna01.png]]


**** 文字表示
#+BEGIN_SRC clojure
(t/put-character term \H)
(t/put-character term \i)
(t/put-character term \!)
#+END_SRC
[[file:img/laterna/lanterna02.png]]

 =(t/put-character)= は、カーソル位置に表示されます。カーソルは文字を表示するたびに右に移動します。


文字列を表示するには以下。
#+BEGIN_SRC clojure
(def put-character-to-term (partial t/put-character term))
(def write #(dorun (map put-character-to-term %)))
(write " My name is Steve!")
#+END_SRC

[[file:img/laterna/lanterna03.png]]


ちょっとここで、日本語が表示できるか試してみます。
#+BEGIN_SRC clojure
(write "ザル魂なり！")
#+END_SRC
[[file:img/laterna/lanterna04.png]]

うが!!表示できませんでした。。。残念! どうにか調べてなんとかしたいです
ね(laternaの [[https://code.google.com/p/lanterna/wiki/DevelopmentGuide][サイト]] に システムプロパティの =file.encoding= を見てるとあっ
たのでこの辺をゴニョゴニョすればどうにかなるはず)。

**** カーソル移動
#+BEGIN_SRC clojure
(t/move-cursor term 40 12)
(t/put-character term \@)
#+END_SRC
[[file:img/laterna/lanterna05.png]]

カーソルが移動して その場所に =@= が表示されました。
今、カーソルは文字入力されたので、ひとつ右に移動しています。
もとに戻します。
#+BEGIN_SRC clojure
(t/move-cursor term 40 12)
#+END_SRC
[[file:img/laterna/lanterna06.png]]
カーソルと文字が重なりました。

**** 色まわり

文字や背景色の色を変更してみます。
#+BEGIN_SRC clojure
(t/move-cursor term 0 6)
(t/set-fg-color term :red)
(t/put-string term "Red")

(t/move-cursor term 0 7)
(t/set-fg-color term :blue)
(t/put-string term "Blue")

(t/move-cursor term 0 8)
(t/set-fg-color term :black)
(t/set-bg-color term :green)
(t/put-string term "Green")
#+END_SRC

[[file:img/laterna/lanterna07.png]]

操作ミスでGreenが2回表示してしまいました。。。基本的に色やカーソルは常
にその状態を保持しているとことがわかります。

文字色、背景色を元に戻します。
#+BEGIN_SRC clojure
(t/set-fg-color term :default)
(t/set-bg-color term :default)
#+END_SRC

**** 入力
Swingのターミナルウィンドウをアクティブにして、 =abc= をタイプしてか
らREPLで下記を入力します。
#+BEGIN_SRC clojure
user> (t/get-key term)
\a
user> (t/get-key term)
\b
user> (t/get-key term)
\c
user> (t/get-key term)
nil
#+END_SRC
laternaは、入力した文字をバッファに貯めるらしく、こんな感じで入力した文
字が拾えます。Shiftキーを押せば =\A= が返ります。文字以外の =Enter= キー
などは、 =:enter= が返るようです。

下記で一覧を得られます。
#+BEGIN_SRC clojure
user> (require '[lanterna.constants :as c])
(vals c/key-codes)
nil
(:normal :home :insert :unknown :reverse-tab :tab :page-up :page-down :end :left :down :delete :up :cursor-location :backspace :escape :enter :right)
#+END_SRC

**** ターミナルのサイズについて

ターミナルのサイズはユーザの環境によって変化するので、アプリを各上で画
面サイズが必要になります。
#+BEGIN_SRC clojure
(t/get-size term)
#+END_SRC
この関数だと、プログラム側からチェックしないとサイズを取得できないので面倒です。
なので、リスナを定義して自動的にサイズを取得する方法があります。

いったんSwingターミナルを閉じます。
#+BEGIN_SRC clojure
(t/stop term)
#+END_SRC

下記がリスナの例です。
#+BEGIN_SRC clojure
(def terminal-size (ref [0 0]))
(defn handle-resize [cols rows]
  (dosync (ref-set terminal-size [cols rows])))
#+END_SRC

セットしてターミナルを表示します。
#+BEGIN_SRC clojure
(def term (t/get-terminal :swing {:resize-listener handle-resize}))

(t/start term)
#+END_SRC

初期状態では、 =[0 0]= が返ってきます。
#+BEGIN_SRC sh
user> @terminal-size
[0 0]
#+END_SRC

適当にサイズを変更後にサイズを調べると変化します。
#+BEGIN_SRC clojure
user> @terminal-size

[52 15]
#+END_SRC
このリスナーに画面の再構築処理を記述しておくことにより可変サイズに対応
できます。

閉じます。
#+BEGIN_SRC clojure
(t/stop term)
#+END_SRC



** TODO JDEEでデバッガを使用する                                 :emacs:jdee:

下記の設定が必要になります。

まずは.emacs。
#+BEGIN_SRC emacs-lisp
  ;; コンパイル時にデバッグ情報を埋め込む
  (setq jde-compile-option-command-line-args '("-g"))
                                               
  ;; デバッガの出力情報を英語にする
  (setq jde-db-option-vm-args '("-J-Duser.language=en"))

  ;; デフォルトのデバッガをjdbにする
  (setq jde-debugger '("jdb"))
#+END_SRC

続いてprj.el。
#+BEGIN_SRC emacsl-lisp
 '(bsh-vm-args '("-Duser.language=en")) ;文字化け対策
#+END_SRC

デフォルトだと、デバッガやコンパイラの出力メッセージが文字化けしてしま
うので、jvmへのオプションで英語表示になるように指定しています。

デバッガを使うには =-g= オプションを有効にしてデバッグ情報を埋めこんだ
状態でコンパイルする必要があります。 上記設定をした上で =C-c C-v C-c=
でソースをコンパイルして下さい。続いて =C-c C-v C-d= でデバッガ(jdb)を
起動します。jdbの操作方法は以下のとおりです。
| ブレイクポイントを設定         | stop at 完全修飾クラス名:行番号 |
| 最初のブレイクポイントまで実行 | run                             |
| 次の行まで実行                 | next                            |
| ステップイン                   | step                            |
| 実行中のメソッドを抜ける       | step up                         |
| 次のブレイクポイントまで実行   | cont                            |
| ローカル変数の中身表示         | locals                          |
| インスンタンス変数の中身表示   | dump 変数名                     |
| 終了                           | quit                            |
| ヘルプ表示                     | help                            |


下記に実行の様子を示します。
#+BEGIN_SRC sh
main[1] step
> 
Step completed: "thread=main", sample.java.project.SampleJavaProject.main(), line=17 bci=0

main[1] stop at sample.java.project.SampleJavaProject:21

main[1] cont
> 
Breakpoint hit: "thread=main", sample.java.project.SampleJavaProject.main(), line=21 bci=22

main[1] locals
Method arguments:
args = instance of java.lang.String[0] (id=439)
Local variables:
msg = instance of org.apache.commons.cli.Option(id=440)
main[1] step
> 
Step completed: "thread=main", org.apache.commons.cli.Options.<init>(), line=104 bci=0

main[1] step
> 
Step completed: "thread=main", org.apache.commons.cli.Options.<init>(), line=91 bci=4
#+END_SRC
IDEのビジュアルな操作に慣れてると原始的すぎでびっくりですが、私は結構好
きです。コマンド入力なので当然コマンド名を覚えなくてはなりませんが、私
の場合「ステップ実行」と「ブレイクポイント」ぐらいしか使用しないので無
問題です。たとえ忘れてしまっても、helpと打ちこむことでオンラインヘルプ
が表示されますので安心です。ブレイクポイントの設定が面倒なので、
=M-xlinum-mode= して行番号を常時表示するのがお勧めです。Emacs特有の操作
としては、 =M-p,M-n= で履歴を辿り、 =M-r= で履歴を検索できます。

続いて、jdbをJDEE経由で操作する方法を示します。これらのキーバインドは、
jdbのバッファではなく、ソースコード側で操作する必要があります。
| ブレイクポイントを設定         | C-c C-a C-b |
| 最初のブレイクポイントまで実行 | C-c C-a C-r |
| 次の行まで実行                 | C-c C-a C-s |
| ステップイン                   | C-c C-a C-n |
| 実行中のメソッドを抜ける       | C-c C-a C-o |
| 次のブレイクポイントまで実行   | C-c C-a C-c |
| ローカル変数の中身表示         | C-c C-a C-l |
| インスンタンス変数の中身表示   | C-c C-a C-d |

最初からこちらを紹介してもよかったのですが、裏で何が起こっているのかと
いう理解と、キーバインドのありがたみを味わえるということであえてコマン
ドタイプのインタフェイスから説明しました。

これでEmacsからデバッガが操作できるようになり、脱Eclipseにまた一歩近づ
きました。次のステップとしては、Tomcatなどのアプリケーションサーバ経由
でデバッガを操作する方法を調べたいと思います。

*** 参考
- http://www2s.biglobe.ne.jp/~dat/java/strikes/jdb.html#seven
- http://stuff.mit.edu/afs/athena/contrib/xemacs/share/xemacs-packages/etc/jde/doc/html/jdb-ug/jdb-guide.html   

** jdee
** tmux起動時に変なゴミが表示される                             :tmux:hamari:

 tmuxを起動もしくはアタッチするとエスケープシーケンスっぽい文字が表示される。
#+BEGIN_SRC sh
$ 77;10102;0c
#+END_SRC
tmuxを1.7にバージョンアップしたのが原因なのかな？でもputtyのときは問題ない。

 =.bashrc= の$TERMを =screen= にし、 =.tmux.conf= のTerminalの設定を =xterm-256color= にしたら直った。

 *.bashrc* 
#+BEGIN_SRC sh
export TERM=screen
#+END_SRC

 *.tmux.conf* 
#+BEGIN_SRC sh
set-option -g default-terminal xterm-256color
#+END_SRC

CentOSの場合、TERMに設定すべき情報は下記にある。
/usr/share/terminfo

**  =static= というclojure製のsite-generatorを試してみる            :clojure:
** tmuxの表示崩れが激しいので、term+.elを試してみる。                 :emacs:
   CLOCK: [2013-01-30 水 10:00]--[2013-01-30 水 12:00] =>  2:00

emacsで表示崩れがたまにおこるが、もしかしてtmuxが原因かも。ってことで前
から気になっていたterm+.elを試してみることにした。

make termは、ビルドすることじゃなくて、素の状態のemacsにterm+を設定して
起動するコマンド。なにかをビルドするのじゃないので注意。

しかし、チャンレンジするも挫折。
- C-t のプレフィックスが切りかえられない。
- 編集モードで、改ページ(M-v,C-v)ができない。
- tmuxのtabの類似機能がみあたらない(グループという機能があるっぽい)
- tmux attachに相当する機能がなさそう(これはemacsの範疇を超えてそうな気がする)
- MELPAに登録されていない。
- いろいろいじっていたら、 =text is read only= が表示され操作不能に。
- なにか不具合が起きたときに自力で解決できそうもない...

そもそも表示崩れの原因は、tmuxじゃなくてemacsだったっぽい。
なのでやっぱりtmuxで頑張ることにした。

** Windows でnrepl-ritzを試す。                       :clojure:hamari:misaki:

nrepl用のdebbugerのritzを試してみました。

使用方法は以下にあります。
- https://github.com/pallet/ritz/tree/develop/nrepl


設定したら下記を実行。
#+BEGIN_SRC sh
$ cd ~/your-project
$ lein pom
$ mvn dependency:sources;
#+END_SRC

#+BEGIN_SRC sh
c:/Users/mikio/dev/misaki$ lein ritz-nrepl
Error: cannot resolve ritz.add-sources/activate hook
Error: cannot resolve ritz.add-sources/activate hook
Error: cannot resolve ritz.add-sources/activate hook
Error: cannot resolve ritz.add-sources/activate hook
Exception in thread "main" com.sun.jdi.VMDisconnectedException
	at com.sun.tools.jdi.TargetVM.waitForReply(TargetVM.java:304)
	at com.sun.tools.jdi.VirtualMachineImpl.waitForTargetReply(VirtualMachineImpl.java:1036)
	at com.sun.tools.jdi.PacketStream.waitForReply(PacketStream.java:69)
	at com.sun.tools.jdi.JDWP$EventRequest$Clear.waitForReply(JDWP.java:6830)
	at com.sun.tools.jdi.JDWP$EventRequest$Clear.process(JDWP.java:6806)
	at com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.clear(EventRequestManagerImpl.java:212)
	at com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.setEnabled(EventRequestManagerImpl.java:164)
	at com.sun.tools.jdi.EventRequestManagerImpl$EventRequestImpl.disable(EventRequestManagerImpl.java:155)
	at ritz.jpda.jdi$discard_event_request.invoke(jdi.clj:505)
	at ritz.jpda.jdi_vm$acquire_thread.invoke(jdi_vm.clj:155)
	at ritz.jpda.jdi_vm$launch_vm.invoke(jdi_vm.clj:179)
	at ritz.jpda.debug$launch_vm.invoke(debug.clj:59)
	at ritz.nrepl$start_jpda_server.invoke(nrepl.clj:256)
	at user$eval4903.invoke(NO_SOURCE_FILE:1)
	at clojure.lang.Compiler.eval(Compiler.java:6511)
	at clojure.lang.Compiler.eval(Compiler.java:6500)
	at clojure.lang.Compiler.eval(Compiler.java:6501)
	at clojure.lang.Compiler.eval(Compiler.java:6477)
	at clojure.core$eval.invoke(core.clj:2797)
	at clojure.main$eval_opt.invoke(main.clj:297)
	at clojure.main$initialize.invoke(main.clj:316)
	at clojure.main$null_opt.invoke(main.clj:349)
	at clojure.main$main.doInvoke(main.clj:427)
	at clojure.lang.RestFn.invoke(RestFn.java:421)
	at clojure.lang.Var.invoke(Var.java:419)
	at clojure.lang.AFn.applyToHelper(AFn.java:163)
	at clojure.lang.Var.applyTo(Var.java:532)
	at clojure.main.main(main.java:37)
#+END_SRC

ググった結果、どうやら =tools.jar= がクラスパスに設定してないのが原因らしい。
そこで =PROJECT_ROOT/lib= ディレクトリを作成し、 =tools.jar= をコピーして再トライ。

今度は例外が発生しなくなったものの、下記のエラーが発生し、nreplが起動しない。
#+BEGIN_EXAMPLE
Error: cannot resolve ritz.add-sources/activate hook
Error: cannot resolve ritz.add-sources/activate hook
Error: cannot resolve ritz.add-sources/activate hook
Error: cannot resolve ritz.add-sources/activate hook
#+END_EXAMPLE

** lein経由でclojureプログラムが起動しない。
こんなエラーが発生する。
#+BEGIN_SRC sh
$ lein run
Error: Could not find or load main class clojure.main
#+END_SRC
 =clojure.main= がないとのことだけど。

** CUI環境でのDropboxの起動方法

whitebaseの場合
cd ~/bin/
dropbox.py status
dropbox.py start

予め、CUI用のDropboxをインストールしておき、dropbox.pyを~/binに配置しておく必要がある。

** misaki
下記でbody部のみをexportできる。
(org-export-as-html 3 nil nil nil t)

misakiのproject.cljに下記を追加で、htmlテンプレートが追加できる。
#+BEGIN_SRC clojure
:dependencies [
  [misaki-clostache "0.0.1-alpha"]
  ]
#+END_SRC

_config.cljは下記のように修正。
#+BEGIN_SRC sh
 :compiler ["clostache" "default"]
#+END_SRC

テンプレートのファイル名は下記のようにする必要がある。
#+BEGIN_SRC sh
filename.html.html
#+END_SRC
これは、misakiの仕様で、変換されたときに、その記事の拡張子が削られるためである。
#+BEGIN_SRC sh
■コンパイル前
filename1.html.html
filename2.html.clj
■コンパイル後
filename1.html
filename2.html
#+END_SRC

現状だと下記のようなエラーが発生してうまくいかない。
#+BEGIN_SRC sh
c:/Users/mikio/dev/misaki$ lein run samples/blog/
All namespaces already :aot compiled.
 * Compiling all templates
 * Compiling atom.xml.clj

java.lang.RuntimeException: Unable to resolve symbol: &lt;div&gt; in this context, compiling:(NO_SOURCE_PATH:1)
   at misaki.compiler.default.evaluator$evaluate_to_function$fn__203 / invoke (evaluator.clj:62)
   at misaki.compiler.default.evaluator$evaluate_to_function / invoke (evaluator.clj:62)
   at misaki.compiler.default.template$load_template$fn__311 / invoke (template.clj:82)
   at misaki.compiler.default.template$load_template / invoke (template.clj:89)
   at misaki.compiler.default.core$file__GT_template_sexp / doInvoke (core.clj:193)
   at misaki.compiler.default.core$generate_post_content / invoke (core.clj:95)
   at misaki.compiler.default.core$get_post_info$fn__2294 / invoke (core.clj:108)
   at misaki.compiler.default.core$get_compile_fn$fn__2341 / invoke (core.clj:221)
   at misaki.compiler2013-01-18 17:49:01.040:INFO:oejs.Server:jetty-7.6.1.v20120215
.default.core$compile_STAR_ / invoke (core.clj:229)
   at misaki.compiler.default.core$compile_template / invoke (core.clj:248)
   at misaki.compiler.default.core$_compile$fn__2235 / invoke (core.clj:71)
   at misaki.compiler.default.core$_compile / invoke (core.clj:59)
   at misaki.core$call_compiler_fn / doInvoke (core.clj:47)
   at misaki.core$compile_STAR_$fn__778 / invoke (core.clj:147)
   at misaki.util.sequence$some_with_default_value / invoke (sequence.clj:44)
   at misaki.core$compile_STAR_ / invoke (core.clj:154)
   at misaki.core$call_all_compile / invoke (core.clj:170)
   at misaki.server$do_all_compile / invoke (server.clj:2013-01-18 17:49:01.149:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
51)
   at misaki.server$_main / doInvoke (server.clj:89)

Caused by java.lang.RuntimeException: Unable to resolve symbol: &lt;div&gt; in this context
   at misaki.compiler.default.evaluator$evaluate_to_function$fn__203 / invoke (evaluator.clj:62)
   at misaki.compiler.default.evaluator$evaluate_to_function / invoke (evaluator.clj:62)
   at misaki.compiler.default.template$load_template$fn__311 / invoke (template.clj:82)
   at misaki.compiler.default.template$load_template / invoke (template.clj:89)
   at misaki.compiler.default.core$file__GT_template_sexp / doInvoke (core.clj:193)
   at misaki.compiler.default.core$generate_post_content / invoke (core.clj:95)
   at misaki.compiler.default.core$get_post_info$fn__2294 / invoke (core.clj:108)
   at misaki.compiler.default.core$get_compile_fn$fn__2341 / invoke (core.clj:221)
   at misaki.compiler.default.core$compile_STAR_ / invoke (core.clj:229)
   at misaki.compiler.default.core$compile_template / invoke (core.clj:248)
   at misaki.compiler.default.core$_compile$fn__2235 / invoke (core.clj:71)
   at misaki.compiler.default.core$_compile / invoke (core.clj:59)
   at misaki.core$call_compiler_fn / doInvoke (core.clj:47)
   at misaki.core$compile_STAR_$fn__778 / invoke (core.clj:147)
   at misaki.util.sequence$some_with_default_value / invoke (sequence.clj:44)
   at misaki.core$compile_STAR_ / invoke (core.clj:154)
   at misaki.core$call_all_compile / invoke (core.clj:170)
   at misaki.server$do_all_compile / invoke (server.clj:51)
   at misaki.server$_main / doInvoke (server.clj:89)
   FAIL in 2.016 sec
 * Finish Compiling
 * starting server:  http://localhost:8080/
#+END_SRC
これは恐らく、defaultのコンパイラがタグを処理できずに例外を発生しているためと思われる。
clostashとdefaultコンパイラは混在できないのかも。
_config.cljで複数のコンパイラを指定したとき、最初のコンパイルが失敗したら次のコンパイルへリレーするとあるが、
最初のコンパイルで失敗してそれきりのように見える。

要件としては、
- posts配下のファイルは、.html.html
- layouts配下のファイルは、.html.clj
といった形で複数のコンパイラを利用したい。

** misakiでなにもしないコンパイラをつくる
- Masakiをorg-modeで使用したい。
- コンテンツ部分だけをorg-modeのexport-as-htmlコマンドで出力し、できた.htmlをそのまま流用したい。
- 出力したコンテンツ以外はそのままdefaultのコンパイラを使用したい。

lein-newnewというプラグインを使用するので、 =~/.lein/profiles.clj= に設定を加える。
#+BEGIN_SRC clojure
{:user
 {:plugins [
            [lein-newnew "0.3.4"] 
            ]
}}
#+END_SRC

コンパイラ名はnopとした。
#+BEGIN_SRC sh
$ lein new misaki-compiler misaki-nop
$ cd misaki-nop/
#+END_SRC

- 開発中のコンパイラを使用する方法がわからない。

** Windowsでmisakiのデモが動かない                              :misaki:
   CLOSED: [2013-05-03 金 12:12]

#+BEGIN_SRC sh
c:/Users/mikio/dev/misaki$ git diff
diff --git a/project.clj b/project.clj
index c3dde53..0062fdf 100644
--- a/project.clj
+++ b/project.clj
@@ -1,4 +1,8 @@
 (defproject misaki "0.2.5-beta"
+  :jvm-opts [
+;;             "-Dfile.separator=/"
+             ]
+
   :description "Jekyll inspired static site generator in Clojure"
   :dependencies [[org.clojure/clojure "1.4.0"]
                  [org.clojure/core.incubator "0.1.0"]
@@ -17,7 +21,8 @@
   :dev-dependencies [[lein-multi "1.1.0"]
                      [lein-marginalia "0.7.1"]
                      [debug-reader "0.0.1"]
-                     [lein-autotest-notify "0.0.4"]]
+                     [lein-autotest-notify "0.0.4"]
+                     ]
 
   :repositories [["sonatype-snapshots"
                   "https://oss.sonatype.org/content/repositories/snapshots/"]]
diff --git a/samples/blog/_config.clj b/samples/blog/_config.clj
index d757c4c..a886f5e 100644
--- a/samples/blog/_config.clj
+++ b/samples/blog/_config.clj
@@ -81,6 +81,7 @@
 
  ;; compiler setting
  ;;   default value: "default"
- :compiler "default"
+;; :compiler "default"
+ :compiler ["nop" "default"]
  }
 
diff --git a/samples/blog/template/index.html.clj b/samples/blog/template/index.html.clj
index 3f26b42..d641ea6 100644
--- a/samples/blog/template/index.html.clj
+++ b/samples/blog/template/index.html.clj
@@ -14,55 +14,15 @@
   " inspired static site generator in Clojure")
 
 ;; Sample posts
-(page-header "Sample posts")
 (post-list)
 
 ;; Sample post tags
-(page-header "Sample tags")
 (tag-list)
 
 ;; Template source
-(page-header "Template source")
 [:p "you can highlight your code with "
  (link "google-code-prettify" "http://code.google.com/p/google-code-prettify/")]
-#-CLOJURE
-;; Define template options here
-; @layout  default
-; @title   home
-
-;; Your own function in template
-(defn page-header [[fs & rs]]
-  [:div {:class "page-header"}
-   [:h1 [:span fs] rs]])
-
-; Template is compiled with hiccup
-(header
-  (:title site)
-  (link "Jekyll" "https://github.com/mojombo/jekyll")
-  " inspired static site generator in Clojure")
-
-;; Sample posts
-(page-header "Sample posts")
-(post-list)
-
-;; Sample post tags
-(page-header "Sample tags")
-(tag-list)
-
-;; Template source
-(page-header "Template source")
-[:p "you can highlight your code with "
- (link "google-code-prettify" "http://code.google.com/p/google-code-prettify/")]
-#-CLJ
-CLJ
-
-;; Document
-(page-header "Document")
-; Markdown like format with "p" function
-(p "See " (link "http://liquidz.github.com/misaki/demo"))
-CLOJURE
 
 ;; Document
-(page-header "Document")
 ; Markdown like format with "p" function
 (p "See " (link "http://liquidz.github.com/misaki/"))
diff --git a/src/misaki/config.clj b/src/misaki/config.clj
index 0e9ad91..643099e 100644
--- a/src/misaki/config.clj
+++ b/src/misaki/config.clj
@@ -118,8 +118,12 @@
   "Check whether file is post file or not."
   [#^File file]
   {:pre [(file? file)]}
-  (and (:post-dir *config*) (str-contains? (.getAbsolutePath file)
-                                           (:post-dir *config*))))
+  ;; (and (:post-dir *config*) (str-contains? (.getAbsolutePath file)
+  ;;                                          (:post-dir *config*)))
+  (and (:post-dir *config*) (str-contains? (str/replace (.getAbsolutePath file) #"\\" "/")
+                                           (:post-dir *config*)))
+  )
+
 
 ;; ## Filename Date Utility
 
@@ -184,7 +188,7 @@
   {:pre [(file? file)]}
   (if (post-file? file)
     (make-post-output-filename file)
-    (let [path (.getPath file)
+    (let [path (str/replace (.getPath file) #"\\" "/")
           len  (count (:template-dir *config*))]
       (if (.startsWith path (:template-dir *config*))
         (.substring path len)
#+END_SRC
** emacsをバッチプログラムとしてorg-modeのexportを試す
   
#+BEGIN_SRC sh
$ emacs -q -l org-export.el
#+END_SRC
export-command '(princ (org-no-properties (org-export-as-html nil nil nil 'string t nil)))
** HTTPのキャッシュについて
*** Expiresヘッダ
- サーバからクライアントへ返却されるヘッダ
- キャッシュの終了する日時を指定する方式
- サーバとクライアントの日時が一致してなければならない
- HTTP/1.0なので古いブラウザでもサポートされている。

#+BEGIN_EXAMPLE
Expires: Thu, 14 Apr 2011 20:00:00 GMT
#+END_EXAMPLE

*** Cache-Controlヘッダ
- サーバからクライアントへ返却されるヘッダ
- キャッシュを保持する期間を秒数で指定する方式
- HTTP/1.1でしかサポートされていない。
#+BEGIN_EXAMPLE
Cache-Control: max-age=315360000
#+END_EXAMPLE
*** apacheでの設定方法
mod_expiresモジュールを使用して両方のヘッダを
ひとつの設定で指定できる。
#+BEGIN_EXAMPLE
<FilesMatch "\.(gif|jpg|js|css)$>
  ExpiresDefault "access plus 10 years"
</FilesMatch>
#+END_EXAMPLE
この設定は下記のヘッダを生成する。
#+BEGIN_EXAMPLE
Expires: Sun, 16 Oct 2016 05:43:02 GMT
Cache-Control: max-age=315360000
#+END_EXAMPLE
*** サーバー側でキャッシュの設定をしていない場合
- サーバー側にキャッシュの指定がなくても、大抵のブラウザはキャッシュする。
- ブラウザから条件付GETリクエストが送信される
#+BEGIN_EXAMPLE
GET /us.js.yimg.com/lib/common/utils/2/yahoo_20.0.0-b2.js
  :
If-Modified-Since: Wed, 22 Feb 2006 04:15:54 GMT
#+END_EXAMPLE
ブラウザから要求されたGETのファイルが更新されていなければ
サーバーは下記のレスポンスヘッダを返す。
#+BEGIN_EXAMPLE
HTTP/1.1 304 NotModified
 :
#+END_EXAMPLE


** ルータ変更
*** 変更前の速度
OOKLA SPEEDTESTというAndroidアプリを使用。
単位:Mbps
|              |          |     1 |     2 |     3 |
| desigre      | download |  5.39 |  6.96 |  7.44 |
|              | upload   |  1.11 |  2.35 |  1.63 |
| Nexus7(2013) | download | 15.79 | 20.88 | 16.86 |
|              | upload   | 14.94 | 11.62 | 12.74 |

*** 変更前の速度
PC: download: 96.34MBps
** ciderを導入してみる。
半年以上ぶりにclojureを触り初めたところ、今はnreplではなくてciderが定番のようなので導入してみた。
なんなく設定できたと思ったら下記のエラーが =cider-jack-in= 時に発生する。

#+BEGIN_SRC sh
java.lang.IllegalAccessError: pp does not exist
 at clojure.core$refer.doInvoke (core.clj:3849)
    clojure.lang.RestFn.applyTo (RestFn.java:139)
    clojure.core$apply.invoke (core.clj:619)
    clojure.core$load_lib.doInvoke (core.clj:5394)
    clojure.lang.RestFn.applyTo (RestFn.java:142)
    clojure.core$apply.invoke (core.clj:619)
    clojure.core$load_libs.doInvoke (core.clj:5413)
    clojure.lang.RestFn.applyTo (RestFn.java:137)
    clojure.core$apply.invoke (core.clj:619)
    clojure.core$require.doInvoke (core.clj:5496)
    clojure.lang.RestFn.applyTo (RestFn.java:137)
    clojure.core$apply.invoke (core.clj:617)
    user$eval1073.invoke (NO_SOURCE_FILE:1)
    clojure.lang.Compiler.eval (Compiler.java:6619)
    clojure.lang.Compiler.eval (Compiler.java:6582)
    clojure.core$eval.invoke (core.clj:2852)
    clojure.main$repl$read_eval_print__6588$fn__6591.invoke (main.clj:259)
    clojure.main$repl$read_eval_print__6588.invoke (main.clj:259)
    clojure.main$repl$fn__6597.invoke (main.clj:277)
    clojure.main$repl.doInvoke (main.clj:277)
    clojure.lang.RestFn.invoke (RestFn.java:1096)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__589.invoke (interruptible_eval.clj:56)
    clojure.lang.AFn.applyToHelper (AFn.java:159)
    clojure.lang.AFn.applyTo (AFn.java:151)
    clojure.core$apply.invoke (core.clj:617)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1788)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:41)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__630$fn__633.invoke (interruptible_eval.clj:171)
    clojure.core$comp$fn__4154.invoke (core.clj:2330)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__623.invoke (interruptible_eval.clj:138)
    clojure.lang.AFn.run (AFn.java:24)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1145)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:615)
    java.lang.Thread.run (Thread.java:724)
#+END_SRC

ぐぐってみたところ下記にヒントが。
- https://github.com/clojure-emacs/cider/issues/367

ここに以下のような設定が載っていたが、駄目だった。
#+BEGIN_SRC emacs-lisp
(setq cider-repl-use-pretty-printing nil)
#+END_SRC

どうもタイミングの問題で発生するようなのでとりあえず無視しておいても問題なさそうだ。
** grepとackとag
- grep
- ack :: grepをソースコードの検索に特化させた高速grep。perlで書かれている。
- ag :: ShilberSearchとうのが正式名称。agはコマンド名っぽい。ackをc言語で実装したやつ。ackより更に速い。

agを適当にコンパイルしてインストールする。
#+BEGIN_SRC sh
yum -y install pcre-devel xz-devel
cd ~/src
unzip the_silver_searcher-master.zip
cd the_silver_searcher-master
./build.sh
sudo paco -D make install
#+END_SRC
ag.elとwgrep-ag.elをpackage.elからインストール。

#+BEGIN_SRC emacs-lisp
(require 'mikio-util)

;; ag
;; ag(The Silver Searcher)コマンドを以下からインストール:
;;     http://github.com/ggreer/the_silver_searcher#installation
;; ag.elとwgrep-ag.elをlist-packageでMelpaなどからインストールしておく
(require 'ag)
(custom-set-variables
 '(ag-highlight-search t)       ; 検索結果の中の検索語をハイライトする
 '(ag-reuse-window 'nil)        ; 現在のウィンドウを検索結果表示に使う
 '(ag-reuse-buffers 'nil))      ; 現在のバッファを検索結果表示に使う
(require 'wgrep-ag)
(autoload 'wgrep-ag-setup "wgrep-ag")
(add-hook 'ag-mode-hook 'wgrep-ag-setup)
(define-key ag-mode-map (kbd "r") 'wgrep-change-to-wgrep-mode)

(provide 'mikio-ag)
#+END_SRC

** skkfepでセミコロンをスティッキーシフトに割り当てる
skkrule.txtを編集する。

セミコロンの設定を2の順次打鍵にすればオッケー。
#+BEGIN_EXAMPLE
-設定	順次	1	順次打鍵(セミコロン)	0.なし 1.送りがな開始のみ 2.順次打鍵
+設定	順次	2	順次打鍵(セミコロン)	0.なし 1.送りがな開始のみ 2.順次打鍵
#+END_EXAMPLE

そしたらsetup.jsをダブルクリックして設定画面を起動する。
コマンドボタン押下でコマンドプンプトを起動する。
下記で設定内容が反映される。
#+BEGIN_SRC sh
> rule skkrule.txt
#+END_SRC
ただし使用するアプリは再起動が必要。できればシステムを再起動したほうが良い。

ついでに下記の設定もしておくと良い。
#+BEGIN_SRC sh
> rule emacs.exe m5 s0    # emacs.exeのみ起動時にIMEオフ/SandS無効 (Emacs側のSKKを使う場合にお勧め)
#+END_SRC

** cp コマンドについて

#+BEGIN_SRC sh
$ cp -r /foo/hoge/ hoge/
hoge/hoge/
#+END_SRC

- hoge配下にhogeがコピーされる。
- 引数が3つ以上の場合、最後の引数は必ず存在するディレクトリでなければならない。
- rsyncと違い、スラッシュの有無は挙動に影響しない。

** 任意の記号を実態参照にする手順
実態参照とは、ユニコード文字をそのままhtmlに記述する方法。多分。
代表的な記号は、英字でわかりやすく定義されているが、それ以外の記号の場合は
自分でコードを調べる必要がある。
- http://www.tamasoft.co.jp/ja/general-info/unicode.html
例えば、ドル記号の場合、行部分が"0020"なので16進から10進に変換して"32",
列部分が04なので10進に変換してそのまま"4"足して、36が実態参照の数値。
これをhtml表現するには =&#36;= とすれば良い。
