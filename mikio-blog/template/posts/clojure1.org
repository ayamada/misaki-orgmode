# @layout post
# @title Clojureでゲームプログラミングその1 実験編
# @date 2011-11-09 
# @tag clojure gamedev
* はじめに

LispでGAMEつくろうかなと。
最初CommonLispでつくろうかなと思ったけども、現時点でCommonLispとClojure(+Java)を比較したときに
後者のほうが詳しいかなということで、まずはClojureでつくってみて、落ち着いたらCommonLispでもつくってみようかなと。

とりあえず、下記の流れで、画像を表示して動かすところまでチャレンジしてみる。
- ウィンドウ表示
- 画像表示
- メインループの実現
- 画像移動

もちろん前回インストールしたSLIMEとLeiningenを使って作業しますよ。
ちなみにClojureで「もの」を作るのは初めてなので、ホント手探りです。
しかもClojureでGameプログラミングの情報ってほとんどないんだよな。さて。

* ウィンドウ表示
ClojureでのGUIはさっぱりわからんけども、とりあえずJavaのサンプルとかを頼りにウィンドウを表示してみる。
#+begin_src Clojure
(import (javax.swing JFrame))
(def frame (JFrame. "Clojure SampleGame")) 
(doto frame
(.setSize 640 480)
  (.setVisible true))
#+end_src
でた。簡単すぎる！結構感動します。

#+CAPTION: 初めてのウィンドウ表示!
[[file:/img/clojure-game01/01.png]]

次は画像を表示してみる。

* 画像表示

まずは、画像ファイルの読み込みだ。下記のコードをclojureで動かしてみる。
#+begin_src clojure
java.awt.image.BufferedImage bimage;
image = javax.imageio.ImageIO.read(new java.io.File("hoge.png"));
#+end_src
下記の画像を表示してみる。これは昔作ったゲームで使用したものでアニメーションパターンもはいってる。

#+CAPTION: スプライトパターン
[[file:/img/clojure-game01/gai.png]]

画像ファイルはプロジェクト直下においてある（REPLを起動したディレクトリ)。
外部ファイルはプロジェクトルートからの相対パスでOKのようである。
#+begin_src clojure
(import (java.awt.image BufferedImage))
(import (javax.imageio ImageIO))
(import (java.io File))
(def image (ImageIO/read (File. "gai.png"))) 
#+end_src
とりあえずうまく読み込めたっぽいので、ウィンドウに表示してみる。
#+begin_src clojure
(import (java.awt Graphics))
(def graphics (.. frame (getGraphics)))
(doto graphics
  (.drawImage image 0 0 frame))
#+end_src
でた！

#+CAPTION: スプライトの表示
[[file:/img/clojure-game01/02.png]]

線もかけたよ。
#+begin_src clojure
(.. graphics (drawLine 0 0 640 480))
#+end_src

#+CAPTION: いろいろ試す
[[file:/img/clojure-game01/03.png]]


ところでこれまでの画像表示はタイトルバーにめり込んでしまっている。
これは描画命令の座標原点が、ウィンドウそのもの左上を原点としているためである。
これを回避するには、Graphics#translateを呼び出す。

* 位置調整
ずれの原因であるタイトルバーや枠お情報は、java.awt.Insetsとういクラスに格納されている。
これはJframe#getInsetsメソッドで取得でいるので、束縛しておく。
#+begin_src clojure
(def insets (.. frame getInsets)) 
#+end_src

確認。それっぽい値が入っている。
#+begin_src clojure
user> insets
#<Insets java.awt.Insets[top=24,left=1,bottom=5,right=1]>
#+end_src

では、このinsetsを使って描画用原点をずらしてみる。
#+begin_src clojure
(.. frame (setVisible true))
(.. graphics (translate (.. insets left) (.. insets top)))
(.. graphics (clearRect 0 0 640 480))
(.. graphics (drawImage image 0 0 frame))
#+end_src

#+CAPTION: 原点をずらしたところ
[[file:/img/clojure-game01/04.png]] 

これで左上原点が、ずれていい具合に表示された。

insentsを利用したついでに説明。
実はウィンドウサイズで640x480を指定しているけれども、
タイトルバーや枠のサイズがあるため、描画領域は640x480よりもちょっと小さい。
なので、例えば640x480ちょうどのサイズの画像を表示しようとしても少し切れてしまったりする。
ということで、insentsを利用して描画領域が純粋に640x480似なるように調整する。
#+begin_src clojure
(doto frame
    (.setSize (+ 640 (.. insets left) (.. insets right)) (+ 480 (.. insets top) (.. insets bottom)))
    (.setVisible true))
#+end_src
以上で描画領域の細かい調整が完了した。

* 画像の一部を表示したい
ところで、現状だとアニメパターンがすべて表示されていてみっともないので
一部だけを表示したい。
この要件を満たすには、Graphics#DrawImageで下記のように引数を指定すれば良い。
#+begin_src clojure
(.drawImage
 	image   ;; 描画画像
	0 0     ;; 転送先の左上座標
	32 32   ;; 転送先の右下座標
	0 0     ;; 画像元の左上座標
	32 32   ;; 画像元の右下座標
 	frame)  ;; 描画対象
#+end_src

#+begin_src cojure
(import java.awt.Color)
(def clear-color (Color. 0 0 127))

(let [g (.. frame (getGraphics))]
  (doto g
    (.translate (.. insets left) (.. insets top))
    (.setColor clear-color)
    (.fillRect 0 0 640 480)
    (.drawImage image
                0 0 32 32
                0 0 32 32
                frame)
    (.dispose)))
#+end_src

#+CAPTION: 毎フレーム画像をクリア
[[file:/img/clojure-game01/05.png]]


なんども描画してると、前の画像が残って確認しづらいので
描画前にクリアカラーで塗りつぶしている。
ついでにグラフィックオブジェクトもその都度破棄するようにした。

つぎはゲームのかなめ、メインループを実現してみる。
* メインループの実現
メインループの実現方法にはにはいろいろあけれども
とりあえず動かすことが目的なので、
実装が簡単そうなjava.util.TimerTaskを使用してみる。

Clojureで継承が必要なJavaクラスを使うには、proxyを使う。
以下のようにTimerTaskを継承したクラスをつくる。
#+begin_src clojure
(import (java.util Timer TimerTask))
(import (java.util TimerTask))
(def mainloop
  (proxy [TimerTask] []
    (run []
      (println "呼びだされた"))
    )) 
#+end_src

テストしてみる。
#+begin_src clojure
user> (.. mainloop run) 
呼びだされた
nil
#+end_src
うまくいっているようである。

続いてTimeクラスにmainloopを渡してみる。これがはまった。
#+begin_src clojure
user> (.. (Timer.) schedule mainloop 0 500)

Malformed member expression
  [Thrown class java.lang.IllegalArgumentException]

Restarts:
 0: [QUIT] Quit to the SLIME top level

Backtrace:
  0: clojure.lang.Compiler$HostExpr$Parser.parse(Compiler.java:825)
  1: clojure.lang.Compiler.analyzeSeq(Compiler.java:5369)

#+end_src
「Malformed member expression」の原因がわからなくてかなりはまった。
ぐぐった結果、javaのlong型を引数として渡すときは、long関数を呼び出す必要があることがわかった。
#+begin_src clojure
user> (.. (Timer.) schedule mainloop (long 0) (long 500))
No matching field found: schedule for class java.util.Timer
  [Thrown class java.lang.IllegalArgumentException]

Restarts:
 0: [QUIT] Quit to the SLIME top level

Backtrace:
  0: clojure.lang.Reflector.getInstanceField(Reflector.java:245)
  1: clojure.lang.Reflector.invokeNoArgInstanceMember(Reflector.java:267)
#+end_src
とここでまたエラー。でまたぐぐった結果、メソッドの呼び出し方が間違っていたorz。
scheduleをカッコでくくらないと駄目らしい。
#+begin_src clojure
user> (.. (Timer.) (schedule mainloop (long 0) (long 500)))
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
呼びだされた
nil
#+end_src
ということでやっとTimerクラスにTimerタスクで作ったメインループを渡すことができた。ふぅ。
次は画像を動かしてみる。

* 画像の移動
いよいよ画像に魂を与えるw。その為には状態を管理しなければならない。座標だ。
Clojureはデフォルトでは値を更新できない。これを変更するためには特別な定義が必要。
スレッドを使う予定は今のところ無いので、扱いの簡単そうなatomを使用してみる。
#+begin_src clojure
;; プレイヤー定義
(def player (atom {:pos [0 0]}))
#+end_src

こんな感じで参照できる。
#+begin_src clojure
user> (@player :pos)
[0 0]
user> 
#+end_src

x座標は配列の0番目
#+begin_src clojure
user> (nth (@player :pos) 0) 
0
#+end_src

y座標は配列の1番目
#+begin_src clojure
user> (nth (@player :pos) 1) 
0
#+end_src

playerの座標を更新してみる。
#+begin_src clojure
user> player
#<Atom@2a134eca: {:pos [0 0]}>

;; 変更
user> (swap! player assoc :pos [0 1])
{:pos [0 1]}

;; たしかに更新された
user> player
#<Atom@2a134eca: {:pos [0 1]}>
#+end_src

x座標を更新させる
#+begin_src clojure
user> (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1])
{:pos [1 1]}
user> (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1])
{:pos [2 1]}
user> (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1])
{:pos [3 1]}
user> (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1])
{:pos [4 1]}
#+end_src

ではここまでの移動処理を組み込む。
#+begin_src clojure
(def mainloop
  (proxy [TimerTask] []
    (run []
      (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1]) ;; 座標更新
      (if (< 640 (nth (@player :pos) 0))
             (swap! player assoc :pos [0 0]))

      (let [g (.. frame (getGraphics))
            player-x (nth (@player :pos) 0)
            player-y (nth (@player :pos) 1)]
        
        (doto g
          (.translate (.. insets left) (.. insets top))
          (.setColor clear-color)
          (.fillRect 0 0 640 480)
          (.drawImage image
                      player-x player-y
                      (+ player-x 32) (+ player-y 32)
                      0 0 32 32
                      frame)
          (.dispose))))))
#+end_src

定義したメインループを20ms間隔で呼び出す。
#+begin_src clojure
(.. (Timer.) (schedule mainloop (long 0) (long 20)))
#+end_src

#+begin_html
<iframe width="425" height="349" src="http://www.youtube.com/embed/T4LLkAqETLQ?hl=ja&fs=1" frameborder="0" allowfullscreen></iframe>
#+end_html

画面がちらつきというか、画像が点滅していて話にならない。
次はこのチラツキを抑えるために java.awt.image.BufferStrategyを使ってみる。 

* ちらつき防止対策
下記のようにJFrame#setIgnoreRepaint, JFrame#createBufferStrategyを呼び出しバッファの準備をする。
この時注意すべきは、JFrame#createBufferStrategyはJFrame#setVisibleのあとに呼び出さなければならないこと。
#+begin_src clojure
(doto frame
    (.setSize (+ 640 (.. insets left) (.. insets right)) (+ 480 (.. insets top) (.. insets bottom)))
    (.setVisible true)
    (.setIgnoreRepaint true) ;; ウィンドウの再描画を無効に(BufferStrategyを使うので)
    (.createBufferStrategy 2) ;;  setVisibleメソッドのあとで呼ばないと実行時エラーになる
    )
;; バッファ作成
(def buffer (.. frame (getBufferStrategy)))
#+end_src

bufferを使って以下のように呼び出し。TimerTaskクラスオブジェクトは都度生成できるように関数化しておいた。
#+begin_src clojure
(defn create-mainloop
  []
  (proxy [TimerTask] []
    (run []
      (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1]) ;; 座標更新
      (if (< 640 (nth (@player :pos) 0))
             (swap! player assoc :pos [0 0]))

      (if (not (.. buffer (contentsLost)))
        (let [g (.. buffer (getDrawGraphics))
              player-x (nth (@player :pos) 0)
              player-y (nth (@player :pos) 1)]
          (doto g
            (.translate (.. insets left) (.. insets top))
            (.setColor clear-color)
            (.fillRect 0 0 640 480)
            (.translate (.. insets left) (.. insets top))
            (.drawImage image
                        player-x player-y
                        (+ player-x 32) (+ player-y 32)
                        0 0 32 32
                        frame)
            (.dispose))
          (.. buffer (show))
          )))))
#+end_src
#+begin_html
<iframe width="425" height="349" src="http://www.youtube.com/embed/3mO4EUh9cl0?hl=ja&fs=1" frameborder="0" allowfullscreen></iframe>
#+end_html



最終的なコード。
#+begin_src clojure
(ns hello-cube.core)

(import (javax.swing JFrame))
(import (java.util Timer TimerTask))
(import (java.awt Graphics Color))
(import (java.awt.image BufferedImage))
(import (javax.imageio ImageIO))
(import (java.io File))

(def clear-color (Color. 0 0 127))
(def frame (JFrame. "Clojure Sample Game")) 
(def image (ImageIO/read (File. "gai.png"))) ;; 画像読み込み
(def player (atom {:pos [0 0]}))

;; 枠を考慮してサイズ指定
(doto frame
    (.setVisible true)
    (.setIgnoreRepaint true) ;; ウィンドウの再描画を無効に(BufferStrategyを使うので)
    (.createBufferStrategy 2) ;;  setVisibleメソッドのあとで呼ばないと実行時エラーになる
    )

;; バッファ作成
(def buffer (.. frame (getBufferStrategy)))
(def insets (.. frame getInsets))  ;; ウィンドウを表示してから出ないと値が入らない。

(doto frame
    (.setSize (+ 640 (.. insets left) (.. insets right)) (+ 480 (.. insets top) (.. insets bottom))))


(defn create-mainloop
  []
  (proxy [TimerTask] []
    (run []
      (swap! player assoc :pos [(+ 1 (nth (@player :pos) 0)) 1]) ;; 座標更新
      (if (< 640 (nth (@player :pos) 0))
             (swap! player assoc :pos [0 0]))

      (if (not (.. buffer (contentsLost)))
        (let [g (.. buffer (getDrawGraphics))
              player-x (nth (@player :pos) 0)
              player-y (nth (@player :pos) 1)]
          (doto g
            (.translate (.. insets left) (.. insets top))
            (.setColor clear-color)
            (.fillRect 0 0 640 480)
            (.translate (.. insets left) (.. insets top))
            (.drawImage image
                        player-x player-y
                        (+ player-x 32) (+ player-y 32)
                        0 0 32 32
                        frame)
            (.dispose))
          (.. buffer (show))
          )))))

(def timer (Timer.))
(.. timer (schedule (create-mainloop) (long 0) (long 20)))
#+end_src

* 所感
ほとんどJavaのメソッドしか使ってないけどもSLIMEの良さは体感できた。
コードが即時反映されて画像が動くのは楽しい。
理想はSLIME上からGameObjectをリアルタイムに操作することだけど、これを実現するにはatomでは無理かも。
あとはスレッドとSLIMEの関係がよくわかってない。TimerTaskを使いにくく感じたのでメインループは別の方法で実現したい。

次回はもうちょっとコードのリファクタリングを施しつつ、
アニメーションとキーボード操作をできるようにしてみる。

* 参考書籍
#+begin_html
<ul class="thumbnails">
<li class="span2">
<a href="http://www.amazon.co.jp/gp/product/4274067890/ref=as_li_tf_il?ie=UTF8&amp;tag=ocha04-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=4274067890"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=4274067890&amp;MarketPlace=JP&amp;ID=AsinImage&amp;WS=1&amp;tag=ocha04-22&amp;ServiceVersion=20070822"></a><img width="1" height="1" border="0" style="border:none !important; margin:0px !important;" alt="" src="http://www.assoc-amazon.jp/e/ir?t=ocha04-22&amp;l=as2&amp;o=9&amp;a=4274067890">
</li>
<li class="span2">
<a href="http://www.amazon.co.jp/gp/product/4899772319/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;tag=ocha04-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=4899772319"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=4899772319&amp;MarketPlace=JP&amp;ID=AsinImage&amp;WS=1&amp;tag=ocha04-22&amp;ServiceVersion=20070822"></a><img width="1" height="1" border="0" style="border:none !important; margin:0px !important;" alt="" src="http://www.assoc-amazon.jp/e/ir?t=ocha04-22&amp;l=as2&amp;o=9&amp;a=4899772319">
</li>
</ul>
#+end_html

